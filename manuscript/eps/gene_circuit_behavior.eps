%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: gene_circuit_behavior.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Kevin Bullaughey
%%CreationDate: 5/23/12
%%BoundingBox: 0 0 459 530
%%HiResBoundingBox: 0 0 458.5000 529.8491
%%CropBox: 0 0 458.5000 529.8491
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:3CD1F0D4A1216811B1A4B1EF1F421A37</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:3CD1F0D4A1216811B1A4B1EF1F421A37</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:dcaf3c88-0e72-a14b-9331-e8a1bd738de4</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:FE7F117407206811B1A4B1EF1F421A37</stRef:instanceID>
            <stRef:documentID>xmp.did:FE7F117407206811B1A4B1EF1F421A37</stRef:documentID>
            <stRef:originalDocumentID>uuid:dcaf3c88-0e72-a14b-9331-e8a1bd738de4</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F117407206811B1A4B1EF1F421A37</stEvt:instanceID>
                  <stEvt:when>2011-06-28T13:21:13+09:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3CD1F0D4A1216811B1A4B1EF1F421A37</stEvt:instanceID>
                  <stEvt:when>2011-07-06T10:33:29+09:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2011-07-06T10:33:29+09:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:ModifyDate>2011-07-06T10:33:29+09:00</xmp:ModifyDate>
         <xmp:MetadataDate>2011-07-06T10:33:29+09:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>224</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADgAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A65+Xt5+Yf+NNUuvMMFwN&#xA;B8yLNeaNDIZn+oizlEMcM0bxRraNcW8iPw5NyZXNQarir03FXYq7FXYq7FXYqw384P06fy/vxob3&#xA;ceomexAksEuZbhYTfQC4ZEs2S5YCDnyETBuNaEdcVVvytXX18mWya4blr1Z7oJJeeoJnt/rMn1dy&#xA;k5edA0PEqkztIo2dmbfFWWYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>469.500000</stDim:w>
            <stDim:h>521.349121</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.037;PS 2.000;hotconv 1.0.51;makeotf.lib2.0.18671</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=205 G=91 B=69 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>205</xmpG:red>
                           <xmpG:green>91</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -529.849 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 529.849 li
458.5 529.849 li
458.5 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1.5 lw
0 lc
0 lj
3.25 ml
[3 3 ] 0 dsh
true sadj
272.52 96.2144 mo
272.52 241.201 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.426368 .347875 .353155 .00985733 cmyk
@
277.52 96.2144 mo
277.52 241.201 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 83 /S putdup 120 /x putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/x <1C60D8A8C9B7A73DB974843DC052273B2236A049EB6E5FE1C55CD985D3062CB5B3D8A046808C9F7D76A5170CE8699B434328F999D97554357E6BC34F0469> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LSXWEK+Helvetica /Helvetica findfont ct_VMDictPut/LSXWEK+Helvetica*1 [83{/.notdef}rp /S 36{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -12 -12 0 0 0 ]msf147.61 60.7197 mo(Sx)[-8.00391 0 ]ysh.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
172.52 20.9492 mo
172.52 88.8193 li
449 88.8193 li
@
172.52 86.3091 mo
172.52 23.4692 li
@
172.52 86.3091 mo
167.76 86.3091 li
@
172.52 54.8892 mo
167.76 54.8892 li
@
172.52 23.4692 mo
167.76 23.4692 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 46 /period putdup 48 /zero putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 34{/.notdef}rp /S 36{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 89.8687 mo(0.0)[-5.56152 -2.77832 0 ]ysh1.5 lw
358.96 86.3091 mo
359.3 86.3091 li
359.63 86.3091 li
359.96 86.3091 li
360.29 86.3091 li
360.63 86.3091 li
360.96 86.3091 li
361.29 86.3091 li
361.62 86.3091 li
361.96 86.3091 li
362.29 86.3091 li
362.62 86.3091 li
362.95 86.3091 li
363.29 86.3091 li
363.62 86.3091 li
363.95 86.3091 li
364.28 86.3091 li
364.62 86.3091 li
364.95 86.3091 li
365.28 86.3091 li
365.61 86.3091 li
365.95 86.3091 li
366.28 86.3091 li
366.61 86.3091 li
366.94 86.3091 li
367.28 86.3091 li
367.61 86.3091 li
367.94 86.3091 li
368.27 86.3091 li
368.61 86.3091 li
368.94 86.3091 li
369.27 86.3091 li
369.6 86.3091 li
369.94 86.3091 li
370.27 86.3091 li
370.6 86.3091 li
370.93 86.3091 li
371.27 86.3091 li
371.6 86.3091 li
371.93 86.3091 li
372.26 86.3091 li
372.59 86.3091 li
372.93 86.3091 li
373.26 86.3091 li
373.59 86.3091 li
373.92 86.3091 li
374.26 86.3091 li
374.59 86.3091 li
374.92 86.3091 li
375.25 86.3091 li
375.59 86.3091 li
375.92 86.3091 li
376.25 86.3091 li
376.58 86.3091 li
376.92 86.3091 li
377.25 86.3091 li
377.58 86.3091 li
377.91 86.3091 li
378.25 86.3091 li
378.58 86.3091 li
378.91 86.3091 li
379.24 86.3091 li
379.58 86.3091 li
379.91 86.3091 li
380.24 86.3091 li
380.57 86.3091 li
380.91 86.3091 li
381.24 86.3091 li
381.57 86.3091 li
381.9 86.3091 li
382.24 86.3091 li
382.57 86.3091 li
382.9 86.3091 li
383.23 86.3091 li
383.57 86.3091 li
383.9 86.3091 li
384.23 86.3091 li
384.56 86.3091 li
384.9 86.3091 li
385.23 86.3091 li
385.56 86.3091 li
385.89 86.3091 li
386.23 86.3091 li
386.56 86.3091 li
386.89 86.3091 li
387.22 86.3091 li
387.56 86.3091 li
387.89 86.3091 li
388.22 86.3091 li
388.55 86.3091 li
388.89 86.3091 li
389.22 86.3091 li
389.55 86.3091 li
389.88 86.3091 li
390.22 86.3091 li
390.55 86.3091 li
390.88 86.3091 li
391.21 86.3091 li
391.55 86.3091 li
391.88 86.3091 li
392.21 86.3091 li
392.54 86.3091 li
392.88 86.3091 li
393.21 86.3091 li
393.54 86.3091 li
393.87 86.3091 li
394.21 86.3091 li
394.54 86.3091 li
394.87 86.3091 li
395.2 86.3091 li
395.54 86.3091 li
395.87 86.3091 li
396.2 86.3091 li
396.53 86.3091 li
396.87 86.3091 li
397.2 86.3091 li
397.53 86.3091 li
397.86 86.3091 li
398.19 86.3091 li
398.53 86.3091 li
398.86 86.3091 li
399.19 86.3091 li
399.52 86.3091 li
399.86 86.3091 li
400.19 86.3091 li
400.52 86.3091 li
400.85 86.3091 li
401.19 86.3091 li
401.52 86.3091 li
401.85 86.3091 li
402.18 86.3091 li
402.52 86.3091 li
402.85 86.3091 li
403.18 86.3091 li
403.51 86.3091 li
403.85 86.3091 li
404.18 86.3091 li
404.51 86.3091 li
404.84 86.3091 li
405.18 86.3091 li
405.51 86.3091 li
405.84 86.3091 li
406.17 86.3091 li
406.51 86.3091 li
406.84 86.3091 li
407.17 86.3091 li
407.5 86.3091 li
407.84 86.3091 li
408.17 86.3091 li
408.5 86.3091 li
408.83 86.3091 li
409.17 86.3091 li
409.5 86.3091 li
409.83 86.3091 li
410.16 86.3091 li
410.5 86.3091 li
410.83 86.3091 li
411.16 86.3091 li
411.49 86.3091 li
411.83 86.3091 li
412.16 86.3091 li
412.49 86.3091 li
412.82 86.3091 li
413.16 86.3091 li
413.49 86.3091 li
413.82 86.3091 li
414.15 86.3091 li
414.49 86.3091 li
414.82 86.3091 li
415.15 86.3091 li
415.48 86.3091 li
415.82 86.3091 li
416.15 86.3091 li
416.48 86.3091 li
416.81 86.3091 li
417.15 86.3091 li
417.48 86.3091 li
417.81 86.3091 li
418.14 86.3091 li
418.48 86.3091 li
418.81 86.3091 li
419.14 86.3091 li
419.47 86.3091 li
419.81 86.3091 li
420.14 86.3091 li
420.47 86.3091 li
420.8 86.3091 li
421.14 86.3091 li
421.47 86.3091 li
421.8 86.3091 li
422.13 86.3091 li
422.47 86.3091 li
422.8 86.3091 li
423.13 86.3091 li
423.46 86.3091 li
423.79 86.3091 li
424.13 86.3091 li
424.46 86.3091 li
424.79 86.3091 li
425.12 86.3091 li
425.46 86.3091 li
425.79 86.3091 li
426.12 86.3091 li
426.45 86.3091 li
426.79 86.3091 li
427.12 86.3091 li
427.45 86.3091 li
427.78 86.3091 li
428.12 86.3091 li
428.45 86.3091 li
428.78 86.3091 li
429.11 86.3091 li
429.45 86.3091 li
429.78 86.3091 li
430.11 86.3091 li
430.44 86.3091 li
430.78 86.3091 li
431.11 86.3091 li
431.44 86.3091 li
431.77 86.3091 li
432.11 86.3091 li
432.44 86.3091 li
432.77 86.3091 li
433.1 86.3091 li
433.44 86.3091 li
433.77 86.3091 li
434.1 86.3091 li
434.43 86.3091 li
434.77 86.3091 li
435.1 86.3091 li
435.43 86.3091 li
435.76 86.3091 li
436.1 86.3091 li
436.43 86.3091 li
436.76 86.3091 li
437.09 86.3091 li
437.43 86.3091 li
437.76 86.3091 li
438.09 86.3091 li
438.42 86.3091 li
438.76 86.3091 li
@
[2 3 ] 0 dsh
355.64 86.3091 mo
355.64 23.4692 li
355.97 23.4692 li
356.3 23.4692 li
356.64 23.4692 li
356.97 23.4692 li
357.3 23.4692 li
357.63 23.4692 li
357.97 23.4692 li
358.3 23.4692 li
358.96 23.4692 li
358.96 86.3091 li
@
[] 0 dsh
182.76 86.3091 mo
183.09 86.3091 li
183.42 86.3091 li
183.75 86.3091 li
184.09 86.3091 li
184.42 86.3091 li
184.75 86.3091 li
185.08 86.3091 li
185.42 86.3091 li
185.75 86.3091 li
186.08 86.3091 li
186.41 86.3091 li
186.75 86.3091 li
187.08 86.3091 li
187.41 86.3091 li
187.74 86.3091 li
188.08 86.3091 li
188.41 86.3091 li
188.74 86.3091 li
189.07 86.3091 li
189.41 86.3091 li
189.41 23.4692 li
189.74 23.4692 li
190.07 23.4692 li
190.4 23.4692 li
190.74 23.4692 li
191.07 23.4692 li
191.4 23.4692 li
191.73 23.4692 li
192.07 23.4692 li
192.73 23.4692 li
192.73 86.3091 li
193.06 86.3091 li
193.39 86.3091 li
193.73 86.3091 li
194.06 86.3091 li
194.39 86.3091 li
194.72 86.3091 li
195.06 86.3091 li
195.39 86.3091 li
195.72 86.3091 li
196.05 86.3091 li
196.39 86.3091 li
196.72 86.3091 li
197.05 86.3091 li
197.38 86.3091 li
197.72 86.3091 li
198.05 86.3091 li
198.38 86.3091 li
198.71 86.3091 li
199.05 86.3091 li
199.38 86.3091 li
199.71 86.3091 li
200.04 86.3091 li
200.38 86.3091 li
200.71 86.3091 li
201.04 86.3091 li
201.37 86.3091 li
201.71 86.3091 li
202.04 86.3091 li
202.37 86.3091 li
202.7 86.3091 li
203.04 86.3091 li
203.37 86.3091 li
203.7 86.3091 li
204.03 86.3091 li
204.37 86.3091 li
204.7 86.3091 li
205.03 86.3091 li
205.36 86.3091 li
205.7 86.3091 li
206.03 86.3091 li
206.36 86.3091 li
206.69 86.3091 li
207.03 86.3091 li
207.36 86.3091 li
207.69 86.3091 li
208.02 86.3091 li
208.36 86.3091 li
208.69 86.3091 li
209.02 86.3091 li
209.35 86.3091 li
209.69 86.3091 li
210.02 86.3091 li
210.35 86.3091 li
210.68 86.3091 li
211.02 86.3091 li
211.35 86.3091 li
211.68 86.3091 li
212.01 86.3091 li
212.35 86.3091 li
212.68 86.3091 li
213.01 86.3091 li
213.34 86.3091 li
213.68 86.3091 li
214.01 86.3091 li
214.34 86.3091 li
214.67 86.3091 li
215.01 86.3091 li
215.34 86.3091 li
215.67 86.3091 li
216 86.3091 li
216.34 86.3091 li
216.67 86.3091 li
217 86.3091 li
217.33 86.3091 li
217.67 86.3091 li
218 86.3091 li
218.33 86.3091 li
218.66 86.3091 li
218.99 86.3091 li
219.33 86.3091 li
219.66 86.3091 li
219.99 86.3091 li
220.32 86.3091 li
220.66 86.3091 li
220.99 86.3091 li
221.32 86.3091 li
221.65 86.3091 li
221.99 86.3091 li
222.32 86.3091 li
222.65 86.3091 li
222.98 86.3091 li
223.32 86.3091 li
223.65 86.3091 li
223.98 86.3091 li
224.31 86.3091 li
224.65 86.3091 li
224.98 86.3091 li
225.31 86.3091 li
225.64 86.3091 li
225.98 86.3091 li
226.31 86.3091 li
226.64 86.3091 li
226.97 86.3091 li
227.31 86.3091 li
227.64 86.3091 li
227.97 86.3091 li
228.3 86.3091 li
228.64 86.3091 li
228.97 86.3091 li
229.3 86.3091 li
229.63 86.3091 li
229.97 86.3091 li
230.3 86.3091 li
230.63 86.3091 li
230.96 86.3091 li
231.3 86.3091 li
231.63 86.3091 li
231.96 86.3091 li
232.29 86.3091 li
232.63 86.3091 li
232.96 86.3091 li
233.29 86.3091 li
233.62 86.3091 li
233.96 86.3091 li
234.29 86.3091 li
234.62 86.3091 li
234.95 86.3091 li
235.29 86.3091 li
235.62 86.3091 li
235.95 86.3091 li
236.28 86.3091 li
236.62 86.3091 li
236.95 86.3091 li
237.28 86.3091 li
237.61 86.3091 li
237.95 86.3091 li
238.28 86.3091 li
238.61 86.3091 li
238.94 86.3091 li
239.28 86.3091 li
239.61 86.3091 li
239.94 86.3091 li
240.27 86.3091 li
240.61 86.3091 li
240.94 86.3091 li
241.27 86.3091 li
241.6 86.3091 li
241.94 86.3091 li
242.27 86.3091 li
242.6 86.3091 li
242.93 86.3091 li
243.27 86.3091 li
243.6 86.3091 li
243.93 86.3091 li
244.26 86.3091 li
244.59 86.3091 li
244.93 86.3091 li
245.26 86.3091 li
245.59 86.3091 li
245.92 86.3091 li
246.26 86.3091 li
246.59 86.3091 li
246.92 86.3091 li
247.25 86.3091 li
247.59 86.3091 li
247.92 86.3091 li
248.25 86.3091 li
248.58 86.3091 li
248.92 86.3091 li
249.25 86.3091 li
249.58 86.3091 li
249.91 86.3091 li
250.25 86.3091 li
250.58 86.3091 li
250.91 86.3091 li
251.24 86.3091 li
251.58 86.3091 li
251.91 86.3091 li
252.24 86.3091 li
252.57 86.3091 li
252.91 86.3091 li
253.24 86.3091 li
253.57 86.3091 li
253.9 86.3091 li
254.24 86.3091 li
254.57 86.3091 li
254.9 86.3091 li
255.23 86.3091 li
255.57 86.3091 li
255.9 86.3091 li
256.23 86.3091 li
256.56 86.3091 li
256.9 86.3091 li
257.23 86.3091 li
257.56 86.3091 li
257.89 86.3091 li
258.23 86.3091 li
258.56 86.3091 li
258.89 86.3091 li
259.22 86.3091 li
259.56 86.3091 li
259.89 86.3091 li
260.22 86.3091 li
260.55 86.3091 li
260.89 86.3091 li
261.22 86.3091 li
261.55 86.3091 li
261.88 86.3091 li
262.22 86.3091 li
262.55 86.3091 li
262.88 86.3091 li
263.21 86.3091 li
263.55 86.3091 li
263.88 86.3091 li
264.21 86.3091 li
264.54 86.3091 li
264.88 86.3091 li
265.21 86.3091 li
265.54 86.3091 li
265.87 86.3091 li
266.21 86.3091 li
266.54 86.3091 li
266.87 86.3091 li
267.2 86.3091 li
267.54 86.3091 li
267.87 86.3091 li
268.2 86.3091 li
268.53 86.3091 li
268.87 86.3091 li
269.2 86.3091 li
269.53 86.3091 li
269.86 86.3091 li
270.19 86.3091 li
270.53 86.3091 li
270.86 86.3091 li
271.19 86.3091 li
271.52 86.3091 li
271.86 86.3091 li
272.19 86.3091 li
272.52 86.3091 li
272.52 23.4692 li
272.85 23.4692 li
273.19 23.4692 li
273.52 23.4692 li
273.85 23.4692 li
274.18 23.4692 li
274.52 23.4692 li
274.85 23.4692 li
275.18 23.4692 li
275.51 23.4692 li
275.85 23.4692 li
276.18 23.4692 li
276.51 23.4692 li
276.84 23.4692 li
277.18 23.4692 li
277.51 23.4692 li
277.84 23.4692 li
278.17 23.4692 li
278.51 23.4692 li
278.84 23.4692 li
279.17 23.4692 li
279.5 23.4692 li
279.84 23.4692 li
280.17 23.4692 li
280.5 23.4692 li
280.83 23.4692 li
281.17 23.4692 li
281.5 23.4692 li
281.83 23.4692 li
282.16 23.4692 li
282.5 23.4692 li
282.83 23.4692 li
283.16 23.4692 li
283.49 23.4692 li
283.83 23.4692 li
284.16 23.4692 li
284.49 23.4692 li
284.82 23.4692 li
285.16 23.4692 li
285.49 23.4692 li
285.82 23.4692 li
286.15 23.4692 li
286.49 23.4692 li
286.82 23.4692 li
287.15 23.4692 li
287.48 23.4692 li
287.82 23.4692 li
288.15 23.4692 li
288.48 23.4692 li
288.81 23.4692 li
289.15 23.4692 li
289.48 23.4692 li
289.81 23.4692 li
290.14 23.4692 li
290.48 23.4692 li
290.81 23.4692 li
291.14 23.4692 li
291.47 23.4692 li
291.81 23.4692 li
292.141 23.4692 li
292.471 23.4692 li
292.8 23.4692 li
293.141 23.4692 li
293.471 23.4692 li
293.8 23.4692 li
294.13 23.4692 li
294.471 23.4692 li
294.8 23.4692 li
295.13 23.4692 li
295.46 23.4692 li
295.79 23.4692 li
296.13 23.4692 li
296.46 23.4692 li
296.79 23.4692 li
297.12 23.4692 li
297.46 23.4692 li
297.79 23.4692 li
298.12 23.4692 li
298.45 23.4692 li
298.79 23.4692 li
299.12 23.4692 li
299.45 23.4692 li
299.78 23.4692 li
300.12 23.4692 li
300.45 23.4692 li
300.78 23.4692 li
301.11 23.4692 li
301.45 23.4692 li
301.78 23.4692 li
302.11 23.4692 li
302.44 23.4692 li
302.78 23.4692 li
303.11 23.4692 li
303.44 23.4692 li
303.77 23.4692 li
304.11 23.4692 li
304.44 23.4692 li
304.77 23.4692 li
305.1 23.4692 li
305.77 23.4692 li
305.77 86.3091 li
306.1 86.3091 li
306.43 86.3091 li
306.77 86.3091 li
307.1 86.3091 li
307.43 86.3091 li
307.76 86.3091 li
308.1 86.3091 li
308.43 86.3091 li
308.76 86.3091 li
309.09 86.3091 li
309.43 86.3091 li
309.76 86.3091 li
310.09 86.3091 li
310.42 86.3091 li
310.76 86.3091 li
311.09 86.3091 li
311.42 86.3091 li
311.75 86.3091 li
312.09 86.3091 li
312.42 86.3091 li
312.75 86.3091 li
313.08 86.3091 li
313.42 86.3091 li
313.75 86.3091 li
314.08 86.3091 li
314.41 86.3091 li
314.75 86.3091 li
315.08 86.3091 li
315.41 86.3091 li
315.74 86.3091 li
316.08 86.3091 li
316.41 86.3091 li
316.74 86.3091 li
317.07 86.3091 li
317.41 86.3091 li
317.74 86.3091 li
318.07 86.3091 li
318.4 86.3091 li
318.74 86.3091 li
319.07 86.3091 li
319.4 86.3091 li
319.73 86.3091 li
320.07 86.3091 li
320.4 86.3091 li
320.73 86.3091 li
321.06 86.3091 li
321.39 86.3091 li
321.73 86.3091 li
322.06 86.3091 li
322.39 86.3091 li
322.72 86.3091 li
323.06 86.3091 li
323.39 86.3091 li
323.72 86.3091 li
324.05 86.3091 li
324.39 86.3091 li
324.72 86.3091 li
325.05 86.3091 li
325.38 86.3091 li
325.72 86.3091 li
326.05 86.3091 li
326.38 86.3091 li
326.71 86.3091 li
327.05 86.3091 li
327.38 86.3091 li
327.71 86.3091 li
328.04 86.3091 li
328.38 86.3091 li
328.71 86.3091 li
329.04 86.3091 li
329.37 86.3091 li
329.71 86.3091 li
330.04 86.3091 li
330.37 86.3091 li
330.7 86.3091 li
331.04 86.3091 li
331.37 86.3091 li
331.7 86.3091 li
332.03 86.3091 li
332.37 86.3091 li
332.7 86.3091 li
333.03 86.3091 li
333.36 86.3091 li
333.7 86.3091 li
334.03 86.3091 li
334.36 86.3091 li
334.69 86.3091 li
335.03 86.3091 li
335.36 86.3091 li
335.69 86.3091 li
336.02 86.3091 li
336.36 86.3091 li
336.69 86.3091 li
337.02 86.3091 li
337.35 86.3091 li
337.69 86.3091 li
338.02 86.3091 li
338.35 86.3091 li
338.68 86.3091 li
339.02 86.3091 li
339.35 86.3091 li
339.68 86.3091 li
340.01 86.3091 li
340.35 86.3091 li
340.68 86.3091 li
341.01 86.3091 li
341.34 86.3091 li
341.68 86.3091 li
342.01 86.3091 li
342.34 86.3091 li
342.67 86.3091 li
343.01 86.3091 li
343.34 86.3091 li
343.67 86.3091 li
344 86.3091 li
344.34 86.3091 li
344.67 86.3091 li
345 86.3091 li
345.33 86.3091 li
345.67 86.3091 li
346 86.3091 li
346.33 86.3091 li
346.66 86.3091 li
346.99 86.3091 li
347.33 86.3091 li
347.66 86.3091 li
347.99 86.3091 li
348.32 86.3091 li
348.66 86.3091 li
348.99 86.3091 li
349.32 86.3091 li
349.65 86.3091 li
349.99 86.3091 li
350.32 86.3091 li
350.65 86.3091 li
350.98 86.3091 li
351.32 86.3091 li
351.65 86.3091 li
351.98 86.3091 li
352.31 86.3091 li
352.65 86.3091 li
352.98 86.3091 li
353.31 86.3091 li
353.64 86.3091 li
353.98 86.3091 li
354.31 86.3091 li
354.64 86.3091 li
354.97 86.3091 li
355.31 86.3091 li
355.64 86.3091 li
@
gsave
172.52 166.199 mo
449 166.199 li
449 98.3291 li
172.52 98.3291 li
172.52 166.199 li
cp
clp
grestore
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Y <1C60D8A8C9B64EDFF46D2EC9D2AE9B9064B89D1619D7BD915D4A1DC374BDA504CF8C7F69969A9C11B530CF3B> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 89 /Y putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 34{/.notdef}rp /S 5{/.notdef}rp /Y 30{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -12 -12 0 0 0 ]msf147.61 135.599 mo(Y)sh.75 lw
172.52 163.679 mo
172.52 100.839 li
@
172.52 163.679 mo
167.76 163.679 li
@
172.52 132.259 mo
167.76 132.259 li
@
172.52 100.839 mo
167.76 100.839 li
@
LSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 167.24 mo(0.0)[-5.56152 -2.77832 0 ]ysh172.52 98.3291 mo
172.52 166.199 li
449 166.199 li
@
gsave
172.52 166.199 mo
449 166.199 li
449 98.3291 li
172.52 98.3291 li
172.52 166.199 li
cp
clp
1.5 lw
182.76 163.679 mo
183.09 163.679 li
183.42 163.679 li
183.75 163.679 li
184.09 163.679 li
184.42 163.679 li
184.75 163.679 li
185.08 163.679 li
185.42 163.679 li
185.75 163.679 li
186.08 163.679 li
186.41 163.679 li
186.75 163.679 li
187.08 163.679 li
187.41 163.679 li
187.74 163.679 li
188.08 163.679 li
188.41 163.679 li
188.74 163.679 li
189.07 163.679 li
189.41 163.679 li
189.74 161.219 li
190.07 158.849 li
190.4 156.579 li
190.74 154.389 li
191.07 152.289 li
191.4 150.269 li
191.73 148.339 li
192.07 146.469 li
192.4 144.679 li
192.73 145.429 li
193.06 146.139 li
193.39 146.829 li
193.73 147.489 li
194.06 148.129 li
194.39 148.739 li
194.72 149.319 li
195.06 149.889 li
195.39 150.429 li
195.72 150.949 li
196.05 151.449 li
196.39 151.929 li
196.72 152.389 li
197.05 152.829 li
197.38 153.259 li
197.72 153.659 li
198.05 154.059 li
198.38 154.439 li
198.71 154.799 li
199.05 155.149 li
199.38 155.479 li
199.71 155.799 li
200.04 156.109 li
200.38 156.409 li
200.71 156.689 li
201.04 156.969 li
201.37 157.229 li
201.71 157.479 li
202.04 157.729 li
202.37 157.959 li
202.7 158.179 li
203.04 158.399 li
203.37 158.609 li
203.7 158.809 li
204.03 158.999 li
204.37 159.179 li
204.7 159.359 li
205.03 159.529 li
205.36 159.689 li
205.7 159.849 li
206.03 159.999 li
206.36 160.139 li
206.69 160.279 li
207.03 160.409 li
207.36 160.539 li
207.69 160.669 li
208.02 160.779 li
208.36 160.899 li
208.69 161.009 li
209.02 161.109 li
209.35 161.209 li
209.69 161.309 li
210.02 161.399 li
210.35 161.489 li
210.68 161.579 li
211.02 161.659 li
211.35 161.739 li
211.68 161.819 li
212.01 161.889 li
212.35 161.959 li
212.68 162.029 li
213.01 162.089 li
213.34 162.149 li
213.68 162.209 li
214.01 162.269 li
214.34 162.329 li
214.67 162.379 li
215.01 162.429 li
215.34 162.479 li
215.67 162.529 li
216 162.569 li
216.34 162.619 li
216.67 162.659 li
217 162.699 li
217.33 162.739 li
217.67 162.769 li
218 162.809 li
218.33 162.839 li
218.66 162.879 li
218.99 162.909 li
219.33 162.939 li
219.66 162.969 li
219.99 162.999 li
220.32 163.019 li
220.66 163.049 li
220.99 163.069 li
221.32 163.099 li
221.65 163.119 li
221.99 163.139 li
222.32 163.159 li
222.65 163.179 li
222.98 163.199 li
223.32 163.219 li
223.65 163.239 li
223.98 163.259 li
224.31 163.269 li
224.65 163.289 li
224.98 163.309 li
225.31 163.319 li
225.64 163.329 li
225.98 163.349 li
226.31 163.359 li
226.64 163.369 li
226.97 163.389 li
227.31 163.399 li
227.64 163.409 li
227.97 163.419 li
228.3 163.429 li
228.64 163.439 li
228.97 163.449 li
229.3 163.459 li
229.63 163.469 li
229.97 163.479 li
230.3 163.479 li
230.63 163.489 li
230.96 163.499 li
231.3 163.509 li
231.63 163.509 li
231.96 163.519 li
232.29 163.529 li
232.63 163.529 li
232.96 163.539 li
233.29 163.539 li
233.62 163.549 li
233.96 163.549 li
234.29 163.559 li
234.62 163.559 li
234.95 163.569 li
235.29 163.569 li
235.62 163.579 li
235.95 163.579 li
236.28 163.589 li
236.62 163.589 li
236.95 163.589 li
237.28 163.599 li
237.61 163.599 li
237.95 163.599 li
238.28 163.609 li
238.61 163.609 li
238.94 163.609 li
239.28 163.619 li
239.61 163.619 li
239.94 163.619 li
240.27 163.619 li
240.61 163.629 li
240.94 163.629 li
241.27 163.629 li
241.6 163.629 li
241.94 163.629 li
242.27 163.639 li
242.6 163.639 li
242.93 163.639 li
243.27 163.639 li
243.6 163.639 li
243.93 163.639 li
244.26 163.649 li
244.59 163.649 li
244.93 163.649 li
245.26 163.649 li
245.59 163.649 li
245.92 163.649 li
246.26 163.649 li
246.59 163.649 li
246.92 163.659 li
247.25 163.659 li
247.59 163.659 li
247.92 163.659 li
248.25 163.659 li
248.58 163.659 li
248.92 163.659 li
249.25 163.659 li
249.58 163.659 li
249.91 163.659 li
250.25 163.659 li
250.58 163.669 li
250.91 163.669 li
251.24 163.669 li
251.58 163.669 li
251.91 163.669 li
252.24 163.669 li
252.57 163.669 li
252.91 163.669 li
253.24 163.669 li
253.57 163.669 li
253.9 163.669 li
254.24 163.669 li
254.57 163.669 li
254.9 163.669 li
255.23 163.669 li
255.57 163.669 li
255.9 163.669 li
256.23 163.669 li
256.56 163.669 li
256.9 163.669 li
257.23 163.669 li
257.56 163.679 li
257.89 163.679 li
258.23 163.679 li
258.56 163.679 li
258.89 163.679 li
259.22 163.679 li
259.56 163.679 li
259.89 163.679 li
260.22 163.679 li
260.55 163.679 li
260.89 163.679 li
261.22 163.679 li
261.55 163.679 li
261.88 163.679 li
262.22 163.679 li
262.55 163.679 li
262.88 163.679 li
263.21 163.679 li
263.55 163.679 li
263.88 163.679 li
264.21 163.679 li
264.54 163.679 li
264.88 163.679 li
265.21 163.679 li
265.54 163.679 li
265.87 163.679 li
266.21 163.679 li
266.54 163.679 li
266.87 163.679 li
267.2 163.679 li
267.54 163.679 li
267.87 163.679 li
268.2 163.679 li
268.53 163.679 li
268.87 163.679 li
269.2 163.679 li
269.53 163.679 li
269.86 163.679 li
270.19 163.679 li
270.53 163.679 li
270.86 163.679 li
271.19 163.679 li
271.52 163.679 li
271.86 163.679 li
272.19 163.679 li
272.52 163.679 li
272.85 161.219 li
273.19 158.849 li
273.52 156.579 li
273.85 154.389 li
274.18 152.289 li
274.52 150.269 li
274.85 148.339 li
275.18 146.469 li
275.51 144.679 li
275.85 142.959 li
276.18 141.309 li
276.51 139.729 li
276.84 138.199 li
277.18 136.739 li
277.51 135.329 li
277.84 133.979 li
278.17 132.679 li
278.51 131.429 li
278.84 130.229 li
279.17 129.079 li
279.5 127.969 li
279.84 126.909 li
280.17 125.879 li
280.5 124.899 li
280.83 123.959 li
281.17 123.049 li
281.5 122.179 li
281.83 121.339 li
282.16 120.539 li
282.5 119.769 li
282.83 119.029 li
283.16 118.309 li
283.49 117.629 li
283.83 116.969 li
284.16 116.339 li
284.49 115.729 li
284.82 115.149 li
285.16 114.589 li
285.49 114.049 li
285.82 113.529 li
286.15 113.029 li
286.49 112.549 li
286.82 112.089 li
287.15 111.649 li
287.48 111.229 li
287.82 110.819 li
288.15 110.429 li
288.48 110.049 li
288.81 109.689 li
289.15 109.349 li
289.48 109.009 li
289.81 108.689 li
290.14 108.379 li
290.48 108.089 li
290.81 107.799 li
291.14 107.529 li
291.47 107.269 li
291.81 107.019 li
292.141 106.769 li
292.471 106.539 li
292.8 106.319 li
293.141 106.099 li
293.471 105.899 li
293.8 105.699 li
294.13 105.509 li
294.471 105.329 li
294.8 105.149 li
295.13 104.979 li
295.46 104.819 li
295.79 104.659 li
296.13 104.509 li
296.46 104.369 li
296.79 104.229 li
297.12 104.099 li
297.46 103.969 li
297.79 103.849 li
298.12 103.729 li
298.45 103.619 li
298.79 103.509 li
299.12 103.399 li
299.45 103.299 li
299.78 103.209 li
300.12 103.109 li
300.45 103.019 li
300.78 102.939 li
301.11 102.859 li
301.45 102.779 li
301.78 102.699 li
302.11 102.629 li
302.44 102.559 li
302.78 102.489 li
303.11 102.429 li
303.44 102.359 li
303.77 102.299 li
304.11 102.249 li
304.44 102.189 li
304.77 102.139 li
305.1 102.089 li
305.44 102.039 li
305.77 104.459 li
306.1 106.779 li
306.43 109.009 li
306.77 111.149 li
307.1 113.209 li
307.43 115.189 li
307.76 117.089 li
308.1 118.919 li
308.43 120.679 li
308.76 122.359 li
309.09 123.979 li
309.43 125.539 li
309.76 127.029 li
310.09 128.469 li
310.42 129.849 li
310.76 131.179 li
311.09 132.449 li
311.42 133.679 li
311.75 134.849 li
312.09 135.979 li
312.42 137.069 li
312.75 138.109 li
313.08 139.119 li
313.42 140.079 li
313.75 141.009 li
314.08 141.889 li
314.41 142.749 li
314.75 143.569 li
315.08 144.359 li
315.41 145.119 li
315.74 145.839 li
316.08 146.539 li
316.41 147.219 li
316.74 147.859 li
317.07 148.479 li
317.41 149.079 li
317.74 149.649 li
318.07 150.199 li
318.4 150.729 li
318.74 151.239 li
319.07 151.719 li
319.4 152.189 li
319.73 152.639 li
320.07 153.079 li
320.4 153.489 li
320.73 153.889 li
321.06 154.279 li
321.39 154.649 li
321.73 154.999 li
322.06 155.339 li
322.39 155.669 li
322.72 155.979 li
323.06 156.279 li
323.39 156.569 li
323.72 156.849 li
324.05 157.119 li
324.39 157.379 li
324.72 157.619 li
325.05 157.859 li
325.38 158.089 li
325.72 158.309 li
326.05 158.519 li
326.38 158.719 li
326.71 158.919 li
327.05 159.099 li
327.38 159.279 li
327.71 159.459 li
328.04 159.619 li
328.38 159.779 li
328.71 159.929 li
329.04 160.079 li
329.37 160.219 li
329.71 160.359 li
330.04 160.489 li
330.37 160.609 li
330.7 160.729 li
331.04 160.849 li
331.37 160.959 li
331.7 161.069 li
332.03 161.169 li
332.37 161.269 li
332.7 161.359 li
333.03 161.449 li
333.36 161.539 li
333.7 161.629 li
334.03 161.709 li
334.36 161.779 li
334.69 161.859 li
335.03 161.929 li
335.36 161.999 li
335.69 162.059 li
336.02 162.129 li
336.36 162.189 li
336.69 162.249 li
337.02 162.299 li
337.35 162.359 li
337.69 162.409 li
338.02 162.459 li
338.35 162.509 li
338.68 162.549 li
339.02 162.599 li
339.35 162.639 li
339.68 162.679 li
340.01 162.719 li
340.35 162.759 li
340.68 162.789 li
341.01 162.829 li
341.34 162.859 li
341.68 162.889 li
342.01 162.929 li
342.34 162.959 li
342.67 162.979 li
343.01 163.009 li
343.34 163.039 li
343.67 163.059 li
344 163.089 li
344.34 163.109 li
344.67 163.129 li
345 163.149 li
345.33 163.179 li
345.67 163.199 li
346 163.209 li
346.33 163.229 li
346.66 163.249 li
346.99 163.269 li
347.33 163.279 li
347.66 163.299 li
347.99 163.309 li
348.32 163.329 li
348.66 163.339 li
348.99 163.359 li
349.32 163.369 li
349.65 163.379 li
349.99 163.389 li
350.32 163.399 li
350.65 163.419 li
350.98 163.429 li
351.32 163.439 li
351.65 163.449 li
351.98 163.449 li
352.31 163.459 li
352.65 163.469 li
352.98 163.479 li
353.31 163.489 li
353.64 163.499 li
353.98 163.499 li
354.31 163.509 li
354.64 163.519 li
354.97 163.519 li
355.31 163.529 li
355.64 163.539 li
355.64 163.679 li
355.97 161.219 li
356.3 158.849 li
356.64 156.579 li
356.97 154.389 li
357.3 152.289 li
357.63 150.269 li
357.97 148.339 li
358.3 146.469 li
358.63 144.679 li
358.96 145.429 li
359.3 146.139 li
359.63 146.829 li
359.96 147.489 li
360.29 148.129 li
360.63 148.739 li
360.96 149.319 li
361.29 149.889 li
361.62 150.429 li
361.96 150.949 li
362.29 151.449 li
362.62 151.929 li
362.95 152.389 li
363.29 152.829 li
363.62 153.259 li
363.95 153.659 li
364.28 154.059 li
364.62 154.439 li
364.95 154.799 li
365.28 155.149 li
365.61 155.479 li
365.95 155.799 li
366.28 156.109 li
366.61 156.409 li
366.94 156.689 li
367.28 156.969 li
367.61 157.229 li
367.94 157.479 li
368.27 157.729 li
368.61 157.959 li
368.94 158.179 li
369.27 158.399 li
369.6 158.609 li
369.94 158.809 li
370.27 158.999 li
370.6 159.179 li
370.93 159.359 li
371.27 159.529 li
371.6 159.689 li
371.93 159.849 li
372.26 159.999 li
372.59 160.139 li
372.93 160.279 li
373.26 160.409 li
373.59 160.539 li
373.92 160.669 li
374.26 160.779 li
374.59 160.899 li
374.92 161.009 li
375.25 161.109 li
375.59 161.209 li
375.92 161.309 li
376.25 161.399 li
376.58 161.489 li
376.92 161.579 li
377.25 161.659 li
377.58 161.739 li
377.91 161.819 li
378.25 161.889 li
378.58 161.959 li
378.91 162.029 li
379.24 162.089 li
379.58 162.149 li
379.91 162.209 li
380.24 162.269 li
380.57 162.329 li
380.91 162.379 li
381.24 162.429 li
381.57 162.479 li
381.9 162.529 li
382.24 162.569 li
382.57 162.619 li
382.9 162.659 li
383.23 162.699 li
383.57 162.739 li
383.9 162.769 li
384.23 162.809 li
384.56 162.839 li
384.9 162.879 li
385.23 162.909 li
385.56 162.939 li
385.89 162.969 li
386.23 162.999 li
386.56 163.019 li
386.89 163.049 li
387.22 163.069 li
387.56 163.099 li
387.89 163.119 li
388.22 163.139 li
388.55 163.159 li
388.89 163.179 li
389.22 163.199 li
389.55 163.219 li
389.88 163.239 li
390.22 163.259 li
390.55 163.269 li
390.88 163.289 li
391.21 163.309 li
391.55 163.319 li
391.88 163.329 li
392.21 163.349 li
392.54 163.359 li
392.88 163.369 li
393.21 163.389 li
393.54 163.399 li
393.87 163.409 li
394.21 163.419 li
394.54 163.429 li
394.87 163.439 li
395.2 163.449 li
395.54 163.459 li
395.87 163.469 li
396.2 163.479 li
396.53 163.479 li
396.87 163.489 li
397.2 163.499 li
397.53 163.509 li
397.86 163.509 li
398.19 163.519 li
398.53 163.529 li
398.86 163.529 li
399.19 163.539 li
399.52 163.539 li
399.86 163.549 li
400.19 163.549 li
400.52 163.559 li
400.85 163.559 li
401.19 163.569 li
401.52 163.569 li
401.85 163.579 li
402.18 163.579 li
402.52 163.589 li
402.85 163.589 li
403.18 163.589 li
403.51 163.599 li
403.85 163.599 li
404.18 163.599 li
404.51 163.609 li
404.84 163.609 li
405.18 163.609 li
405.51 163.619 li
405.84 163.619 li
406.17 163.619 li
406.51 163.619 li
406.84 163.629 li
407.17 163.629 li
407.5 163.629 li
407.84 163.629 li
408.17 163.629 li
408.5 163.639 li
408.83 163.639 li
409.17 163.639 li
409.5 163.639 li
409.83 163.639 li
410.16 163.639 li
410.5 163.649 li
410.83 163.649 li
411.16 163.649 li
411.49 163.649 li
411.83 163.649 li
412.16 163.649 li
412.49 163.649 li
412.82 163.649 li
413.16 163.659 li
413.49 163.659 li
413.82 163.659 li
414.15 163.659 li
414.49 163.659 li
414.82 163.659 li
415.15 163.659 li
415.48 163.659 li
415.82 163.659 li
416.15 163.659 li
416.48 163.659 li
416.81 163.669 li
417.15 163.669 li
417.48 163.669 li
417.81 163.669 li
418.14 163.669 li
418.48 163.669 li
418.81 163.669 li
419.14 163.669 li
419.47 163.669 li
419.81 163.669 li
420.14 163.669 li
420.47 163.669 li
420.8 163.669 li
421.14 163.669 li
421.47 163.669 li
421.8 163.669 li
422.13 163.669 li
422.47 163.669 li
422.8 163.669 li
423.13 163.669 li
423.46 163.669 li
423.79 163.679 li
424.13 163.679 li
424.46 163.679 li
424.79 163.679 li
425.12 163.679 li
425.46 163.679 li
425.79 163.679 li
426.12 163.679 li
426.45 163.679 li
426.79 163.679 li
427.12 163.679 li
427.45 163.679 li
427.78 163.679 li
428.12 163.679 li
428.45 163.679 li
428.78 163.679 li
429.11 163.679 li
429.45 163.679 li
429.78 163.679 li
430.11 163.679 li
430.44 163.679 li
430.78 163.679 li
431.11 163.679 li
431.44 163.679 li
431.77 163.679 li
432.11 163.679 li
432.44 163.679 li
432.77 163.679 li
433.1 163.679 li
433.44 163.679 li
433.77 163.679 li
434.1 163.679 li
434.43 163.679 li
434.77 163.679 li
435.1 163.679 li
435.43 163.679 li
435.76 163.679 li
436.1 163.679 li
436.43 163.679 li
436.76 163.679 li
437.09 163.679 li
437.43 163.679 li
437.76 163.679 li
438.09 163.679 li
438.42 163.679 li
438.76 163.679 li
@
2 lw
[0 6 ] 0 dsh
172.52 132.259 mo
449 132.259 li
@
grestore
gsave
172.52 243.569 mo
449 243.569 li
449 175.699 li
172.52 175.699 li
172.52 243.569 li
cp
clp
grestore
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Z <1C60D8A8C9B7D8BE437B2DC77047C9D07D83E35A9BA879688093FC56DA40389D94824B037D3FB415> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 90 /Z putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 34{/.notdef}rp /S 5{/.notdef}rp /Y /Z 29{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -12 -12 0 0 0 ]msf147.61 212.689 mo(Z)sh172.52 241.059 mo
172.52 178.209 li
@
172.52 241.059 mo
167.76 241.059 li
@
172.52 209.634 mo
167.76 209.634 li
@
172.52 178.209 mo
167.76 178.209 li
@
LSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 244.619 mo(0.0)[-5.56152 -2.77832 0 ]ysh172.52 175.699 mo
172.52 243.569 li
449 243.569 li
@
gsave
172.52 243.569 mo
449 243.569 li
449 175.699 li
172.52 175.699 li
172.52 243.569 li
cp
clp
1.5 lw
182.76 241.059 mo
183.09 241.059 li
183.42 241.059 li
183.75 241.059 li
184.09 241.059 li
184.42 241.059 li
184.75 241.059 li
185.08 241.059 li
185.42 241.059 li
185.75 241.059 li
186.08 241.059 li
186.41 241.059 li
186.75 241.059 li
187.08 241.059 li
187.41 241.059 li
187.74 241.059 li
188.08 241.059 li
188.41 241.059 li
188.74 241.059 li
189.07 241.059 li
189.41 241.059 li
189.74 241.059 li
190.07 241.059 li
190.4 241.059 li
190.74 241.059 li
191.07 241.059 li
191.4 241.059 li
191.73 241.059 li
192.07 241.059 li
192.4 241.059 li
192.73 241.059 li
193.06 241.059 li
193.39 241.059 li
193.73 241.059 li
194.06 241.059 li
194.39 241.059 li
194.72 241.059 li
195.06 241.059 li
195.39 241.059 li
195.72 241.059 li
196.05 241.059 li
196.39 241.059 li
196.72 241.059 li
197.05 241.059 li
197.38 241.059 li
197.72 241.059 li
198.05 241.059 li
198.38 241.059 li
198.71 241.059 li
199.05 241.059 li
199.38 241.059 li
199.71 241.059 li
200.04 241.059 li
200.38 241.059 li
200.71 241.059 li
201.04 241.059 li
201.37 241.059 li
201.71 241.059 li
202.04 241.059 li
202.37 241.059 li
202.7 241.059 li
203.04 241.059 li
203.37 241.059 li
203.7 241.059 li
204.03 241.059 li
204.37 241.059 li
204.7 241.059 li
205.03 241.059 li
205.36 241.059 li
205.7 241.059 li
206.03 241.059 li
206.36 241.059 li
206.69 241.059 li
207.03 241.059 li
207.36 241.059 li
207.69 241.059 li
208.02 241.059 li
208.36 241.059 li
208.69 241.059 li
209.02 241.059 li
209.35 241.059 li
209.69 241.059 li
210.02 241.059 li
210.35 241.059 li
210.68 241.059 li
211.02 241.059 li
211.35 241.059 li
211.68 241.059 li
212.01 241.059 li
212.35 241.059 li
212.68 241.059 li
213.01 241.059 li
213.34 241.059 li
213.68 241.059 li
214.01 241.059 li
214.34 241.059 li
214.67 241.059 li
215.01 241.059 li
215.34 241.059 li
215.67 241.059 li
216 241.059 li
216.34 241.059 li
216.67 241.059 li
217 241.059 li
217.33 241.059 li
217.67 241.059 li
218 241.059 li
218.33 241.059 li
218.66 241.059 li
218.99 241.059 li
219.33 241.059 li
219.66 241.059 li
219.99 241.059 li
220.32 241.059 li
220.66 241.059 li
220.99 241.059 li
221.32 241.059 li
221.65 241.059 li
221.99 241.059 li
222.32 241.059 li
222.65 241.059 li
222.98 241.059 li
223.32 241.059 li
223.65 241.059 li
223.98 241.059 li
224.31 241.059 li
224.65 241.059 li
224.98 241.059 li
225.31 241.059 li
225.64 241.059 li
225.98 241.059 li
226.31 241.059 li
226.64 241.059 li
226.97 241.059 li
227.31 241.059 li
227.64 241.059 li
227.97 241.059 li
228.3 241.059 li
228.64 241.059 li
228.97 241.059 li
229.3 241.059 li
229.63 241.059 li
229.97 241.059 li
230.3 241.059 li
230.63 241.059 li
230.96 241.059 li
231.3 241.059 li
231.63 241.059 li
231.96 241.059 li
232.29 241.059 li
232.63 241.059 li
232.96 241.059 li
233.29 241.059 li
233.62 241.059 li
233.96 241.059 li
234.29 241.059 li
234.62 241.059 li
234.95 241.059 li
235.29 241.059 li
235.62 241.059 li
235.95 241.059 li
236.28 241.059 li
236.62 241.059 li
236.95 241.059 li
237.28 241.059 li
237.61 241.059 li
237.95 241.059 li
238.28 241.059 li
238.61 241.059 li
238.94 241.059 li
239.28 241.059 li
239.61 241.059 li
239.94 241.059 li
240.27 241.059 li
240.61 241.059 li
240.94 241.059 li
241.27 241.059 li
241.6 241.059 li
241.94 241.059 li
242.27 241.059 li
242.6 241.059 li
242.93 241.059 li
243.27 241.059 li
243.6 241.059 li
243.93 241.059 li
244.26 241.059 li
244.59 241.059 li
244.93 241.059 li
245.26 241.059 li
245.59 241.059 li
245.92 241.059 li
246.26 241.059 li
246.59 241.059 li
246.92 241.059 li
247.25 241.059 li
247.59 241.059 li
247.92 241.059 li
248.25 241.059 li
248.58 241.059 li
248.92 241.059 li
249.25 241.059 li
249.58 241.059 li
249.91 241.059 li
250.25 241.059 li
250.58 241.059 li
250.91 241.059 li
251.24 241.059 li
251.58 241.059 li
251.91 241.059 li
252.24 241.059 li
252.57 241.059 li
252.91 241.059 li
253.24 241.059 li
253.57 241.059 li
253.9 241.059 li
254.24 241.059 li
254.57 241.059 li
254.9 241.059 li
255.23 241.059 li
255.57 241.059 li
255.9 241.059 li
256.23 241.059 li
256.56 241.059 li
256.9 241.059 li
257.23 241.059 li
257.56 241.059 li
257.89 241.059 li
258.23 241.059 li
258.56 241.059 li
258.89 241.059 li
259.22 241.059 li
259.56 241.059 li
259.89 241.059 li
260.22 241.059 li
260.55 241.059 li
260.89 241.059 li
261.22 241.059 li
261.55 241.059 li
261.88 241.059 li
262.22 241.059 li
262.55 241.059 li
262.88 241.059 li
263.21 241.059 li
263.55 241.059 li
263.88 241.059 li
264.21 241.059 li
264.54 241.059 li
264.88 241.059 li
265.21 241.059 li
265.54 241.059 li
265.87 241.059 li
266.21 241.059 li
266.54 241.059 li
266.87 241.059 li
267.2 241.059 li
267.54 241.059 li
267.87 241.059 li
268.2 241.059 li
268.53 241.059 li
268.87 241.059 li
269.2 241.059 li
269.53 241.059 li
269.86 241.059 li
270.19 241.059 li
270.53 241.059 li
270.86 241.059 li
271.19 241.059 li
271.52 241.059 li
271.86 241.059 li
272.19 241.059 li
272.52 241.059 li
272.85 241.059 li
273.19 241.059 li
273.52 241.059 li
273.85 241.059 li
274.18 241.059 li
274.52 241.059 li
274.85 241.059 li
275.18 241.059 li
275.51 241.059 li
275.85 241.059 li
276.18 241.059 li
276.51 241.059 li
276.84 241.059 li
277.18 241.059 li
277.51 241.059 li
277.84 241.059 li
278.17 241.059 li
278.51 238.589 li
278.84 236.219 li
279.17 233.949 li
279.5 231.759 li
279.84 229.659 li
280.17 227.649 li
280.5 225.709 li
280.83 223.849 li
281.17 222.059 li
281.5 220.339 li
281.83 218.689 li
282.16 217.099 li
282.5 215.569 li
282.83 214.109 li
283.16 212.699 li
283.49 211.349 li
283.83 210.049 li
284.16 208.799 li
284.49 207.599 li
284.82 206.449 li
285.16 205.339 li
285.49 204.279 li
285.82 203.259 li
286.15 202.279 li
286.49 201.329 li
286.82 200.429 li
287.15 199.549 li
287.48 198.719 li
287.82 197.909 li
288.15 197.139 li
288.48 196.399 li
288.81 195.689 li
289.15 194.999 li
289.48 194.339 li
289.81 193.709 li
290.14 193.099 li
290.48 192.519 li
290.81 191.959 li
291.14 191.419 li
291.47 190.899 li
291.81 190.399 li
292.141 189.929 li
292.471 189.469 li
292.8 189.029 li
293.141 188.599 li
293.471 188.189 li
293.8 187.799 li
294.13 187.429 li
294.471 187.069 li
294.8 186.719 li
295.13 186.389 li
295.46 186.059 li
295.79 185.759 li
296.13 185.459 li
296.46 185.179 li
296.79 184.899 li
297.12 184.639 li
297.46 184.389 li
297.79 184.149 li
298.12 183.909 li
298.45 183.689 li
298.79 183.479 li
299.12 183.269 li
299.45 183.069 li
299.78 182.879 li
300.12 182.699 li
300.45 182.519 li
300.78 182.349 li
301.11 182.189 li
301.45 182.039 li
301.78 181.889 li
302.11 181.739 li
302.44 181.599 li
302.78 181.469 li
303.11 181.339 li
303.44 181.219 li
303.77 181.099 li
304.11 180.989 li
304.44 180.879 li
304.77 180.779 li
305.1 180.679 li
305.44 180.579 li
305.77 182.949 li
306.1 185.229 li
306.43 187.419 li
306.77 189.519 li
307.1 191.539 li
307.43 193.479 li
307.76 195.349 li
308.1 197.139 li
308.43 198.859 li
308.76 200.519 li
309.09 202.109 li
309.43 203.629 li
309.76 205.099 li
310.09 206.509 li
310.42 207.869 li
310.76 209.169 li
311.09 210.419 li
311.42 211.619 li
311.75 212.769 li
312.09 213.879 li
312.42 214.949 li
312.75 215.969 li
313.08 216.949 li
313.42 217.899 li
313.75 218.809 li
314.08 219.679 li
314.41 220.519 li
314.75 221.319 li
315.08 222.099 li
315.41 222.839 li
315.74 223.549 li
316.08 224.239 li
316.41 224.899 li
316.74 225.529 li
317.07 226.139 li
317.41 226.729 li
317.74 227.289 li
318.07 227.829 li
318.4 228.349 li
318.74 228.849 li
319.07 229.319 li
319.4 229.779 li
319.73 230.229 li
320.07 230.649 li
320.4 231.059 li
320.73 231.449 li
321.06 231.829 li
321.39 232.189 li
321.73 232.539 li
322.06 232.869 li
322.39 233.189 li
322.72 233.499 li
323.06 233.799 li
323.39 234.079 li
323.72 234.349 li
324.05 234.619 li
324.39 234.869 li
324.72 235.109 li
325.05 235.349 li
325.38 235.569 li
325.72 235.779 li
326.05 235.989 li
326.38 236.189 li
326.71 236.379 li
327.05 236.559 li
327.38 236.739 li
327.71 236.909 li
328.04 237.069 li
328.38 237.229 li
328.71 237.379 li
329.04 237.519 li
329.37 237.659 li
329.71 237.789 li
330.04 237.919 li
330.37 238.039 li
330.7 238.159 li
331.04 238.279 li
331.37 238.389 li
331.7 238.489 li
332.03 238.589 li
332.37 238.689 li
332.7 238.779 li
333.03 238.869 li
333.36 238.959 li
333.7 239.039 li
334.03 239.119 li
334.36 239.189 li
334.69 239.269 li
335.03 239.339 li
335.36 239.399 li
335.69 239.469 li
336.02 239.529 li
336.36 239.589 li
336.69 239.649 li
337.02 239.699 li
337.35 239.759 li
337.69 239.809 li
338.02 239.859 li
338.35 239.899 li
338.68 239.949 li
339.02 239.989 li
339.35 240.029 li
339.68 240.069 li
340.01 240.109 li
340.35 240.149 li
340.68 240.179 li
341.01 240.219 li
341.34 240.249 li
341.68 240.279 li
342.01 240.309 li
342.34 240.339 li
342.67 240.369 li
343.01 240.399 li
343.34 240.419 li
343.67 240.449 li
344 240.469 li
344.34 240.489 li
344.67 240.519 li
345 240.539 li
345.33 240.559 li
345.67 240.579 li
346 240.599 li
346.33 240.609 li
346.66 240.629 li
346.99 240.649 li
347.33 240.659 li
347.66 240.679 li
347.99 240.689 li
348.32 240.709 li
348.66 240.719 li
348.99 240.739 li
349.32 240.749 li
349.65 240.759 li
349.99 240.769 li
350.32 240.779 li
350.65 240.789 li
350.98 240.799 li
351.32 240.809 li
351.65 240.819 li
351.98 240.829 li
352.31 240.839 li
352.65 240.849 li
352.98 240.859 li
353.31 240.869 li
353.64 240.869 li
353.98 240.879 li
354.31 240.889 li
354.64 240.889 li
354.97 240.899 li
355.31 240.909 li
355.64 240.909 li
355.64 241.059 li
355.97 241.059 li
356.3 241.059 li
356.64 241.059 li
356.97 241.059 li
357.3 241.059 li
357.63 241.059 li
357.97 241.059 li
358.3 241.059 li
358.63 241.059 li
358.96 241.059 li
359.3 241.059 li
359.63 241.059 li
359.96 241.059 li
360.29 241.059 li
360.63 241.059 li
360.96 241.059 li
361.29 241.059 li
361.62 241.059 li
361.96 241.059 li
362.29 241.059 li
362.62 241.059 li
362.95 241.059 li
363.29 241.059 li
363.62 241.059 li
363.95 241.059 li
364.28 241.059 li
364.62 241.059 li
364.95 241.059 li
365.28 241.059 li
365.61 241.059 li
365.95 241.059 li
366.28 241.059 li
366.61 241.059 li
366.94 241.059 li
367.28 241.059 li
367.61 241.059 li
367.94 241.059 li
368.27 241.059 li
368.61 241.059 li
368.94 241.059 li
369.27 241.059 li
369.6 241.059 li
369.94 241.059 li
370.27 241.059 li
370.6 241.059 li
370.93 241.059 li
371.27 241.059 li
371.6 241.059 li
371.93 241.059 li
372.26 241.059 li
372.59 241.059 li
372.93 241.059 li
373.26 241.059 li
373.59 241.059 li
373.92 241.059 li
374.26 241.059 li
374.59 241.059 li
374.92 241.059 li
375.25 241.059 li
375.59 241.059 li
375.92 241.059 li
376.25 241.059 li
376.58 241.059 li
376.92 241.059 li
377.25 241.059 li
377.58 241.059 li
377.91 241.059 li
378.25 241.059 li
378.58 241.059 li
378.91 241.059 li
379.24 241.059 li
379.58 241.059 li
379.91 241.059 li
380.24 241.059 li
380.57 241.059 li
380.91 241.059 li
381.24 241.059 li
381.57 241.059 li
381.9 241.059 li
382.24 241.059 li
382.57 241.059 li
382.9 241.059 li
383.23 241.059 li
383.57 241.059 li
383.9 241.059 li
384.23 241.059 li
384.56 241.059 li
384.9 241.059 li
385.23 241.059 li
385.56 241.059 li
385.89 241.059 li
386.23 241.059 li
386.56 241.059 li
386.89 241.059 li
387.22 241.059 li
387.56 241.059 li
387.89 241.059 li
388.22 241.059 li
388.55 241.059 li
388.89 241.059 li
389.22 241.059 li
389.55 241.059 li
389.88 241.059 li
390.22 241.059 li
390.55 241.059 li
390.88 241.059 li
391.21 241.059 li
391.55 241.059 li
391.88 241.059 li
392.21 241.059 li
392.54 241.059 li
392.88 241.059 li
393.21 241.059 li
393.54 241.059 li
393.87 241.059 li
394.21 241.059 li
394.54 241.059 li
394.87 241.059 li
395.2 241.059 li
395.54 241.059 li
395.87 241.059 li
396.2 241.059 li
396.53 241.059 li
396.87 241.059 li
397.2 241.059 li
397.53 241.059 li
397.86 241.059 li
398.19 241.059 li
398.53 241.059 li
398.86 241.059 li
399.19 241.059 li
399.52 241.059 li
399.86 241.059 li
400.19 241.059 li
400.52 241.059 li
400.85 241.059 li
401.19 241.059 li
401.52 241.059 li
401.85 241.059 li
402.18 241.059 li
402.52 241.059 li
402.85 241.059 li
403.18 241.059 li
403.51 241.059 li
403.85 241.059 li
404.18 241.059 li
404.51 241.059 li
404.84 241.059 li
405.18 241.059 li
405.51 241.059 li
405.84 241.059 li
406.17 241.059 li
406.51 241.059 li
406.84 241.059 li
407.17 241.059 li
407.5 241.059 li
407.84 241.059 li
408.17 241.059 li
408.5 241.059 li
408.83 241.059 li
409.17 241.059 li
409.5 241.059 li
409.83 241.059 li
410.16 241.059 li
410.5 241.059 li
410.83 241.059 li
411.16 241.059 li
411.49 241.059 li
411.83 241.059 li
412.16 241.059 li
412.49 241.059 li
412.82 241.059 li
413.16 241.059 li
413.49 241.059 li
413.82 241.059 li
414.15 241.059 li
414.49 241.059 li
414.82 241.059 li
415.15 241.059 li
415.48 241.059 li
415.82 241.059 li
416.15 241.059 li
416.48 241.059 li
416.81 241.059 li
417.15 241.059 li
417.48 241.059 li
417.81 241.059 li
418.14 241.059 li
418.48 241.059 li
418.81 241.059 li
419.14 241.059 li
419.47 241.059 li
419.81 241.059 li
420.14 241.059 li
420.47 241.059 li
420.8 241.059 li
421.14 241.059 li
421.47 241.059 li
421.8 241.059 li
422.13 241.059 li
422.47 241.059 li
422.8 241.059 li
423.13 241.059 li
423.46 241.059 li
423.79 241.059 li
424.13 241.059 li
424.46 241.059 li
424.79 241.059 li
425.12 241.059 li
425.46 241.059 li
425.79 241.059 li
426.12 241.059 li
426.45 241.059 li
426.79 241.059 li
427.12 241.059 li
427.45 241.059 li
427.78 241.059 li
428.12 241.059 li
428.45 241.059 li
428.78 241.059 li
429.11 241.059 li
429.45 241.059 li
429.78 241.059 li
430.11 241.059 li
430.44 241.059 li
430.78 241.059 li
431.11 241.059 li
431.44 241.059 li
431.77 241.059 li
432.11 241.059 li
432.44 241.059 li
432.77 241.059 li
433.1 241.059 li
433.44 241.059 li
433.77 241.059 li
434.1 241.059 li
434.43 241.059 li
434.77 241.059 li
435.1 241.059 li
435.43 241.059 li
435.76 241.059 li
436.1 241.059 li
436.43 241.059 li
436.76 241.059 li
437.09 241.059 li
437.43 241.059 li
437.76 241.059 li
438.09 241.059 li
438.42 241.059 li
438.76 241.059 li
@
grestore
gsave
172.52 320.939 mo
449 320.939 li
449 253.069 li
172.52 253.069 li
172.52 320.939 li
cp
clp
grestore
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05FD148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D520CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2741F9BB15B> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 67 /C putdup 111 /o putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 18{/.notdef}rp /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 20{/.notdef}rp /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -12 -12 0 0 0 ]msf147.61 297.289 mo(Cost)[-8.66602 -6.67383 -6 0 ]ysh172.52 318.429 mo
172.52 255.589 li
@
172.52 318.429 mo
167.76 318.429 li
@
172.52 287.009 mo
167.76 287.009 li
@
172.52 255.589 mo
167.76 255.589 li
@
LSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 321.99 mo(0.0)[-5.56152 -2.77832 0 ]ysh172.52 253.069 mo
172.52 320.939 li
449 320.939 li
@
gsave
172.52 320.939 mo
449 320.939 li
449 253.069 li
172.52 253.069 li
172.52 320.939 li
cp
clp
1.5 lw
182.76 318.429 mo
183.09 318.429 li
183.42 318.429 li
183.75 318.429 li
184.09 318.429 li
184.42 318.429 li
184.75 318.429 li
185.08 318.429 li
185.42 318.429 li
185.75 318.429 li
186.08 318.429 li
186.41 318.429 li
186.75 318.429 li
187.08 318.429 li
187.41 318.429 li
187.74 318.429 li
188.08 318.429 li
188.41 318.429 li
188.74 318.429 li
189.07 318.429 li
189.41 318.429 li
189.74 317.939 li
190.07 317.459 li
190.4 317.009 li
190.74 316.569 li
191.07 316.149 li
191.4 315.75 li
191.73 315.359 li
192.07 314.989 li
192.4 314.629 li
192.73 314.779 li
193.06 314.919 li
193.39 315.059 li
193.73 315.189 li
194.06 315.319 li
194.39 315.439 li
194.72 315.559 li
195.06 315.669 li
195.39 315.779 li
195.72 315.879 li
196.05 315.979 li
196.39 316.08 li
196.72 316.169 li
197.05 316.259 li
197.38 316.339 li
197.72 316.429 li
198.05 316.5 li
198.38 316.58 li
198.71 316.649 li
199.05 316.719 li
199.38 316.79 li
199.71 316.849 li
200.04 316.909 li
200.38 316.969 li
200.71 317.029 li
201.04 317.089 li
201.37 317.139 li
201.71 317.189 li
202.04 317.239 li
202.37 317.279 li
202.7 317.33 li
203.04 317.369 li
203.37 317.409 li
203.7 317.449 li
204.03 317.489 li
204.37 317.529 li
204.7 317.559 li
205.03 317.599 li
205.36 317.629 li
205.7 317.659 li
206.03 317.689 li
206.36 317.719 li
206.69 317.75 li
207.03 317.779 li
207.36 317.799 li
207.69 317.83 li
208.02 317.849 li
208.36 317.869 li
208.69 317.889 li
209.02 317.909 li
209.35 317.929 li
209.69 317.949 li
210.02 317.969 li
210.35 317.989 li
210.68 318.009 li
211.02 318.019 li
211.35 318.04 li
211.68 318.059 li
212.01 318.069 li
212.35 318.08 li
212.68 318.099 li
213.01 318.109 li
213.34 318.119 li
213.68 318.139 li
214.01 318.149 li
214.34 318.159 li
214.67 318.169 li
215.01 318.179 li
215.34 318.189 li
215.67 318.199 li
216 318.209 li
216.34 318.219 li
216.67 318.219 li
217 318.229 li
217.33 318.239 li
217.67 318.25 li
218 318.25 li
218.33 318.259 li
218.66 318.269 li
218.99 318.269 li
219.33 318.279 li
219.66 318.29 li
219.99 318.29 li
220.32 318.299 li
220.66 318.299 li
220.99 318.309 li
221.32 318.309 li
221.65 318.319 li
221.99 318.319 li
222.32 318.33 li
222.65 318.33 li
222.98 318.33 li
223.32 318.339 li
223.65 318.339 li
223.98 318.339 li
224.31 318.349 li
224.65 318.349 li
224.98 318.349 li
225.31 318.359 li
225.64 318.359 li
225.98 318.359 li
226.31 318.359 li
226.64 318.369 li
226.97 318.369 li
227.31 318.369 li
227.64 318.369 li
227.97 318.379 li
228.3 318.379 li
228.64 318.379 li
228.97 318.379 li
229.3 318.379 li
229.63 318.389 li
229.97 318.389 li
230.3 318.389 li
230.63 318.389 li
230.96 318.389 li
231.3 318.389 li
231.63 318.389 li
231.96 318.399 li
232.29 318.399 li
232.63 318.399 li
232.96 318.399 li
233.29 318.399 li
233.62 318.399 li
233.96 318.399 li
234.29 318.399 li
234.62 318.409 li
234.95 318.409 li
235.29 318.409 li
235.62 318.409 li
235.95 318.409 li
236.28 318.409 li
236.62 318.409 li
236.95 318.409 li
237.28 318.409 li
237.61 318.409 li
237.95 318.409 li
238.28 318.409 li
238.61 318.409 li
238.94 318.409 li
239.28 318.419 li
239.61 318.419 li
239.94 318.419 li
240.27 318.419 li
240.61 318.419 li
240.94 318.419 li
241.27 318.419 li
241.6 318.419 li
241.94 318.419 li
242.27 318.419 li
242.6 318.419 li
242.93 318.419 li
243.27 318.419 li
243.6 318.419 li
243.93 318.419 li
244.26 318.419 li
244.59 318.419 li
244.93 318.419 li
245.26 318.419 li
245.59 318.419 li
245.92 318.419 li
246.26 318.419 li
246.59 318.419 li
246.92 318.419 li
247.25 318.419 li
247.59 318.419 li
247.92 318.419 li
248.25 318.419 li
248.58 318.419 li
248.92 318.419 li
249.25 318.419 li
249.58 318.419 li
249.91 318.429 li
250.25 318.429 li
250.58 318.429 li
250.91 318.429 li
251.24 318.429 li
251.58 318.429 li
251.91 318.429 li
252.24 318.429 li
252.57 318.429 li
252.91 318.429 li
253.24 318.429 li
253.57 318.429 li
253.9 318.429 li
254.24 318.429 li
254.57 318.429 li
254.9 318.429 li
255.23 318.429 li
255.57 318.429 li
255.9 318.429 li
256.23 318.429 li
256.56 318.429 li
256.9 318.429 li
257.23 318.429 li
257.56 318.429 li
257.89 318.429 li
258.23 318.429 li
258.56 318.429 li
258.89 318.429 li
259.22 318.429 li
259.56 318.429 li
259.89 318.429 li
260.22 318.429 li
260.55 318.429 li
260.89 318.429 li
261.22 318.429 li
261.55 318.429 li
261.88 318.429 li
262.22 318.429 li
262.55 318.429 li
262.88 318.429 li
263.21 318.429 li
263.55 318.429 li
263.88 318.429 li
264.21 318.429 li
264.54 318.429 li
264.88 318.429 li
265.21 318.429 li
265.54 318.429 li
265.87 318.429 li
266.21 318.429 li
266.54 318.429 li
266.87 318.429 li
267.2 318.429 li
267.54 318.429 li
267.87 318.429 li
268.2 318.429 li
268.53 318.429 li
268.87 318.429 li
269.2 318.429 li
269.53 318.429 li
269.86 318.429 li
270.19 318.429 li
270.53 318.429 li
270.86 318.429 li
271.19 318.429 li
271.52 318.429 li
271.86 318.429 li
272.19 318.429 li
272.52 318.429 li
272.85 317.939 li
273.19 317.459 li
273.52 317.009 li
273.85 316.569 li
274.18 316.149 li
274.52 315.75 li
274.85 315.359 li
275.18 314.989 li
275.51 314.629 li
275.85 314.29 li
276.18 313.949 li
276.51 313.639 li
276.84 313.33 li
277.18 313.04 li
277.51 312.759 li
277.84 312.489 li
278.17 312.229 li
278.51 310.009 li
278.84 307.869 li
279.17 305.819 li
279.5 303.849 li
279.84 301.959 li
280.17 300.139 li
280.5 298.399 li
280.83 296.719 li
281.17 295.099 li
281.5 293.549 li
281.83 292.069 li
282.16 290.639 li
282.5 289.259 li
282.83 287.939 li
283.16 286.669 li
283.49 285.449 li
283.83 284.279 li
284.16 283.159 li
284.49 282.08 li
284.82 281.04 li
285.16 280.04 li
285.49 279.08 li
285.82 278.159 li
286.15 277.269 li
286.49 276.419 li
286.82 275.609 li
287.15 274.819 li
287.48 274.069 li
287.82 273.339 li
288.15 272.649 li
288.48 271.979 li
288.81 271.339 li
289.15 270.719 li
289.48 270.119 li
289.81 269.549 li
290.14 269.009 li
290.48 268.479 li
290.81 267.979 li
291.14 267.489 li
291.47 267.019 li
291.81 266.569 li
292.141 266.139 li
292.471 265.729 li
292.8 265.329 li
293.141 264.949 li
293.471 264.579 li
293.8 264.229 li
294.13 263.889 li
294.471 263.569 li
294.8 263.249 li
295.13 262.949 li
295.46 262.659 li
295.79 262.389 li
296.13 262.119 li
296.46 261.859 li
296.79 261.619 li
297.12 261.379 li
297.46 261.149 li
297.79 260.939 li
298.12 260.729 li
298.45 260.519 li
298.79 260.329 li
299.12 260.139 li
299.45 259.969 li
299.78 259.789 li
300.12 259.629 li
300.45 259.469 li
300.78 259.319 li
301.11 259.169 li
301.45 259.029 li
301.78 258.899 li
302.11 258.769 li
302.44 258.639 li
302.78 258.519 li
303.11 258.409 li
303.44 258.299 li
303.77 258.189 li
304.11 258.089 li
304.44 257.989 li
304.77 257.899 li
305.1 257.809 li
305.44 257.719 li
305.77 260.099 li
306.1 262.389 li
306.43 264.579 li
306.77 266.689 li
307.1 268.719 li
307.43 270.669 li
307.76 272.54 li
308.1 274.339 li
308.43 276.069 li
308.76 277.729 li
309.09 279.33 li
309.43 280.859 li
309.76 282.339 li
310.09 283.75 li
310.42 285.109 li
310.76 286.419 li
311.09 287.669 li
311.42 288.879 li
311.75 290.04 li
312.09 291.149 li
312.42 292.219 li
312.75 293.25 li
313.08 294.229 li
313.42 295.179 li
313.75 296.089 li
314.08 296.969 li
314.41 297.809 li
314.75 298.619 li
315.08 299.399 li
315.41 300.139 li
315.74 300.859 li
316.08 301.549 li
316.41 302.209 li
316.74 302.849 li
317.07 303.459 li
317.41 304.04 li
317.74 304.609 li
318.07 305.149 li
318.4 305.669 li
318.74 306.169 li
319.07 306.649 li
319.4 307.109 li
319.73 307.559 li
320.07 307.979 li
320.4 308.389 li
320.73 308.79 li
321.06 309.169 li
321.39 309.529 li
321.73 309.879 li
322.06 310.209 li
322.39 310.529 li
322.72 310.839 li
323.06 311.139 li
323.39 311.429 li
323.72 311.699 li
324.05 311.969 li
324.39 312.219 li
324.72 312.459 li
325.05 312.699 li
325.38 312.919 li
325.72 313.139 li
326.05 313.339 li
326.38 313.54 li
326.71 313.739 li
327.05 313.919 li
327.38 314.099 li
327.71 314.269 li
328.04 314.429 li
328.38 314.589 li
328.71 314.739 li
329.04 314.879 li
329.37 315.019 li
329.71 315.149 li
330.04 315.279 li
330.37 315.409 li
330.7 315.519 li
331.04 315.639 li
331.37 315.75 li
331.7 315.849 li
332.03 315.949 li
332.37 316.049 li
332.7 316.139 li
333.03 316.229 li
333.36 316.319 li
333.7 316.399 li
334.03 316.479 li
334.36 316.559 li
334.69 316.629 li
335.03 316.699 li
335.36 316.769 li
335.69 316.839 li
336.02 316.899 li
336.36 316.959 li
336.69 317.019 li
337.02 317.069 li
337.35 317.119 li
337.69 317.179 li
338.02 317.219 li
338.35 317.269 li
338.68 317.319 li
339.02 317.359 li
339.35 317.399 li
339.68 317.439 li
340.01 317.479 li
340.35 317.519 li
340.68 317.549 li
341.01 317.589 li
341.34 317.619 li
341.68 317.649 li
342.01 317.679 li
342.34 317.709 li
342.67 317.739 li
343.01 317.769 li
343.34 317.79 li
343.67 317.819 li
344 317.839 li
344.34 317.869 li
344.67 317.889 li
345 317.909 li
345.33 317.929 li
345.67 317.949 li
346 317.969 li
346.33 317.989 li
346.66 318 li
346.99 318.019 li
347.33 318.04 li
347.66 318.049 li
347.99 318.069 li
348.32 318.08 li
348.66 318.089 li
348.99 318.109 li
349.32 318.119 li
349.65 318.129 li
349.99 318.139 li
350.32 318.149 li
350.65 318.169 li
350.98 318.179 li
351.32 318.189 li
351.65 318.199 li
351.98 318.199 li
352.31 318.209 li
352.65 318.219 li
352.98 318.229 li
353.31 318.239 li
353.64 318.25 li
353.98 318.25 li
354.31 318.259 li
354.64 318.269 li
354.97 318.269 li
355.31 318.279 li
355.64 318.279 li
355.64 318.429 li
355.97 317.939 li
356.3 317.459 li
356.64 317.009 li
356.97 316.569 li
357.3 316.149 li
357.63 315.75 li
357.97 315.359 li
358.3 314.989 li
358.63 314.629 li
358.96 314.779 li
359.3 314.919 li
359.63 315.059 li
359.96 315.189 li
360.29 315.319 li
360.63 315.439 li
360.96 315.559 li
361.29 315.669 li
361.62 315.779 li
361.96 315.879 li
362.29 315.979 li
362.62 316.08 li
362.95 316.169 li
363.29 316.259 li
363.62 316.339 li
363.95 316.429 li
364.28 316.5 li
364.62 316.58 li
364.95 316.649 li
365.28 316.719 li
365.61 316.79 li
365.95 316.849 li
366.28 316.909 li
366.61 316.969 li
366.94 317.029 li
367.28 317.089 li
367.61 317.139 li
367.94 317.189 li
368.27 317.239 li
368.61 317.279 li
368.94 317.33 li
369.27 317.369 li
369.6 317.409 li
369.94 317.449 li
370.27 317.489 li
370.6 317.529 li
370.93 317.559 li
371.27 317.599 li
371.6 317.629 li
371.93 317.659 li
372.26 317.689 li
372.59 317.719 li
372.93 317.75 li
373.26 317.779 li
373.59 317.799 li
373.92 317.83 li
374.26 317.849 li
374.59 317.869 li
374.92 317.889 li
375.25 317.909 li
375.59 317.929 li
375.92 317.949 li
376.25 317.969 li
376.58 317.989 li
376.92 318.009 li
377.25 318.019 li
377.58 318.04 li
377.91 318.059 li
378.25 318.069 li
378.58 318.08 li
378.91 318.099 li
379.24 318.109 li
379.58 318.119 li
379.91 318.139 li
380.24 318.149 li
380.57 318.159 li
380.91 318.169 li
381.24 318.179 li
381.57 318.189 li
381.9 318.199 li
382.24 318.209 li
382.57 318.219 li
382.9 318.219 li
383.23 318.229 li
383.57 318.239 li
383.9 318.25 li
384.23 318.25 li
384.56 318.259 li
384.9 318.269 li
385.23 318.269 li
385.56 318.279 li
385.89 318.29 li
386.23 318.29 li
386.56 318.299 li
386.89 318.299 li
387.22 318.309 li
387.56 318.309 li
387.89 318.319 li
388.22 318.319 li
388.55 318.33 li
388.89 318.33 li
389.22 318.33 li
389.55 318.339 li
389.88 318.339 li
390.22 318.339 li
390.55 318.349 li
390.88 318.349 li
391.21 318.349 li
391.55 318.359 li
391.88 318.359 li
392.21 318.359 li
392.54 318.359 li
392.88 318.369 li
393.21 318.369 li
393.54 318.369 li
393.87 318.369 li
394.21 318.379 li
394.54 318.379 li
394.87 318.379 li
395.2 318.379 li
395.54 318.379 li
395.87 318.389 li
396.2 318.389 li
396.53 318.389 li
396.87 318.389 li
397.2 318.389 li
397.53 318.389 li
397.86 318.389 li
398.19 318.399 li
398.53 318.399 li
398.86 318.399 li
399.19 318.399 li
399.52 318.399 li
399.86 318.399 li
400.19 318.399 li
400.52 318.399 li
400.85 318.409 li
401.19 318.409 li
401.52 318.409 li
401.85 318.409 li
402.18 318.409 li
402.52 318.409 li
402.85 318.409 li
403.18 318.409 li
403.51 318.409 li
403.85 318.409 li
404.18 318.409 li
404.51 318.409 li
404.84 318.409 li
405.18 318.409 li
405.51 318.419 li
405.84 318.419 li
406.17 318.419 li
406.51 318.419 li
406.84 318.419 li
407.17 318.419 li
407.5 318.419 li
407.84 318.419 li
408.17 318.419 li
408.5 318.419 li
408.83 318.419 li
409.17 318.419 li
409.5 318.419 li
409.83 318.419 li
410.16 318.419 li
410.5 318.419 li
410.83 318.419 li
411.16 318.419 li
411.49 318.419 li
411.83 318.419 li
412.16 318.419 li
412.49 318.419 li
412.82 318.419 li
413.16 318.419 li
413.49 318.419 li
413.82 318.419 li
414.15 318.419 li
414.49 318.419 li
414.82 318.419 li
415.15 318.419 li
415.48 318.419 li
415.82 318.419 li
416.15 318.429 li
416.48 318.429 li
416.81 318.429 li
417.15 318.429 li
417.48 318.429 li
417.81 318.429 li
418.14 318.429 li
418.48 318.429 li
418.81 318.429 li
419.14 318.429 li
419.47 318.429 li
419.81 318.429 li
420.14 318.429 li
420.47 318.429 li
420.8 318.429 li
421.14 318.429 li
421.47 318.429 li
421.8 318.429 li
422.13 318.429 li
422.47 318.429 li
422.8 318.429 li
423.13 318.429 li
423.46 318.429 li
423.79 318.429 li
424.13 318.429 li
424.46 318.429 li
424.79 318.429 li
425.12 318.429 li
425.46 318.429 li
425.79 318.429 li
426.12 318.429 li
426.45 318.429 li
426.79 318.429 li
427.12 318.429 li
427.45 318.429 li
427.78 318.429 li
428.12 318.429 li
428.45 318.429 li
428.78 318.429 li
429.11 318.429 li
429.45 318.429 li
429.78 318.429 li
430.11 318.429 li
430.44 318.429 li
430.78 318.429 li
431.11 318.429 li
431.44 318.429 li
431.77 318.429 li
432.11 318.429 li
432.44 318.429 li
432.77 318.429 li
433.1 318.429 li
433.44 318.429 li
433.77 318.429 li
434.1 318.429 li
434.43 318.429 li
434.77 318.429 li
435.1 318.429 li
435.43 318.429 li
435.76 318.429 li
436.1 318.429 li
436.43 318.429 li
436.76 318.429 li
437.09 318.429 li
437.43 318.429 li
437.76 318.429 li
438.09 318.429 li
438.42 318.429 li
438.76 318.429 li
@
grestore
gsave
172.52 398.319 mo
449 398.319 li
449 330.449 li
172.52 330.449 li
172.52 398.319 li
cp
clp
grestore
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B64EDFF4E8F029E491459914546F05F980240E216037EFFB56810F73C7B1AD75758AC950CDF0AE7CA5E10B4B98E91DD14CBA33340505432C4EBD036ED5D8912D20451B0A88BD5908DF5F74741DA09743ACC2D69ECC46C5DD005482FE9F42B63F3612F31E021BB829EB7CDDF491856FAD0A1D6B2854CE32CAE2827DAD35AA4DEB8EA2DDAB1E824241122D8E6929DF014B94E2393EF8A13B> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/f <1C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58ED82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 66 /B putdup 101 /e putdup 102 /f putdup 105 /i putdup 110 /n putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 17{/.notdef}rp /B /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -12 -12 0 0 0 ]msf147.609 379.949 mo(Benefit)[-8.00391 -6.67383 -6.67383 -6.67383 -3.33398 -2.66602 0 ]ysh172.52 395.799 mo
172.52 332.959 li
@
172.52 395.799 mo
167.76 395.799 li
@
172.52 364.379 mo
167.76 364.379 li
@
172.52 332.959 mo
167.76 332.959 li
@
LSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 399.359 mo(0.0)[-5.56152 -2.77832 0 ]ysh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one 16{/.notdef}rp /B /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 369.939 mo(1.0)[-5.56152 -2.77832 0 ]ysh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two 15{/.notdef}rp /B /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 340.52 mo(2.0)[-5.56152 -2.77832 0 ]ysh172.52 330.449 mo
172.52 398.319 li
449 398.319 li
@
gsave
172.52 398.319 mo
449 398.319 li
449 330.449 li
172.52 330.449 li
172.52 398.319 li
cp
clp
1.5 lw
182.76 395.799 mo
183.09 395.799 li
183.42 395.799 li
183.75 395.799 li
184.09 395.799 li
184.42 395.799 li
184.75 395.799 li
185.08 395.799 li
185.42 395.799 li
185.75 395.799 li
186.08 395.799 li
186.41 395.799 li
186.75 395.799 li
187.08 395.799 li
187.41 395.799 li
187.74 395.799 li
188.08 395.799 li
188.41 395.799 li
188.74 395.799 li
189.07 395.799 li
189.41 395.799 li
189.74 395.799 li
190.07 395.799 li
190.4 395.799 li
190.74 395.799 li
191.07 395.799 li
191.4 395.799 li
191.73 395.799 li
192.07 395.799 li
192.4 395.799 li
192.73 395.799 li
193.06 395.799 li
193.39 395.799 li
193.73 395.799 li
194.06 395.799 li
194.39 395.799 li
194.72 395.799 li
195.06 395.799 li
195.39 395.799 li
195.72 395.799 li
196.05 395.799 li
196.39 395.799 li
196.72 395.799 li
197.05 395.799 li
197.38 395.799 li
197.72 395.799 li
198.05 395.799 li
198.38 395.799 li
198.71 395.799 li
199.05 395.799 li
199.38 395.799 li
199.71 395.799 li
200.04 395.799 li
200.38 395.799 li
200.71 395.799 li
201.04 395.799 li
201.37 395.799 li
201.71 395.799 li
202.04 395.799 li
202.37 395.799 li
202.7 395.799 li
203.04 395.799 li
203.37 395.799 li
203.7 395.799 li
204.03 395.799 li
204.37 395.799 li
204.7 395.799 li
205.03 395.799 li
205.36 395.799 li
205.7 395.799 li
206.03 395.799 li
206.36 395.799 li
206.69 395.799 li
207.03 395.799 li
207.36 395.799 li
207.69 395.799 li
208.02 395.799 li
208.36 395.799 li
208.69 395.799 li
209.02 395.799 li
209.35 395.799 li
209.69 395.799 li
210.02 395.799 li
210.35 395.799 li
210.68 395.799 li
211.02 395.799 li
211.35 395.799 li
211.68 395.799 li
212.01 395.799 li
212.35 395.799 li
212.68 395.799 li
213.01 395.799 li
213.34 395.799 li
213.68 395.799 li
214.01 395.799 li
214.34 395.799 li
214.67 395.799 li
215.01 395.799 li
215.34 395.799 li
215.67 395.799 li
216 395.799 li
216.34 395.799 li
216.67 395.799 li
217 395.799 li
217.33 395.799 li
217.67 395.799 li
218 395.799 li
218.33 395.799 li
218.66 395.799 li
218.99 395.799 li
219.33 395.799 li
219.66 395.799 li
219.99 395.799 li
220.32 395.799 li
220.66 395.799 li
220.99 395.799 li
221.32 395.799 li
221.65 395.799 li
221.99 395.799 li
222.32 395.799 li
222.65 395.799 li
222.98 395.799 li
223.32 395.799 li
223.65 395.799 li
223.98 395.799 li
224.31 395.799 li
224.65 395.799 li
224.98 395.799 li
225.31 395.799 li
225.64 395.799 li
225.98 395.799 li
226.31 395.799 li
226.64 395.799 li
226.97 395.799 li
227.31 395.799 li
227.64 395.799 li
227.97 395.799 li
228.3 395.799 li
228.64 395.799 li
228.97 395.799 li
229.3 395.799 li
229.63 395.799 li
229.97 395.799 li
230.3 395.799 li
230.63 395.799 li
230.96 395.799 li
231.3 395.799 li
231.63 395.799 li
231.96 395.799 li
232.29 395.799 li
232.63 395.799 li
232.96 395.799 li
233.29 395.799 li
233.62 395.799 li
233.96 395.799 li
234.29 395.799 li
234.62 395.799 li
234.95 395.799 li
235.29 395.799 li
235.62 395.799 li
235.95 395.799 li
236.28 395.799 li
236.62 395.799 li
236.95 395.799 li
237.28 395.799 li
237.61 395.799 li
237.95 395.799 li
238.28 395.799 li
238.61 395.799 li
238.94 395.799 li
239.28 395.799 li
239.61 395.799 li
239.94 395.799 li
240.27 395.799 li
240.61 395.799 li
240.94 395.799 li
241.27 395.799 li
241.6 395.799 li
241.94 395.799 li
242.27 395.799 li
242.6 395.799 li
242.93 395.799 li
243.27 395.799 li
243.6 395.799 li
243.93 395.799 li
244.26 395.799 li
244.59 395.799 li
244.93 395.799 li
245.26 395.799 li
245.59 395.799 li
245.92 395.799 li
246.26 395.799 li
246.59 395.799 li
246.92 395.799 li
247.25 395.799 li
247.59 395.799 li
247.92 395.799 li
248.25 395.799 li
248.58 395.799 li
248.92 395.799 li
249.25 395.799 li
249.58 395.799 li
249.91 395.799 li
250.25 395.799 li
250.58 395.799 li
250.91 395.799 li
251.24 395.799 li
251.58 395.799 li
251.91 395.799 li
252.24 395.799 li
252.57 395.799 li
252.91 395.799 li
253.24 395.799 li
253.57 395.799 li
253.9 395.799 li
254.24 395.799 li
254.57 395.799 li
254.9 395.799 li
255.23 395.799 li
255.57 395.799 li
255.9 395.799 li
256.23 395.799 li
256.56 395.799 li
256.9 395.799 li
257.23 395.799 li
257.56 395.799 li
257.89 395.799 li
258.23 395.799 li
258.56 395.799 li
258.89 395.799 li
259.22 395.799 li
259.56 395.799 li
259.89 395.799 li
260.22 395.799 li
260.55 395.799 li
260.89 395.799 li
261.22 395.799 li
261.55 395.799 li
261.88 395.799 li
262.22 395.799 li
262.55 395.799 li
262.88 395.799 li
263.21 395.799 li
263.55 395.799 li
263.88 395.799 li
264.21 395.799 li
264.54 395.799 li
264.88 395.799 li
265.21 395.799 li
265.54 395.799 li
265.87 395.799 li
266.21 395.799 li
266.54 395.799 li
266.87 395.799 li
267.2 395.799 li
267.54 395.799 li
267.87 395.799 li
268.2 395.799 li
268.53 395.799 li
268.87 395.799 li
269.2 395.799 li
269.53 395.799 li
269.86 395.799 li
270.19 395.799 li
270.53 395.799 li
270.86 395.799 li
271.19 395.799 li
271.52 395.799 li
271.86 395.799 li
272.19 395.799 li
272.52 395.799 li
272.85 395.799 li
273.19 395.799 li
273.52 395.799 li
273.85 395.799 li
274.18 395.799 li
274.52 395.799 li
274.85 395.799 li
275.18 395.799 li
275.51 395.799 li
275.85 395.799 li
276.18 395.799 li
276.51 395.799 li
276.84 395.799 li
277.18 395.799 li
277.51 395.799 li
277.84 395.799 li
278.17 395.799 li
278.51 393.339 li
278.84 390.969 li
279.17 388.699 li
279.5 386.509 li
279.84 384.409 li
280.17 382.389 li
280.5 380.459 li
280.83 378.589 li
281.17 376.799 li
281.5 375.08 li
281.83 373.429 li
282.16 371.849 li
282.5 370.319 li
282.83 368.859 li
283.16 367.449 li
283.49 366.099 li
283.83 364.799 li
284.16 363.549 li
284.49 362.349 li
284.82 361.199 li
285.16 360.089 li
285.49 359.029 li
285.82 358 li
286.15 357.019 li
286.49 356.08 li
286.82 355.169 li
287.15 354.299 li
287.48 353.459 li
287.82 352.659 li
288.15 351.889 li
288.48 351.149 li
288.81 350.429 li
289.15 349.75 li
289.48 349.089 li
289.81 348.459 li
290.14 347.849 li
290.48 347.269 li
290.81 346.699 li
291.14 346.169 li
291.47 345.649 li
291.81 345.149 li
292.141 344.669 li
292.471 344.209 li
292.8 343.769 li
293.141 343.349 li
293.471 342.939 li
293.8 342.549 li
294.13 342.169 li
294.471 341.809 li
294.8 341.459 li
295.13 341.129 li
295.46 340.809 li
295.79 340.5 li
296.13 340.209 li
296.46 339.919 li
296.79 339.649 li
297.12 339.389 li
297.46 339.139 li
297.79 338.889 li
298.12 338.659 li
298.45 338.439 li
298.79 338.219 li
299.12 338.019 li
299.45 337.819 li
299.78 337.629 li
300.12 337.439 li
300.45 337.269 li
300.78 337.099 li
301.11 336.939 li
301.45 336.779 li
301.78 336.629 li
302.11 336.489 li
302.44 336.349 li
302.78 336.219 li
303.11 336.089 li
303.44 335.969 li
303.77 335.849 li
304.11 335.739 li
304.44 335.629 li
304.77 335.519 li
305.1 335.419 li
305.44 335.319 li
305.77 395.799 li
306.1 395.799 li
306.43 395.799 li
306.77 395.799 li
307.1 395.799 li
307.43 395.799 li
307.76 395.799 li
308.1 395.799 li
308.43 395.799 li
308.76 395.799 li
309.09 395.799 li
309.43 395.799 li
309.76 395.799 li
310.09 395.799 li
310.42 395.799 li
310.76 395.799 li
311.09 395.799 li
311.42 395.799 li
311.75 395.799 li
312.09 395.799 li
312.42 395.799 li
312.75 395.799 li
313.08 395.799 li
313.42 395.799 li
313.75 395.799 li
314.08 395.799 li
314.41 395.799 li
314.75 395.799 li
315.08 395.799 li
315.41 395.799 li
315.74 395.799 li
316.08 395.799 li
316.41 395.799 li
316.74 395.799 li
317.07 395.799 li
317.41 395.799 li
317.74 395.799 li
318.07 395.799 li
318.4 395.799 li
318.74 395.799 li
319.07 395.799 li
319.4 395.799 li
319.73 395.799 li
320.07 395.799 li
320.4 395.799 li
320.73 395.799 li
321.06 395.799 li
321.39 395.799 li
321.73 395.799 li
322.06 395.799 li
322.39 395.799 li
322.72 395.799 li
323.06 395.799 li
323.39 395.799 li
323.72 395.799 li
324.05 395.799 li
324.39 395.799 li
324.72 395.799 li
325.05 395.799 li
325.38 395.799 li
325.72 395.799 li
326.05 395.799 li
326.38 395.799 li
326.71 395.799 li
327.05 395.799 li
327.38 395.799 li
327.71 395.799 li
328.04 395.799 li
328.38 395.799 li
328.71 395.799 li
329.04 395.799 li
329.37 395.799 li
329.71 395.799 li
330.04 395.799 li
330.37 395.799 li
330.7 395.799 li
331.04 395.799 li
331.37 395.799 li
331.7 395.799 li
332.03 395.799 li
332.37 395.799 li
332.7 395.799 li
333.03 395.799 li
333.36 395.799 li
333.7 395.799 li
334.03 395.799 li
334.36 395.799 li
334.69 395.799 li
335.03 395.799 li
335.36 395.799 li
335.69 395.799 li
336.02 395.799 li
336.36 395.799 li
336.69 395.799 li
337.02 395.799 li
337.35 395.799 li
337.69 395.799 li
338.02 395.799 li
338.35 395.799 li
338.68 395.799 li
339.02 395.799 li
339.35 395.799 li
339.68 395.799 li
340.01 395.799 li
340.35 395.799 li
340.68 395.799 li
341.01 395.799 li
341.34 395.799 li
341.68 395.799 li
342.01 395.799 li
342.34 395.799 li
342.67 395.799 li
343.01 395.799 li
343.34 395.799 li
343.67 395.799 li
344 395.799 li
344.34 395.799 li
344.67 395.799 li
345 395.799 li
345.33 395.799 li
345.67 395.799 li
346 395.799 li
346.33 395.799 li
346.66 395.799 li
346.99 395.799 li
347.33 395.799 li
347.66 395.799 li
347.99 395.799 li
348.32 395.799 li
348.66 395.799 li
348.99 395.799 li
349.32 395.799 li
349.65 395.799 li
349.99 395.799 li
350.32 395.799 li
350.65 395.799 li
350.98 395.799 li
351.32 395.799 li
351.65 395.799 li
351.98 395.799 li
352.31 395.799 li
352.65 395.799 li
352.98 395.799 li
353.31 395.799 li
353.64 395.799 li
353.98 395.799 li
354.31 395.799 li
354.64 395.799 li
354.97 395.799 li
355.31 395.799 li
355.64 395.799 li
355.97 395.799 li
356.3 395.799 li
356.64 395.799 li
356.97 395.799 li
357.3 395.799 li
357.63 395.799 li
357.97 395.799 li
358.3 395.799 li
358.63 395.799 li
358.96 395.799 li
359.3 395.799 li
359.63 395.799 li
359.96 395.799 li
360.29 395.799 li
360.63 395.799 li
360.96 395.799 li
361.29 395.799 li
361.62 395.799 li
361.96 395.799 li
362.29 395.799 li
362.62 395.799 li
362.95 395.799 li
363.29 395.799 li
363.62 395.799 li
363.95 395.799 li
364.28 395.799 li
364.62 395.799 li
364.95 395.799 li
365.28 395.799 li
365.61 395.799 li
365.95 395.799 li
366.28 395.799 li
366.61 395.799 li
366.94 395.799 li
367.28 395.799 li
367.61 395.799 li
367.94 395.799 li
368.27 395.799 li
368.61 395.799 li
368.94 395.799 li
369.27 395.799 li
369.6 395.799 li
369.94 395.799 li
370.27 395.799 li
370.6 395.799 li
370.93 395.799 li
371.27 395.799 li
371.6 395.799 li
371.93 395.799 li
372.26 395.799 li
372.59 395.799 li
372.93 395.799 li
373.26 395.799 li
373.59 395.799 li
373.92 395.799 li
374.26 395.799 li
374.59 395.799 li
374.92 395.799 li
375.25 395.799 li
375.59 395.799 li
375.92 395.799 li
376.25 395.799 li
376.58 395.799 li
376.92 395.799 li
377.25 395.799 li
377.58 395.799 li
377.91 395.799 li
378.25 395.799 li
378.58 395.799 li
378.91 395.799 li
379.24 395.799 li
379.58 395.799 li
379.91 395.799 li
380.24 395.799 li
380.57 395.799 li
380.91 395.799 li
381.24 395.799 li
381.57 395.799 li
381.9 395.799 li
382.24 395.799 li
382.57 395.799 li
382.9 395.799 li
383.23 395.799 li
383.57 395.799 li
383.9 395.799 li
384.23 395.799 li
384.56 395.799 li
384.9 395.799 li
385.23 395.799 li
385.56 395.799 li
385.89 395.799 li
386.23 395.799 li
386.56 395.799 li
386.89 395.799 li
387.22 395.799 li
387.56 395.799 li
387.89 395.799 li
388.22 395.799 li
388.55 395.799 li
388.89 395.799 li
389.22 395.799 li
389.55 395.799 li
389.88 395.799 li
390.22 395.799 li
390.55 395.799 li
390.88 395.799 li
391.21 395.799 li
391.55 395.799 li
391.88 395.799 li
392.21 395.799 li
392.54 395.799 li
392.88 395.799 li
393.21 395.799 li
393.54 395.799 li
393.87 395.799 li
394.21 395.799 li
394.54 395.799 li
394.87 395.799 li
395.2 395.799 li
395.54 395.799 li
395.87 395.799 li
396.2 395.799 li
396.53 395.799 li
396.87 395.799 li
397.2 395.799 li
397.53 395.799 li
397.86 395.799 li
398.19 395.799 li
398.53 395.799 li
398.86 395.799 li
399.19 395.799 li
399.52 395.799 li
399.86 395.799 li
400.19 395.799 li
400.52 395.799 li
400.85 395.799 li
401.19 395.799 li
401.52 395.799 li
401.85 395.799 li
402.18 395.799 li
402.52 395.799 li
402.85 395.799 li
403.18 395.799 li
403.51 395.799 li
403.85 395.799 li
404.18 395.799 li
404.51 395.799 li
404.84 395.799 li
405.18 395.799 li
405.51 395.799 li
405.84 395.799 li
406.17 395.799 li
406.51 395.799 li
406.84 395.799 li
407.17 395.799 li
407.5 395.799 li
407.84 395.799 li
408.17 395.799 li
408.5 395.799 li
408.83 395.799 li
409.17 395.799 li
409.5 395.799 li
409.83 395.799 li
410.16 395.799 li
410.5 395.799 li
410.83 395.799 li
411.16 395.799 li
411.49 395.799 li
411.83 395.799 li
412.16 395.799 li
412.49 395.799 li
412.82 395.799 li
413.16 395.799 li
413.49 395.799 li
413.82 395.799 li
414.15 395.799 li
414.49 395.799 li
414.82 395.799 li
415.15 395.799 li
415.48 395.799 li
415.82 395.799 li
416.15 395.799 li
416.48 395.799 li
416.81 395.799 li
417.15 395.799 li
417.48 395.799 li
417.81 395.799 li
418.14 395.799 li
418.48 395.799 li
418.81 395.799 li
419.14 395.799 li
419.47 395.799 li
419.81 395.799 li
420.14 395.799 li
420.47 395.799 li
420.8 395.799 li
421.14 395.799 li
421.47 395.799 li
421.8 395.799 li
422.13 395.799 li
422.47 395.799 li
422.8 395.799 li
423.13 395.799 li
423.46 395.799 li
423.79 395.799 li
424.13 395.799 li
424.46 395.799 li
424.79 395.799 li
425.12 395.799 li
425.46 395.799 li
425.79 395.799 li
426.12 395.799 li
426.45 395.799 li
426.79 395.799 li
427.12 395.799 li
427.45 395.799 li
427.78 395.799 li
428.12 395.799 li
428.45 395.799 li
428.78 395.799 li
429.11 395.799 li
429.45 395.799 li
429.78 395.799 li
430.11 395.799 li
430.44 395.799 li
430.78 395.799 li
431.11 395.799 li
431.44 395.799 li
431.77 395.799 li
432.11 395.799 li
432.44 395.799 li
432.77 395.799 li
433.1 395.799 li
433.44 395.799 li
433.77 395.799 li
434.1 395.799 li
434.43 395.799 li
434.77 395.799 li
435.1 395.799 li
435.43 395.799 li
435.76 395.799 li
436.1 395.799 li
436.43 395.799 li
436.76 395.799 li
437.09 395.799 li
437.43 395.799 li
437.76 395.799 li
438.09 395.799 li
438.42 395.799 li
438.76 395.799 li
@
grestore
gsave
172.52 491.83 mo
449 491.83 li
449 407.819 li
172.52 407.819 li
172.52 491.83 li
cp
clp
grestore
182.76 491.83 mo
448.73 491.83 li
@
182.76 491.83 mo
182.76 496.589 li
@
249.25 491.83 mo
249.25 496.589 li
@
315.74 491.83 mo
315.74 496.589 li
@
382.24 491.83 mo
382.24 496.589 li
@
448.73 491.83 mo
448.73 496.589 li
@
LSXWEK+Helvetica*1 [12 0 0 -12 0 0 ]msf179.53 508.04 mo(0)shLSXWEK+Helvetica*1 [12 0 0 -12 0 0 ]msf246.03 508.04 mo(2)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 13{/.notdef}rp /B /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [12 0 0 -12 0 0 ]msf312.52 508.04 mo(4)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six 11{/.notdef}rp /B /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [12 0 0 -12 0 0 ]msf379.01 508.04 mo(6)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 9{/.notdef}rp /B /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [12 0 0 -12 0 0 ]msf445.51 508.04 mo(8)sh172.52 488.719 mo
172.52 418 li
@
172.52 488.719 mo
167.76 488.719 li
@
172.52 453.359 mo
167.76 453.359 li
@
172.52 418 mo
167.76 418 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/minus <1C60D8A8C9B7F374C6243061E982D378A14DF0A305> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 32 /minus putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [32{/.notdef}rp /minus 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 9{/.notdef}rp /B /C 15{/.notdef}rp /S 5{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 495.619 mo( 1.0)[-5.83984 -5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.011 458.92 mo(0.0)[-5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 425.561 mo(1.0)[-5.56152 -2.77832 0 ]ysh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1F006> |-/m <1C60D8A8C9B6B41C87955CDC3639140F8FA33C70CE271539122DB89AC63FD596C1AE79761050C7D5317C1A1DE3923CB96B736E4977F68D67BD6922E1964FE05D51AB32C479ED8218C444609251096F1947B0C4960920FFF6AE70BA15738BF1106729A839E228137A715EA1C031F63BED533B4300B92AAA320484B5BAB342D2B48F6B68F518B0142254C333F20247ED0EA3DC72FEE0> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 84 /T putdup 109 /m putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [32{/.notdef}rp /minus 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 9{/.notdef}rp /B /C 15{/.notdef}rp /S /T 4{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [12 0 0 -12 0 0 ]msf299.65 519.449 mo(Time)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7D8BE0123FD0A136BA0F480FD4287FFCF97986718886432AF2C7EB6A3F35B> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 70 /F putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [32{/.notdef}rp /minus 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 9{/.notdef}rp /B /C 2{/.notdef}rp /F 12{/.notdef}rp /S /T 4{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -12 -12 0 0 0 ]msf147.609 465.939 mo(Fitness)[-7.33008 -2.66602 -3.33398 -6.67383 -6.67383 -6 0 ]ysh172.52 407.819 mo
172.52 491.83 li
449 491.83 li
@
gsave
172.52 491.83 mo
449 491.83 li
449 407.819 li
172.52 407.819 li
172.52 491.83 li
cp
clp
1.5 lw
182.76 453.359 mo
183.09 453.359 li
183.42 453.359 li
183.75 453.359 li
184.09 453.359 li
184.42 453.359 li
184.75 453.359 li
185.08 453.359 li
185.42 453.359 li
185.75 453.359 li
186.08 453.359 li
186.41 453.359 li
186.75 453.359 li
187.08 453.359 li
187.41 453.359 li
187.74 453.359 li
188.08 453.359 li
188.41 453.359 li
188.74 453.359 li
189.07 453.359 li
189.41 453.359 li
189.74 453.639 li
190.07 453.909 li
190.4 454.159 li
190.74 454.409 li
191.07 454.639 li
191.4 454.869 li
191.73 455.089 li
192.07 455.299 li
192.4 455.5 li
192.73 455.419 li
193.06 455.339 li
193.39 455.259 li
193.73 455.179 li
194.06 455.109 li
194.39 455.04 li
194.72 454.979 li
195.06 454.919 li
195.39 454.849 li
195.72 454.799 li
196.05 454.739 li
196.39 454.689 li
196.72 454.629 li
197.05 454.58 li
197.38 454.54 li
197.72 454.489 li
198.05 454.449 li
198.38 454.399 li
198.71 454.359 li
199.05 454.319 li
199.38 454.29 li
199.71 454.25 li
200.04 454.209 li
200.38 454.179 li
200.71 454.149 li
201.04 454.119 li
201.37 454.089 li
201.71 454.059 li
202.04 454.029 li
202.37 454.009 li
202.7 453.979 li
203.04 453.959 li
203.37 453.929 li
203.7 453.909 li
204.03 453.889 li
204.37 453.869 li
204.7 453.849 li
205.03 453.83 li
205.36 453.809 li
205.7 453.79 li
206.03 453.779 li
206.36 453.759 li
206.69 453.75 li
207.03 453.729 li
207.36 453.719 li
207.69 453.699 li
208.02 453.689 li
208.36 453.679 li
208.69 453.659 li
209.02 453.649 li
209.35 453.639 li
209.69 453.629 li
210.02 453.619 li
210.35 453.609 li
210.68 453.599 li
211.02 453.589 li
211.35 453.58 li
211.68 453.569 li
212.01 453.559 li
212.35 453.559 li
212.68 453.549 li
213.01 453.54 li
213.34 453.529 li
213.68 453.529 li
214.01 453.519 li
214.34 453.519 li
214.67 453.509 li
215.01 453.5 li
215.34 453.5 li
215.67 453.489 li
216 453.489 li
216.34 453.479 li
216.67 453.479 li
217 453.469 li
217.33 453.469 li
217.67 453.469 li
218 453.459 li
218.33 453.459 li
218.66 453.449 li
218.99 453.449 li
219.33 453.449 li
219.66 453.439 li
219.99 453.439 li
220.32 453.439 li
220.66 453.429 li
220.99 453.429 li
221.32 453.429 li
221.65 453.429 li
221.99 453.419 li
222.32 453.419 li
222.65 453.419 li
222.98 453.419 li
223.32 453.409 li
223.65 453.409 li
223.98 453.409 li
224.31 453.409 li
224.65 453.409 li
224.98 453.409 li
225.31 453.399 li
225.64 453.399 li
225.98 453.399 li
226.31 453.399 li
226.64 453.399 li
226.97 453.399 li
227.31 453.389 li
227.64 453.389 li
227.97 453.389 li
228.3 453.389 li
228.64 453.389 li
228.97 453.389 li
229.3 453.389 li
229.63 453.389 li
229.97 453.389 li
230.3 453.389 li
230.63 453.379 li
230.96 453.379 li
231.3 453.379 li
231.63 453.379 li
231.96 453.379 li
232.29 453.379 li
232.63 453.379 li
232.96 453.379 li
233.29 453.379 li
233.62 453.379 li
233.96 453.379 li
234.29 453.379 li
234.62 453.379 li
234.95 453.379 li
235.29 453.379 li
235.62 453.369 li
235.95 453.369 li
236.28 453.369 li
236.62 453.369 li
236.95 453.369 li
237.28 453.369 li
237.61 453.369 li
237.95 453.369 li
238.28 453.369 li
238.61 453.369 li
238.94 453.369 li
239.28 453.369 li
239.61 453.369 li
239.94 453.369 li
240.27 453.369 li
240.61 453.369 li
240.94 453.369 li
241.27 453.369 li
241.6 453.369 li
241.94 453.369 li
242.27 453.369 li
242.6 453.369 li
242.93 453.369 li
243.27 453.369 li
243.6 453.369 li
243.93 453.369 li
244.26 453.369 li
244.59 453.369 li
244.93 453.369 li
245.26 453.369 li
245.59 453.369 li
245.92 453.369 li
246.26 453.369 li
246.59 453.369 li
246.92 453.369 li
247.25 453.369 li
247.59 453.369 li
247.92 453.369 li
248.25 453.369 li
248.58 453.369 li
248.92 453.369 li
249.25 453.369 li
249.58 453.359 li
249.91 453.359 li
250.25 453.359 li
250.58 453.359 li
250.91 453.359 li
251.24 453.359 li
251.58 453.359 li
251.91 453.359 li
252.24 453.359 li
252.57 453.359 li
252.91 453.359 li
253.24 453.359 li
253.57 453.359 li
253.9 453.359 li
254.24 453.359 li
254.57 453.359 li
254.9 453.359 li
255.23 453.359 li
255.57 453.359 li
255.9 453.359 li
256.23 453.359 li
256.56 453.359 li
256.9 453.359 li
257.23 453.359 li
257.56 453.359 li
257.89 453.359 li
258.23 453.359 li
258.56 453.359 li
258.89 453.359 li
259.22 453.359 li
259.56 453.359 li
259.89 453.359 li
260.22 453.359 li
260.55 453.359 li
260.89 453.359 li
261.22 453.359 li
261.55 453.359 li
261.88 453.359 li
262.22 453.359 li
262.55 453.359 li
262.88 453.359 li
263.21 453.359 li
263.55 453.359 li
263.88 453.359 li
264.21 453.359 li
264.54 453.359 li
264.88 453.359 li
265.21 453.359 li
265.54 453.359 li
265.87 453.359 li
266.21 453.359 li
266.54 453.359 li
266.87 453.359 li
267.2 453.359 li
267.54 453.359 li
267.87 453.359 li
268.2 453.359 li
268.53 453.359 li
268.87 453.359 li
269.2 453.359 li
269.53 453.359 li
269.86 453.359 li
270.19 453.359 li
270.53 453.359 li
270.86 453.359 li
271.19 453.359 li
271.52 453.359 li
271.86 453.359 li
272.19 453.359 li
272.52 453.359 li
272.85 453.639 li
273.19 453.909 li
273.52 454.159 li
273.85 454.409 li
274.18 454.639 li
274.52 454.869 li
274.85 455.089 li
275.18 455.299 li
275.51 455.5 li
275.85 455.689 li
276.18 455.879 li
276.51 456.059 li
276.84 456.229 li
277.18 456.399 li
277.51 456.549 li
277.84 456.709 li
278.17 456.849 li
278.51 455.33 li
278.84 453.869 li
279.17 452.459 li
279.5 451.109 li
279.84 449.809 li
280.17 448.559 li
280.5 447.359 li
280.83 446.209 li
281.17 445.109 li
281.5 444.04 li
281.83 443.019 li
282.16 442.04 li
282.5 441.099 li
282.83 440.189 li
283.16 439.319 li
283.49 438.489 li
283.83 437.679 li
284.16 436.909 li
284.49 436.169 li
284.82 435.459 li
285.16 434.769 li
285.49 434.119 li
285.82 433.489 li
286.15 432.879 li
286.49 432.29 li
286.82 431.729 li
287.15 431.199 li
287.48 430.679 li
287.82 430.179 li
288.15 429.699 li
288.48 429.25 li
288.81 428.799 li
289.15 428.379 li
289.48 427.969 li
289.81 427.58 li
290.14 427.209 li
290.48 426.849 li
290.81 426.5 li
291.14 426.169 li
291.47 425.849 li
291.81 425.54 li
292.141 425.239 li
292.471 424.959 li
292.8 424.689 li
293.141 424.419 li
293.471 424.169 li
293.8 423.929 li
294.13 423.699 li
294.471 423.479 li
294.8 423.259 li
295.13 423.049 li
295.46 422.859 li
295.79 422.669 li
296.13 422.479 li
296.46 422.309 li
296.79 422.139 li
297.12 421.979 li
297.46 421.819 li
297.79 421.669 li
298.12 421.529 li
298.45 421.389 li
298.79 421.259 li
299.12 421.129 li
299.45 421.009 li
299.78 420.889 li
300.12 420.779 li
300.45 420.669 li
300.78 420.559 li
301.11 420.459 li
301.45 420.369 li
301.78 420.269 li
302.11 420.179 li
302.44 420.099 li
302.78 420.019 li
303.11 419.939 li
303.44 419.859 li
303.77 419.79 li
304.11 419.719 li
304.44 419.649 li
304.77 419.589 li
305.1 419.519 li
305.44 419.469 li
305.77 486.179 li
306.1 484.899 li
306.43 483.659 li
306.77 482.469 li
307.1 481.33 li
307.43 480.229 li
307.76 479.179 li
308.1 478.169 li
308.43 477.199 li
308.76 476.259 li
309.09 475.359 li
309.43 474.5 li
309.76 473.669 li
310.09 472.879 li
310.42 472.109 li
310.76 471.379 li
311.09 470.669 li
311.42 469.989 li
311.75 469.339 li
312.09 468.709 li
312.42 468.109 li
312.75 467.529 li
313.08 466.979 li
313.42 466.439 li
313.75 465.929 li
314.08 465.439 li
314.41 464.959 li
314.75 464.509 li
315.08 464.069 li
315.41 463.649 li
315.74 463.25 li
316.08 462.859 li
316.41 462.489 li
316.74 462.129 li
317.07 461.79 li
317.41 461.459 li
317.74 461.139 li
318.07 460.83 li
318.4 460.54 li
318.74 460.259 li
319.07 459.989 li
319.4 459.729 li
319.73 459.479 li
320.07 459.239 li
320.4 459.009 li
320.73 458.79 li
321.06 458.58 li
321.39 458.369 li
321.73 458.169 li
322.06 457.989 li
322.39 457.799 li
322.72 457.629 li
323.06 457.459 li
323.39 457.299 li
323.72 457.149 li
324.05 457 li
324.39 456.859 li
324.72 456.719 li
325.05 456.589 li
325.38 456.459 li
325.72 456.339 li
326.05 456.219 li
326.38 456.109 li
326.71 456 li
327.05 455.899 li
327.38 455.799 li
327.71 455.699 li
328.04 455.609 li
328.38 455.519 li
328.71 455.439 li
329.04 455.359 li
329.37 455.279 li
329.71 455.209 li
330.04 455.129 li
330.37 455.059 li
330.7 455 li
331.04 454.929 li
331.37 454.869 li
331.7 454.809 li
332.03 454.759 li
332.37 454.699 li
332.7 454.649 li
333.03 454.599 li
333.36 454.549 li
333.7 454.5 li
334.03 454.459 li
334.36 454.419 li
334.69 454.369 li
335.03 454.33 li
335.36 454.299 li
335.69 454.259 li
336.02 454.219 li
336.36 454.189 li
336.69 454.159 li
337.02 454.129 li
337.35 454.099 li
337.69 454.069 li
338.02 454.04 li
338.35 454.009 li
338.68 453.989 li
339.02 453.959 li
339.35 453.939 li
339.68 453.919 li
340.01 453.899 li
340.35 453.879 li
340.68 453.849 li
341.01 453.839 li
341.34 453.819 li
341.68 453.799 li
342.01 453.779 li
342.34 453.769 li
342.67 453.75 li
343.01 453.729 li
343.34 453.719 li
343.67 453.709 li
344 453.689 li
344.34 453.679 li
344.67 453.669 li
345 453.659 li
345.33 453.639 li
345.67 453.629 li
346 453.619 li
346.33 453.609 li
346.66 453.599 li
346.99 453.589 li
347.33 453.58 li
347.66 453.58 li
347.99 453.569 li
348.32 453.559 li
348.66 453.549 li
348.99 453.54 li
349.32 453.54 li
349.65 453.529 li
349.99 453.519 li
350.32 453.519 li
350.65 453.509 li
350.98 453.509 li
351.32 453.5 li
351.65 453.489 li
351.98 453.489 li
352.31 453.479 li
352.65 453.479 li
352.98 453.469 li
353.31 453.469 li
353.64 453.469 li
353.98 453.459 li
354.31 453.459 li
354.64 453.449 li
354.97 453.449 li
355.31 453.449 li
355.64 453.439 li
355.64 453.359 li
355.97 453.639 li
356.3 453.909 li
356.64 454.159 li
356.97 454.409 li
357.3 454.639 li
357.63 454.869 li
357.97 455.089 li
358.3 455.299 li
358.63 455.5 li
358.96 455.419 li
359.3 455.339 li
359.63 455.259 li
359.96 455.179 li
360.29 455.109 li
360.63 455.04 li
360.96 454.979 li
361.29 454.919 li
361.62 454.849 li
361.96 454.799 li
362.29 454.739 li
362.62 454.689 li
362.95 454.629 li
363.29 454.58 li
363.62 454.54 li
363.95 454.489 li
364.28 454.449 li
364.62 454.399 li
364.95 454.359 li
365.28 454.319 li
365.61 454.29 li
365.95 454.25 li
366.28 454.209 li
366.61 454.179 li
366.94 454.149 li
367.28 454.119 li
367.61 454.089 li
367.94 454.059 li
368.27 454.029 li
368.61 454.009 li
368.94 453.979 li
369.27 453.959 li
369.6 453.929 li
369.94 453.909 li
370.27 453.889 li
370.6 453.869 li
370.93 453.849 li
371.27 453.83 li
371.6 453.809 li
371.93 453.79 li
372.26 453.779 li
372.59 453.759 li
372.93 453.75 li
373.26 453.729 li
373.59 453.719 li
373.92 453.699 li
374.26 453.689 li
374.59 453.679 li
374.92 453.659 li
375.25 453.649 li
375.59 453.639 li
375.92 453.629 li
376.25 453.619 li
376.58 453.609 li
376.92 453.599 li
377.25 453.589 li
377.58 453.58 li
377.91 453.569 li
378.25 453.559 li
378.58 453.559 li
378.91 453.549 li
379.24 453.54 li
379.58 453.529 li
379.91 453.529 li
380.24 453.519 li
380.57 453.519 li
380.91 453.509 li
381.24 453.5 li
381.57 453.5 li
381.9 453.489 li
382.24 453.489 li
382.57 453.479 li
382.9 453.479 li
383.23 453.469 li
383.57 453.469 li
383.9 453.469 li
384.23 453.459 li
384.56 453.459 li
384.9 453.449 li
385.23 453.449 li
385.56 453.449 li
385.89 453.439 li
386.23 453.439 li
386.56 453.439 li
386.89 453.429 li
387.22 453.429 li
387.56 453.429 li
387.89 453.429 li
388.22 453.419 li
388.55 453.419 li
388.89 453.419 li
389.22 453.419 li
389.55 453.409 li
389.88 453.409 li
390.22 453.409 li
390.55 453.409 li
390.88 453.409 li
391.21 453.409 li
391.55 453.399 li
391.88 453.399 li
392.21 453.399 li
392.54 453.399 li
392.88 453.399 li
393.21 453.399 li
393.54 453.389 li
393.87 453.389 li
394.21 453.389 li
394.54 453.389 li
394.87 453.389 li
395.2 453.389 li
395.54 453.389 li
395.87 453.389 li
396.2 453.389 li
396.53 453.389 li
396.87 453.379 li
397.2 453.379 li
397.53 453.379 li
397.86 453.379 li
398.19 453.379 li
398.53 453.379 li
398.86 453.379 li
399.19 453.379 li
399.52 453.379 li
399.86 453.379 li
400.19 453.379 li
400.52 453.379 li
400.85 453.379 li
401.19 453.379 li
401.52 453.379 li
401.85 453.369 li
402.18 453.369 li
402.52 453.369 li
402.85 453.369 li
403.18 453.369 li
403.51 453.369 li
403.85 453.369 li
404.18 453.369 li
404.51 453.369 li
404.84 453.369 li
405.18 453.369 li
405.51 453.369 li
405.84 453.369 li
406.17 453.369 li
406.51 453.369 li
406.84 453.369 li
407.17 453.369 li
407.5 453.369 li
407.84 453.369 li
408.17 453.369 li
408.5 453.369 li
408.83 453.369 li
409.17 453.369 li
409.5 453.369 li
409.83 453.369 li
410.16 453.369 li
410.5 453.369 li
410.83 453.369 li
411.16 453.369 li
411.49 453.369 li
411.83 453.369 li
412.16 453.369 li
412.49 453.369 li
412.82 453.369 li
413.16 453.369 li
413.49 453.369 li
413.82 453.369 li
414.15 453.369 li
414.49 453.369 li
414.82 453.369 li
415.15 453.369 li
415.48 453.369 li
415.82 453.359 li
416.15 453.359 li
416.48 453.359 li
416.81 453.359 li
417.15 453.359 li
417.48 453.359 li
417.81 453.359 li
418.14 453.359 li
418.48 453.359 li
418.81 453.359 li
419.14 453.359 li
419.47 453.359 li
419.81 453.359 li
420.14 453.359 li
420.47 453.359 li
420.8 453.359 li
421.14 453.359 li
421.47 453.359 li
421.8 453.359 li
422.13 453.359 li
422.47 453.359 li
422.8 453.359 li
423.13 453.359 li
423.46 453.359 li
423.79 453.359 li
424.13 453.359 li
424.46 453.359 li
424.79 453.359 li
425.12 453.359 li
425.46 453.359 li
425.79 453.359 li
426.12 453.359 li
426.45 453.359 li
426.79 453.359 li
427.12 453.359 li
427.45 453.359 li
427.78 453.359 li
428.12 453.359 li
428.45 453.359 li
428.78 453.359 li
429.11 453.359 li
429.45 453.359 li
429.78 453.359 li
430.11 453.359 li
430.44 453.359 li
430.78 453.359 li
431.11 453.359 li
431.44 453.359 li
431.77 453.359 li
432.11 453.359 li
432.44 453.359 li
432.77 453.359 li
433.1 453.359 li
433.44 453.359 li
433.77 453.359 li
434.1 453.359 li
434.43 453.359 li
434.77 453.359 li
435.1 453.359 li
435.43 453.359 li
435.76 453.359 li
436.1 453.359 li
436.43 453.359 li
436.76 453.359 li
437.09 453.359 li
437.43 453.359 li
437.76 453.359 li
438.09 453.359 li
438.42 453.359 li
438.76 453.359 li
@
grestore
LSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 264.672 mo(1.0)[-5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 187.477 mo(1.0)[-5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 110.116 mo(1.0)[-5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 33.27 mo(1.0)[-5.56152 -2.77832 0 ]ysh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.systemdict beginLSXWEK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEK+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/LSXWEK+Helvetica*1 [32{/.notdef}rp /minus 13{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 9{/.notdef}rp /B /C 2{/.notdef}rp /F 12{/.notdef}rp /S /T 4{/.notdef}rp /Y /Z 10{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n /o 3{/.notdef}rp /s /t 3{/.notdef}rp /x 135{/.notdef}rp]LSXWEK+Helvetica nfLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 61.5698 mo(0.5)[-5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 138.678 mo(0.5)[-5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 216.047 mo(0.5)[-5.56152 -2.77832 0 ]yshLSXWEK+Helvetica*1 [0 -10 -10 0 0 0 ]msf163.01 293.33 mo(0.5)[-5.56152 -2.77832 0 ]ysh1 lw
0 lc
0 lj
4 ml
272.52 245.659 mo
272.52 249.07 li
277.52 249.07 li
277.52 245.659 li
@
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Protected by U.S. Patents D454,582. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /tau putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/tau <1C60D8A8C9B71EB5EF44C4827287C3A877AB1599B40FB9D73E29A330937A8C09BB34310E4080773F0A02D0A4177ACC44217704BEE2AF99C0D6BB12166646D3F434AD90B28C550C785247780E3357BD988EED58> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/LSXWEL+MyriadPro-Regular*1 [127{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf272.328 257.775 mo(\177)sh%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/k <1C60D8A8C9B746F4FCFA28E242EA979943B301877051CD8A73D26CF9327FF61FDBFBD8D5E47777F54E7AF76DDD4C35288F1FDE6342A197F7E1746F9F08E1E2F6A013F2F56A027205F5576546> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 107 /k putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [107{/.notdef}rp /k 19{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf450 135.849 mo(k)sh30.3027 232.31 mo
68.7461 232.31 li
68.7461 232.31 68.7461 238.511 68.7461 241.534 cv
68.7461 254.65 60.1401 265.284 49.5244 265.284 cv
38.9082 265.284 30.3027 254.65 30.3027 241.534 cv
30.3027 238.357 30.3027 232.31 30.3027 232.31 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
30.3027 232.31 mo
68.7461 232.31 li
68.7461 232.31 68.7461 238.511 68.7461 241.534 cv
68.7461 254.65 60.1401 265.284 49.5244 265.284 cv
38.9082 265.284 30.3027 254.65 30.3027 241.534 cv
30.3027 238.357 30.3027 232.31 30.3027 232.31 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
73.2949 97.103 mo
73.2949 110.231 62.6523 120.874 49.5244 120.874 cv
36.3965 120.874 25.7539 110.231 25.7539 97.103 cv
25.7539 83.9751 36.3965 73.3325 49.5244 73.3325 cv
62.6523 73.3325 73.2949 83.9751 73.2949 97.103 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
73.2949 97.103 mo
73.2949 110.231 62.6523 120.874 49.5244 120.874 cv
36.3965 120.874 25.7539 110.231 25.7539 97.103 cv
25.7539 83.9751 36.3965 73.3325 49.5244 73.3325 cv
62.6523 73.3325 73.2949 83.9751 73.2949 97.103 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/X <1C60D8A8C9B7E02AFD7F1EBE5CC834AB58337882CD546FA2822B617194C3C3B0F00657930754EB597831AE300036B9ECAA70E9A5E27F1ADC357E3511839A32420F7ECDC0EBCC00D8B40AC5E5D25931717059DB677A811B684E4FC739624A1EDBE429> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 88 /X putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [88{/.notdef}rp /X 18{/.notdef}rp /k 19{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [27.2092 0 0 -27.2092 0 0 ]msf41.7559 105.089 mo(X)sh73.2949 172.95 mo
73.2949 186.078 62.6523 196.72 49.5244 196.72 cv
36.3965 196.72 25.7539 186.078 25.7539 172.95 cv
25.7539 159.822 36.3965 149.179 49.5244 149.179 cv
62.6523 149.179 73.2949 159.822 73.2949 172.95 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
73.2949 172.95 mo
73.2949 186.078 62.6523 196.72 49.5244 196.72 cv
36.3965 196.72 25.7539 186.078 25.7539 172.95 cv
25.7539 159.822 36.3965 149.179 49.5244 149.179 cv
62.6523 149.179 73.2949 159.822 73.2949 172.95 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Y <1C60D8A8C9B79EE31BCA65993FF5717FF3016C54D40CB82890A019046EE3F9EE26EFAED38E9C1E40ABF57F64D5B388E5F55032D1FFBE776E1367B62F146A9878C3F4A282> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 89 /Y putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [88{/.notdef}rp /X /Y 17{/.notdef}rp /k 19{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [27.2092 0 0 -27.2092 0 0 ]msf41.7559 180.935 mo(Y)sh73.2949 324.644 mo
73.2949 337.772 62.6523 348.415 49.5239 348.415 cv
36.396 348.415 25.7534 337.772 25.7534 324.644 cv
25.7534 311.516 36.396 300.874 49.5239 300.874 cv
62.6523 300.874 73.2949 311.516 73.2949 324.644 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
73.2949 324.644 mo
73.2949 337.772 62.6523 348.415 49.5239 348.415 cv
36.396 348.415 25.7534 337.772 25.7534 324.644 cv
25.7534 311.516 36.396 300.874 49.5239 300.874 cv
62.6523 300.874 73.2949 311.516 73.2949 324.644 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Z <1C60D8A8C9B7924C306AE211DC62993632BBB0EB035946DEA580F9525E4DE67D756B4FB8280DAE3F99D28FD65D9C7B7B15938F40BF5331> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 90 /Z putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [88{/.notdef}rp /X /Y /Z 16{/.notdef}rp /k 19{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [27.2092 0 0 -27.2092 0 0 ]msf41.7554 332.629 mo(Z)sh49.5244 120.874 mo
49.5244 149.179 li
@
49.5244 153.706 mo
48.7344 151.576 47.3857 148.933 45.958 147.295 cv
49.5244 148.585 li
53.0908 147.295 li
51.6631 148.933 50.3145 151.576 49.5244 153.706 cv
cp
f
49.5244 196.72 mo
49.5244 232.31 li
@
49.5244 236.836 mo
48.7344 234.707 47.3857 232.064 45.958 230.426 cv
49.5244 231.716 li
53.0908 230.426 li
51.6631 232.064 50.3145 234.707 49.5244 236.836 cv
cp
f
39.5 118.657 mo
39.5 136.882 li
9.5 136.882 li
9.5 209.398 li
39.5 209.398 li
39.5 232.31 li
@
39.5 236.836 mo
38.71 234.707 37.3613 232.064 35.9336 230.426 cv
39.5 231.716 li
43.0664 230.426 li
41.6387 232.064 40.29 234.707 39.5 236.836 cv
cp
f
49.5244 265.284 mo
49.5244 300.874 li
@
49.5244 305.4 mo
48.7344 303.27 47.3857 300.627 45.958 298.99 cv
49.5244 300.28 li
53.0908 298.99 li
51.6631 300.627 50.3145 303.27 49.5244 305.4 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D45C854A0BE693CA04DDB35CE9C6FCC12699F3ECF3D1B67F9F5777A6EECDAF3C0F3F32C0B6BC38F752623DB2A9617BDB514ED25F1A310A0C42BE659A27D8F2C06C4BFA42A6084F73A353D30020A89B386DABBAAA17119B17F011D1BF8067CBFE17C2D6AE10C51C95BF00F09A50ED067AF> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 83 /S putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [83{/.notdef}rp /S 4{/.notdef}rp /X /Y /Z 16{/.notdef}rp /k 19{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [18.6227 0 0 -18.6227 0 0 ]msf78.8955 55.8154 mo(S)sh%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/x <1C60D8A8C9B74CDDCE74E258E27BD7DEC2AC84271E6C98FD20D770EC885A525E4B13092058B38B98D913CBB4CB890C6B5723895529FEAE9BA916EC36A86A9F59939408772A8E004C80432C1BF5EAC4792ACA2BAD6B237FD805243D3976056A1B26> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 120 /x putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [83{/.notdef}rp /S 4{/.notdef}rp /X /Y /Z 16{/.notdef}rp /k 12{/.notdef}rp /x 6{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [10.857 0 0 -10.857 0 0 ]msf88.0767 59.2793 mo(x)sh78.8955 58.8247 mo
78.8955 58.8247 72.647 57.3154 71.4556 59.8071 cv
70.2637 62.2988 75.4849 64.374 74.6392 66.9814 cv
73.7935 69.5889 68.561 65.8853 67.2256 67.9126 cv
65.8906 69.9399 71.585 72.5879 70.3828 75.1387 cv
69.1812 77.689 63.709 74.4448 62.6768 76.6304 cv
61.645 78.8159 63.8789 81.5146 63.3784 82.8804 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
61.8208 87.1304 mo
61.8115 84.8594 61.4546 81.9141 60.6777 79.8853 cv
63.5825 82.3232 li
67.375 82.3394 li
65.4707 83.3857 63.2954 85.4028 61.8208 87.1304 cv
cp
f
78.8955 58.8247 mo
78.8955 58.8247 72.647 57.3154 71.4556 59.8071 cv
70.2637 62.2988 75.4849 64.374 74.6392 66.9814 cv
73.7935 69.5889 68.561 65.8853 67.2256 67.9126 cv
65.8906 69.9399 71.585 72.5879 70.3828 75.1387 cv
69.1812 77.689 63.709 74.4448 62.6768 76.6304 cv
61.645 78.8159 63.8789 81.5146 63.3784 82.8804 cv
.75021 .679683 .670222 .90164 cmyk
@
61.8208 87.1304 mo
61.8115 84.8594 61.4546 81.9141 60.6777 79.8853 cv
63.5825 82.3232 li
67.375 82.3394 li
65.4707 83.3857 63.2954 85.4028 61.8208 87.1304 cv
cp
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B7D7E88499B0B4629F6223175CD4E8063229FBCC9F00B932F15865B21E5E7BB034E6AEB00B8493B7416EA5F21E0E31EA4A4AA7B249DD04C2020B54E2FE3571164F33157FAF89CB55ED12EC09CD04764D59017211B80D8BF81FE221E84A40> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 65 /A putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [65{/.notdef}rp /A 17{/.notdef}rp /S 4{/.notdef}rp /X /Y /Z 16{/.notdef}rp /k 12{/.notdef}rp /x 6{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [18 0 0 -18 0 0 ]msf0 15.0659 mo(A)sh%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginLSXWEL+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B79D2DDA73CBA562CCA616611FA2F6D9A4F73A34564160886E9CF893B5F30C6CA3CC5C829E6C86CCD8B6039E0C7F2FD0FFEC5790BDC97E18D50224F8DBF29BE62BF93B9B46A0E426252323AF779BE129778FBC2237B0172C862C48766856E64A95D30B6FDF49C5041364379F758936E5F343D201DDC5AF9E1CC2D12A5BB71D809FD0C76D483DCA8BBD4974D0EC93996621F2710B5158F156401628A148FF8FBE9DF1DF727E152C865F07> |-systemdict /gcheck known {setglobal} if end {end} ifendLSXWEL+MyriadPro-Regular /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/LSXWEL+MyriadPro-Regular*1 [65{/.notdef}rp /A /B 16{/.notdef}rp /S 4{/.notdef}rp /X /Y /Z 16{/.notdef}rp /k 12{/.notdef}rp /x 6{/.notdef}rp /tau 128{/.notdef}rp]LSXWEL+MyriadPro-Regular nfLSXWEL+MyriadPro-Regular*1 [18 0 0 -18 0 0 ]msf128.024 15.0659 mo(B)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/LSXWEL+MyriadPro-Regular*1 uf/LSXWEL+MyriadPro-Regular uf/MyriadPro-Regular uf/LSXWEK+Helvetica*1 uf/LSXWEK+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Kevin Bullaughey) ()%%Title: (gene_circuit_behavior.eps)%%CreationDate: 5/23/12 12:54 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6l$DVe%OcX1J9QMhKGeS^6O<9W&s<6_6OXeu(rNSi=9#eVIT>L_G[f<<pUOZ*r]1F+=fP@k.S1pdg$Q>hG!6bh8%HUR'361m%,clYV8B%^i+CVP0/)pkHX_:&?rF*DPI#`p?,d]*RqV)lDh_\Dm5-nSY(Xp?<SZq8Vcu\L^4b>&gonAf/(]Uf'VK@;3H)7m8DkLfu%RJt0A`dJaHH)rrS<b$FUd!QAJBKN%lOr#1KbN3ii%*ZGQXbOHanWYIS<\o&3,mceeIO(n1DEFF"DRZqnZV">POXU&dfYsD"YG'Q%%!;)]X\N91T[f`K6h.HrB)*D6##LP1'r5`\45U>P(,"MXpV(O&__FjTu@=f]^hafRFM$<DSJta[g&1>OiaQe/**fnpB'tkJ<jrZ4Y%1TSK87^".S7/IMr[#`''jjZff>0LeCV)JgS,r.eiWGnC-QYQUIi8u^7K\fgZZ%tV6Kdgdk7es$f2%kfCa_3*B2A^"jq.n4P.fn,O%+3um(of#O:k.&a#2S7[*NrK3g,"!N*@/mN.*k#!ZeXhiL/4Io]EV@qP`IO@c6?2I\VDP"eJc?t6^MJN<]c&UEi5ETVMb'&9`cqnG%G7FBZK30_D,.Li4o@BXgHOTfl"Cd)&@JEJu8J7sB$'A7D`hFS#d+c'\QK8(OYRr,`LIVo0s2!2C@C#?&j3`+Cn57#heJBE42CPcK%"-EtcPVpJ[_'AKj,l`qss(AqPUYfmT3CaWgbP[>*LEQLRO+=Yu+644o1a0YWp)J%o*#NM'(pVD?chIgZ^0Oq!/AZShGIuK]COe9R%XRShh[%dS0X<\MgA-ZUV"]*^#lj=d=o"`f9l')Yll2GkD"E$.@)bf1MDe9<_Kf<\R$&tV^J1js=/&Nh-mf4rJ@Gdt;n3.AQ_/EKY%%/VM!H'JtJ*OF\ECn%]*bueX8a5AP#"l"4:[TuGX/qgY@[OYRjl'?1t'q8A.>G:G7*fZOe?iV3XQp;bW*E[6IeJ+!Pc1DVJ"a\qf%Ph?2*oEnH'q&OuEB(UJtRf\jU=GR"3+OFIH5oYft2ZXKT!JA<M_"L&ZkFXCc"(iCk('AdH.D>_h#X9o=g\#AFhhmEgJ,_4o^hg(L%fs9(es*(^d$lK%&ShoU%N*c7f;tPc^5f<%1p>7I.7Y;[3r\Y3?s6`\I)?'os"Y+[&0*lJ*6'TF]h/80:X%o)9@P_SM)t=k?$!7;L%9/Q54'(fi[b>(Nm@lEbI@UOb3A3PMr"dg2,#;\,s(^&m7YV>T+nTX]I_>(2g@M"*(!mP)*:W!plc=h40>2Yu]8J1fY^L;)I^i0\a%k1Bbi#F9mQ0gH/!k?=+V*kc0=%cT.gFS!2uY(9"mJZOMnMiuChQ8=CbkDCg)WpK1S.D&W77THnE*S]dQ!fnGt*S[=5[V/=M[+RqO%1fN`53$<L9SVS0>?QjlR,lfm!qcFtCO_,on'):>/8+^OXS'p%#aPgUR9EKV\hQsSH=HeJTh:<LqP(`KD*jVgS<`?t_It9//KXE<]%if`F$/Kk$4&0%k=](O2I!o:nLZ*m\;VY+TDR)Z^I/?"pHd#4G:"1p4l98HcTZ@bT,mFE3o+Z[eV-)89VbRjBXV5Nf/&fArM+JG8h%'"LN=JfB6oAn]+qk_k.RO\#C9rG9LGF>+aG"#/(>2B)_@eRGcMK5qk4`!oVN!'V//gs)2uD7,JqDuatl&nNR2Ns=eo]^TjB(\(V#%^eDRBUW<uo59T_#@HJfS8qdQ#GR>)6IJbne/Z.>(qlag&_CU\Y5k?>,$!P7u[nH?=enn0kn>O!'CmW]JE+*`qb.t)%_d[/ilhu?_%F]k9j&)sM-m<HPDl1*2u$OG>2'k:es_TV^)s0(tI"_J&6U%g\GCN9=i1L2OX@"hrQR]TBXC2"(p9ZB)s#l\+[g_dpqgn]Kj,&Hd.%'0tg,2qZQO,hE)kp8]/SqjT=Qa$-dq<n?&@]Df7I(5o-l<rPX?cM`]O7IC+:E&@(mo=I"UTNt5r"!o9J6iZJV5\k3FnF411HCfkV%*h,[[^)@'<k5m"(ffk@K2:6Y3'DY5j9+u$^rfh^+",>K&%iV/HW8Rb2,$$a6D\o`+nq4'*ht3)J0K7l8h"";B(e/gYWqq*,I@[nB%$ZYkHEk+)X@!SsZl>s2Tn/#jAW%hWZr;sJ#N3R[\J]BK)Kae!GYhiNAh,%.A5LUD)'8%rfi(FMCr4l,.ZA,G>f!c1,3e1S0+)ni)%0PjisQF'b&&K/I#.UBB864lf`Z=&(Y-$1fUdhmITU^>tMr&;EuZ45Gn?+<6&Y)1as=p(>cHJG!!J@c@6_.K,%!?jt:a*m4<X2T`H%s#u,Y9^c$;MZC"9`[3%GqI<78ckkW]p;%#I#'b`=1QDM:p;-Y0APGr3C5!u?:Q*b4F\8mLTGL0MmNeAb,Ut9caFch[nmI1T3`$B%%p6Z4Nb/%:BcjWrfHd*9)@chle!?)<B^.;#*%'6+_!(;H#3^_tmk?n8sFLCnq2aaA%RFE9(pI994<Z_\I/673RZTq&`h1XcgS@CPD%:]mii`Y>8L+I>jq;O9kV]@]=*?T7V%.fL=q>6>BER"EU@(l2dl"'ZTiRb%ND[dOW^;^];^3HpcSn_["^8!4:g<Ra:%P+`.`j!_DR%-"9aF6So'(l6iMILari-&A^>lhI&;UM]d;BU-psVqtj?/m([lNM#VAsptlGJIqf-Pr(b'-Jr$"e+5$T'i;!=()?3nrGkLb7^XCm$%k/0I_m_t39P<)Olf@[n>O$n(C%"4?ebW.YofS4/79QsOJf7g-iq*1194g8Pupf5o@OJ7Q8[@E,<em'[;[uqSG1FETl+2pFX<s-#_%Sb*rfi<G&sGpL3i@U3(=k5XCh#!e%f21TarjnJ6OoS0g,])hmmn07]U&M!GOq5//D(bhs#P?-k]B@Ak'p<fASC>@Q]Qo1$CBF5*$%r]^ME"Rm_>qVU>t@)^@C2AE(Gpo!?%k0K3!T/nXglgA-PC7PLlL=Hq@/7hQUU8M50/c'mtd;BG_JSiF"A1d]PIjoNUZ=?Q>B"I2%%R"6-tn1D?Rm'q@OSGGL>(`P0L,I=r"K.n@=[.T9Qs%#bD\s+m+r\4l*[2HtCSCRY/"?l:ABi.Aps'^pW_s;s2\=!6$RdBM'_o/!5%7Mf8"5fCmPj52I*d$Od,Y5J;c9%Ut1r>2ZWs0*?AVrRdVmCJZX2WXd/c1s4S\,Whp-&dTKa367:r6rOhKk&+YnuqRko5/)!>f2&7%8:2JTdAXbsPR(f3=FA;AG$H:7+O_6*Dm9=!TYV$qCd+V^U$]Sc?a/U$?2(k]Y5/Q%<rU.kHrug9kq:2I%6X\)kh(@&O6jp_J;ZFT%i@[]3r%]/\'7N:=js4._D5U;rNmV99CChk<at]B+l&mdY,;ZIK)gJiLEqZMe21DRFVF&JGU/+RIQR6Q"D9tWC'Z/#cq!EeRN41UD%R&u=aJaN9C%qF]kOfaeB<J\WPA6g^P"O*sKbn[Qs2HJ3aN.f*b0K0HoC>;Fb2SB:-)HckbRG(8:HNLa3TK#EW;q!d^cHmL7)D]s;%eSRF:KC?M+DQG'@?O:d`=BN=7%rRd-\+P;ABs-Lri)#tT^q<\W;).H5;c]+dB=@2b%g<(B=[2>_RjE/U^F,6Knn(>:f1R$l]Di+^%0HO?Jj8Ue[HQeR*E(2+*1MeQMNg.cnAqSW@N4$Y&HXeW;`Z)KJSrPaZKZW7>mda8.Sr^>PLp8iS97@)1U4FbM+UjZH5I\.D^Hg+G%$5T&Wl\XUKH9,@_3keoQ3'dg>pj$&kK7P.(fr?pAh(43sgL]-LF\+5P$J+7jG"R\!88=;a:(L;WO^0[u]<f!lgeP`/s$u'f4-5#q%X'e0``W/H%)@P?;KjQ'$h$%[@WZuCX!_Q<YOHEp%..in!Sif19MdAWJ%@\WE6U:g)n=fJjlNUtX>g#"]cVmSoU2bZD?3861F8Tr,%8lK*@%Gk4X4Lk0E=Y3L(R=BdLn=T?4'qSOb?VGqObh]%loXlj@pOHf+7_t509q;BNs$*W48LY>!(F%,*j#JI`@Z<1dFS[KO,\7-^%dHR$?b&H)tRb^(b]+<?CNJ[gGS$LHYkcg88P>797dBfsu-smf'$RNHkRU;asAQkLMWI_PljUe/QYQe%?A5!'Q>&6BkV#f=QRg?WC%ml9!GPff#N<bsS@`+#5)9.fih@rhPBXR&Ds/):G1#[]jh%K[b<;mr8e2PHN5dWXs$e3@=a@VK:rERtGV?K9at-Dm2TQ@g&;T$C&S%C,msWS.3+<Dic]Fo[8K;jiTeW-&$eILLRFJB#.2S3$-Ld\Ir2sBUI4db;t!-pk<Mo;;6RPL;PmT0l$EaBXU:WT1'9(\fQppoWI_]%Cl#!ta#SKm&95V,E'.]*[%l6dnRb6Dop`7(<kAFEe%.bLq>6(1/-Ho&)X2>Y[1jC8*ib=PBtG;Y(Fu:lBERnRE!RBPHa3DX`uZ/$%nCf.AV)!l5/+ddQ0E'cTg\mu)\)h9]nUpQ@MT_Ofi"oJr&nf\;4"t4bPkDod"]`.6EBS%D,)qlk8Q\TklUqeNnU.i#BXX)"1Dhsf%(.F9jX`]GX)Zn-K!D&DB5F?+8W!F&R,tc$BCT3bYBK!n"bjo)0BIrf06sE6d9sg5[>"uuZa1,D2?o7#m<ui_2c8Ya=FL`;Bk'FnY%>l0XH\3`W.\nnYFK>p=!oc0DmXG<@4s'GP'8qhq"G.!V\1TCi:ELKPm6Ia(%[UX^sD2>7/C+Ycs;Jh_=1Z"g-l`&*rTD).XZTid4%;J`kqI.R%68SG+WSB7Y+]\#]sC&a5P@G!L:q-%FQ6Z"aAWRPfakJK0LSu0s@o;[q5=n2'Yen(.qOnkcuip1HB+&u..D5YTbbZ'q6%HXgSOl8G%d,?f3K2$F;PpUPaB.>c!&hFJn_76?%(IFA9t=0'6099qM*cA\bTW?;m1f2kUa?u=J[^r<U_ZbYK'CRq0Z#(u;,m]kbo%d0eHhki$^A2mjL_f(=@8LPS?*Dl4>^bj3@$bV+"9F8\q\=f]MhKT&DF50?Y>3$(U281[(b',0(Bf3pen&RK"t)Kcb%iVWgr@3RRG%DMcmUNGGtcmO^H8dfOT%@.!ot(02P,.g'huhNuKcQ:3I5J$eQf7V3q4Oq9LfnQ&TDJIH=BDF5bV9K-\<Su\!YI0sij1:[g@97iKi%/;k]5=h^_4N;`c0ir.aLnKt+"EPP'V`&%a1r)Z>.GJ\d.d47Pa<D0RT$jNi:Pd,iLj98j.kq$PC+$H1[[ouSI9CQub3`[27L<c>l%XVoX%PrZ36YF/HQr#:g(BlsZ7XQU+gV@[L#*i^?KVumA'Yu@@S4qi8aKP&H6[:>CBZ7dCU(&tL!YJBK"Kg7kTSWanA&p2dPd<Lc4%5KAB7+FN<p:='NF0_)pFPG>Q^N5DaQEF\db24(lkO6;_kH39JXKTN:C_OEPDlt#U#;"CWTkp3\_dIP&:#d<Mc.tpYm2mCG[p1d=d%=d.:r8G.k[WW@3VYJ(QQl_&j(grXbp1aS.*Z<^G*[Q]oc)KVGu^nc>dqLAn6e4'kY4[c4"+=fiaa!t4^P!.uhW4HJ:"9W8M(5rDA%MGjk*#cS"3Ac.(=:c$RE_EVAM!YT,?N&!bCC6.U)jFE6$bf+PF1oB?oo962j2JINkbif->.OX)/%<iI:p">hgCKc>PQrQ`iI@Wos%mkH,TFL=Yt%.8QG8LXg@++DQi9.\S`'029AG'YgMPB02a]6/V.jZ?iqf7[,+o`mrY80DSjp.SCP"]%](]^]GR=%u/tP*4QA2%W5t%7i9JV%;Cj#8/3Fh7RrkNABCCnL's5&DqP]3a9T`9duH#R4$tbUfATq"s2f+)h<%Vc@l29"q*ch_mkj9i)M-b#YC\k$eP'bB>SpF\%+n)C1k7]?qS<Z'J'$&pmren>?:,c[en$@$f1)c.q]K's)XER<JN3B@X42N*;<@DjT.VS!b_)>6Sp.-?_kmr@#QoFK?O83NJ(+q;^%F[Zg.l+>+tcdbt:OeeV_[G^/;0:,h,BA\Qngf>rY]M:tG9`*EXO`mQ<3DX2>jm/C43mi1rggjI?I^E(MDIRcE'KRUtFlB5Pne)b,%jJUn+\ahB)R<>&-=R;Gd_m\PDeMas8jh?kf$8IV;EU(,BnG=6$*E8$7$fHpY9(k[F[CdsdI,mVt5&YVQBWQcdRr?VqjEt/]KJ&j:%5?#Ud`EjAo[@SkPMeIJTmG,IiB3TY27iSG7?/d)M2(<ra&o7Nk;t/MM-"hKW[+I+<8mgDdD.350'[9?.e*"Y'pV"[u7peh*3PI*R%IBrC4\OnrT=?+[hFoHIS\U[JB^P1sGC<QE^58W!Cht`f0__XI.>3tc$Vl*ngL[Uf0mnbrgQ*giM4h4ecQR@u@ZqG[Vlb;f:cG,SA%5!;3(`h)1on]bMiM#\Q%NA&!Yj3QF%2moP(^6Rl0Rr(8orhBD(1<J6ocsi%]4!0mW]^M55;E)]_FS;:E8#(Y.0UQ/=X/'Bk+9dT"%6>bNZZ:,d-oI3<>''"@iLA<-6;GNjNa\APT)*<G:L-:a(?Ca:q^%(S1k,%ni3PUU:(S@;"cJU9?p!,cUf^$'g#':l*T;*i\M`aGr%kD2mb\VVirj&iWDBFs7Fq+W"t?X8t6T%=^o&j[$l0biE]@OHJ7eI_`H\Lq0-T<=cCFgcSP>Pqr];(kl`=SJ6Q>[J;\<$=CsEH%LI%=38;)m3eJsTu-m!/f3ZS5bhRYkeMu+!RdB^5`M-Br[hs0'tTd^"_O;87:%3'rG8P(j!bB=p"prf4"bQ9?Mj`%;WqG">MoBR[X$98%agS,jb^MJHnT#-.$snk<?g4[X,*m"UD#-.(J]4Mc<J@'LQUP?X=<(^p!a+1<\NWeQYqq%U>O9<]l077qca?Y_[JFcr&iWU#4@?CC%GSPeOF*g'\7Jp(U9)69!FQ_o,:+QHXYpV]6Xg:uoOu]6P:;EJW0kTBL7s^(eZF)^9[VD<!/h%Mk.A8gfn]r^)qQ0pIm+4JI.d=<g%Lbg@?jjKFoN]ariHc22]^oURCJn_*F6:Y-u#fLD@ZeZOV\a@Q6<C2jPpD9ho;4<buG!]]"^U&7[mPB&caq&8BJun\NV>O`pJsE7V%*0bNn8Erd"*SE8IYIR9k4Jh7o`=BRhmL&'4SH2^a=%L43M.,CXZ.iJo]0:W5DT^//?9IXIL2I_?8QOH$@=Gj18!(1O]eq7jH*niV%.`iqgB->;,0#V'TSlG*b`ZlM;K,tE;;gZDfhK0"/m,M0L&/_=8,o4;C;2Jgf2iCP1e#Lim@dO*I@__IF`HQkQbG'3#99h+SM.`4I%D7nMnr*Jq"Y^fD]<\[sq3?"P3;i^4^FQo+"];I0PrZ%Wq_meBmXhR!D/TusXkFZrSXm"kP^@Br%AP7dTZ7sK`5%SNF6`JRXftQu1%5j-E1&?0VEnW]MkoR%ieBd@W/@1b(EMV_Au"]W-a!l9?"n6Dk862WS:kfq?Cj73'J%F'WrZjQJP`E0W#L0aR')U$2bB:HAJ1A9M1%7ekA9]nu:tNMX\`:o;\L7%9I2#I=*Wc3>q=(IcJhnX1cJq*kR:\crot;ZtQBUe.aGT,)mf[b0^1YV#B`k\CYW`B8S]IuQQKW-e.n%L#3XWjO%m+(0("M=,M`\Ka4XT\h'R&=.kaSF7_gc5a=]rDFHN9(5,Hn+sV4/>'M9KS"SUpEL1Vd?n;:*bB=$uP8u@B'V\>1rKbC;%6nB1.P!l7lC.RkrNa`:RUR[_HSKrN=LQN?DaYlVZA#VF0-1;!M4CWUD=KWoZ&L[$NGA9iJKOPiNG/ZkRmiZ(rYjjD$S`Jj&iDGG=%0dm'D=mUd[/t^=&23u^^'"6!YP;"I%WVDb?0ic4I_%rth6Pu*0.S?:Da.c/,'K]2D3BT<"ig<U'4#N`^,h6??8=39`;kQ]K%O*Ln%9jW2`5?/ifk!bLr$-1,!oigE[g_`m4X!0#bTnc?.H*BubNhqEnLr#N+[A4>Er.7KMZ]F;u^qNiJJ9YaZB^WoqGX>Mi>mUdU+!2[]%dWL=0Z/c]j)NAk:6Vu]*6#PM:BBRs'iM[5uAUUO[0X@fUI9t'XjMYL\gWNlq8_=oCfI#@"qc0W-Bt6#kU1k8]&c?f\jE%/#'C%3B%CC8)$9X>blQ?T*Q6c5Pe?&/\WHs0\^=Yg;KC6-;e,BI-;q_36Uo7PTd4"U"7'leeb-=7_-A(_E$8_fJ_0s$Y2PRIq>T'85)jeCp]%0rUU,UlpV5\`o@(7\8I#&qsN3G+im'U<.l]+WGk(<mY$L^5@9Qj_4TB7OiE&aBWX_@,/^+Xb@_poH0O4ckD]*4cAVs"FSp[himCQ%^8%SaRuqh:1S"I\Ze8eh(s]eIN/,D6]1M)<:;G)C>o(2Lc?&'[cB1O58do<q06RheF30ic%<oKbE"2(VQ,);?JK<[jRJ#TJ?B4O9%bkc;p]AUg,7'"\9B-F$Kjh4L:73')cXr_2%JkD@MR-e>UATNrAao=C]GND?P`AP^-YLJc1,Ol(=%nj;12]GJOceJ."-NN'SJBb:Z%<(K((X@t^MT)e:oDOg`UbCf[/\bXq_]4mR9c"XI_#es9/lggC'j"Z-*SUD`iog7TIP(lL$hVdM_dlmGIECiPGgKp(We9ahb>WtbY%Y*)16q3@Gp4*b9PcW>hRhnFUr>NREGco+CUhY,[C$cn)Fk2ktd)c,%5_?5ABYJ6gZQCEG>RY2sCib%GipS9nC0+Xlo7?OYIb8G:!%[nYe^":D*_AKT*J+0aKu.k9#V`GnDO]GH..P]KJPi7M<Ffa$d1obQ!nHfo(uMdpLWfCOb;`b_o\iBB,2=N(Eu4A/.a!9`/k+Gc=I%5MYFuidCVlg#KE+#Wigh2eoo#Ad0$kQe<r,8O5.OJ,@m7/;G<T08X'3-spGGY84"]^`E0`Cb+C\([8,ca&D=e=*T.#hNV@L?]1)R%?65kuY7\2%D]\Qu-u*D?>CN)kE)K8(OmHYQ(LeH93%"(**bOJQ(b%/&dVH*\ej*O:Kjdr.L"a]JALtNXNZdQiRihR@JHrRMFhEfO%FME[\HR:.rLk5l,2c7r?fNY(>q4%er;X*kf4^`TAhJ3D(`5B1MECYcC''3>@F.\lG`Fd"C?`MuZ/He\^J=iob]VnC0#icH:6?Y:]%]Y=oG@61[:I,O>uA7'5!KM)Je`02<R[bHu2V7D_k=AOR"7-PBNQ`'1;bO]'<MC^^MduP1WX0Ggr)rsGD&QF=RL+DNBc*d0XqtI6-%MCR!B:+nm9PE2&adUh>Ps-B.o*%hPD*53j;>X;cG9WLuohg6sKjKR&OAJ.c>nDam$G;f:PE_/q>G!Usi3AW0mHjds6oEdBh(4.Wg%>G^ol0M35`jo+>H:k$Lp_=MT-(44>n@$ZCi'4EJLf&ak\WI'*i$.G7NminlN$iYp409`pER7NW&1fogGdQGiEHF_ou>P`djP=8ld%qe[K`3Oap-I#G$P.Elm$>[R%!_5t4;q9`m*b6Bo6-I<bKK&*-*mD'd\/OT'/\Rm(p8\"]pV:$W\Rg*[0A8u_,)#adC.>qUODXf7o%$7C9_fbZNi/f13%#Z#r/K]];e$bS)lGQWmr@,*7C&SYkG'#f/DR9N:b6[jG,o3PKFq9a']0]->`%cU7APNHN?.Um`tQ=Ias?j(P7%(`VZ%ig4R?Kghm,07M?1:#lOMG_i^&&/X"Re&B2)j:gBrM52BBjnru06].0ga/^H^"P=oI#!+c/#)8,O'SaMP8qikQba$M_7-jj.%Uk:L?>g=nh,$8NMXpU_<E'Z"G93@alb9.o\Sb+1KFhK>.m%D4YZ/TQ6pF>DZ'feJ\).H('k_==3B>8@O-(A]@VV3<hSUA_HmFb[!%4L1cA:U7r?2B%&F*eWRQr0+6Ij_bbTJ6C1Td)=i&Ap;j8F!Kej4?8WZTNEd7`JAL.$C8bF@_to>`L#i=T>tD#'^a3,V')pjB-:e2%>NRm#B4OORgMEt#*/Uu@c@.:T\oGa4p7aVs+b-L5ZkM!!neLmWB<\`'8DFj,me,[OC3AWd\ambThp7XCH>PX@Uu"J'JmZl.H1)_c%Rr?pIfuIrFbF*+-H_T0]?^&%bcX7qjBIs$?blk=rnPLiej*u\mak7-jo)>[+M5D*T;?SfZZS*+;0Fg"$bZ/E+!q&k)+r=kmHi3&n%IR%]6(NO=/*-*ZL/uplOlrQ;rf<1@D%uXCG)m1N7G]-2r!%iAV#\`BHGNHE?pVA[3/gD1q]jN:]r>:gjl"!1+MnBoAOVh1+!%>to%b[6SO`ICpKB6>c(d@B%08X8FT'cD('UQ:bL_D#0s94HOJm1S`4OptJVWb@%JY4+/p3EO+=j30]A\n)<^Q^d@%H+oT8=5:QeX&=Fa%7T'iQ$Qbomj-.F)02f<"G&sAWPjTfqYJsS9rm;(=S;V_lg,P[p!=q>!E2L]hD#gUR=Jfr>0(-3_\[Nl0D)d?bp(aUXk6p?C9FK(p%k?7N8*U&#'r'!V?&fI9f!X4%KdLZO9/7_)DbUE.C*V`n]P:kVW+eU<qjHGNFh?WS',ZlT<c<H6,cEf5Il&]%?[Y_N7-`esPQK`\2%'8XKqpX&W6/1<[n!Tt>([U)fA,GjBo-`1MW\B:IQQlg(D1#7FUn`rN2,41:Tm4K:.D?l^)!UYKr0I7)n^0@_X?-ZNs$Kk!;%B]gl%..heq;iVPD."57W`Y3aC[T`BO@7A0K+.iDmDi=@bguQIrJUDJC$C>&?2!gtVqUfh!A):rAXfbU0$fW=]DPrCc.bHku_jlIV\VR.,%@LaPgCtEo3[9u!(g-TuDgTkWK[?eAfC_;l3j'gl8q>=.3K.rVRV'hPAF*n[MOm%DQUrbgQ<gYQr<iWR(j27=odX'!l(=o[&EQBHl%(PVTM.=54@>ZL?D3L9R:F'+`L0i352!YR!Wm_!q$5ckK^fnXk21A+sE/.0qDrMED43_O_l\A6a_?DN5ZI(k-E.roY[$(\g4qrsr*%(S-!$/[KBUG>$42rL@$&T$Lem$%@C;at9GV#_Kp-(u?u\^.)>_m2W++<+-K$S6^ELn)ML^YIga_?@q/LF;DV`F*_TG\WJQ^(4.ME%4Y,HL!pIcs55I6@>a:WlT0=tdQl$8.XTV))S%5MZCmCW"TBCper?`nH-eTiUT=o++lXTgO1,'\-(4t'P9<h%KQ]+.\2=jp"AV^d)%Wks5ig<93nFD<nDoA3"p:h1,%WECZ79Eukh(T]OUJ9J5ZiQj+,@kW#)[cF$4UX>+17,#U-R@a\BHhJ_+R1YFnT"m$b''h)gFh<k@%B//H/**4`=0^`qR%i.JpLSPAF]GtQ#hfis8I'b<J:C_#\'Yu'>os8l8$B7`O(ISK8G7!(4^io#BXOr#2hNIN[ihm>9rkKZ:MfJ:Y%q7@+(N:01n!k.W#Uj`"2__)7t7d41Z>AO]^F)@(u@R&iZkAFP-EHGO#p[#o'=]OnjM8+9eqHdX+>j*X#PKa%$dlRV"\TUJllZ=&@%M/e.D^ESqQ&`C/ta^/G>&smG=S7lQh!0N_p89pO*!5\R1G@gh*i&(Iu?"A^c=Z2MC!1L+JKk1*:2`cOW'TQXPHSuYq,&semLA<\2%._5[31A4oHT^6GVo5sH3`/-SH89Y+tkT=_dT!gMmf)),%0YA3:[NQgY*!a+QRB57F*[6I(Fq;U0Pe]elY!9YCLt+J5;'SQO>]Kjs%GFrEAOi7'NWH=nS]^%$'GiBig*\YT2$S8,`ru*HWAG^Cm&T8KC0&iY((%eR?6K\7pRm$q&r-to(ZoiUd>QLI!Br9Z3cW/hnieSbB%*S;p-\p<^?L?qMca.@4/%thqp:6BM(^6pig7@2A=^)8G&pM4&UGI^rXp!(^_C\f^6:O4Y,^W253Ofe6or@DOmo&hq,XmItM$%M'P%r[bM/jV2$)bcT)sN1OG,/@Z;'3bp96jL#%EiRKps^q*Yk&:MPZ`WqdVeg^P&SIpQ.q]5Fa!n6hNs,FTk72GTA1`+!4f]GGo/bEp8%'[_unf'Rj:DTMA6cOs[g6r*g=?]CDa8,fJFIb`<A!PRLX-E1rPG?Uo&<=AXKk%a1r:gVP!jR)WN#/D$_SF!fXp$l;M'F"RA.efYr%9^@$elcn\aPX"$BJ3@=)e7rICRQiL$)g'_h0ej("b'3R/V<.h+>q_%9`r3#ncM7Wkb9hQC([=Xd\#t@5JNND(-)k--JV>."<T-%]%^%k"$]>o#%$:/$b99TSqnaCEU)?%*'Hi+`\,.^sDcf\@oXG@rjCGh\,\iq"]igVBYe>*nA7%]T.R$"m'EqUESK_tHi'jD0/m\Urh%+(lf3esuAo-#GQ9f:+.bf,6CE11i#0\lW%mWRgiagB0TF>0Jo9B\:>O0i8nM\R&!u]WM1T:pRM?Z=B)?`?m70=sV7MSn>h"cJqNK%[6hJBW`0;1q^jDb4Gm#uE^a9FX6:P8CiAj1#sGF.TF@a<HfiJ'<D.?8`keS4Pu`e\=<7EFJ<&]5Wqo:_r-LA\q4dluY;,$M[Ea>"%<ANnQ.+NSbN!"-",EXs1%#,&n"%fWJR8rR]a@c;-X&s&#F/sU"O88We'2tu90#$60b3[*"FBiqgPTLFVI"@C!ECQf9$ebPb+N6AN%ce3U\af2gtdH&.%gc!Cn74ktb.<h/GYF[M42f7D-1dBMJV_1HL-<![/rjrM7;12T<B1s9FX&d'F/)U6*'qCi9SsGK*Y809Ie"H^p%.t*mSp6rqC.C-*QSmJ]-aGbCI"d]m/@C\6K3/@F<*@Fdu&Q=.@,!sO\Y_^T`i1F.kQ__Bp(34]'_d?8:]$h#u!RHbGPQ'DAd3gDc%Fe8pH&+5-Ipd$[&DJaEJ@D"]g.1LB-8A&18:FT*)+nBJk^:>n5hOE[EMr!O[qjTJs<Qa&YR4B3g8A2MeWj")D\dtpBoaQ#=0F=TE%^93+!=>1M9NQb^K+U&?>Leik"QcZF3fCZ^<mJQTs?T7`4XERP4J@kiG5C3l>ZENq;-'HQ?>3XCT-Et$a_qVR:;>Fth"f-?Y8+EM`%f0p,8AZYI?o"-K#pXs;JY)8npIa!fEC.57=S*/=)6XqSF?JCtP_Jf$/VE6\CbX^<uh`i]^0D?)G6ZYkT(@jY^:H?joIF$n]>fS?2%5DfKDD'+c>jg[K)i!1%0fZ5.:a3%BX]^cA9b>Vkhq,3=J/@k2MhP[V>&I:P*QmH-MAc$O&F744fCZJ_UE&9otqs#EpcM3$Of[b+L%[U"b(JWY[&&!(c`Un=]Kme<I\daV@nf=`F`;NqM96bE2R]Jd0Z<mIVV^oKNE/)/hT]^sQN6Y`m0A+qFmFX$id;]DbbfahA&+H;n`%G@#4*l:=8qY='fU\\gs(?5-m4/,dC=k.tS,%4P-mp+)S&0<*;k;%4tu$_SLOjmq\*S\V)Z2O/4Rm-nItTd9)^A!Z&72B<:HS-E&c%^c+_tYldYmMXjnu>C@2HR)#l\=Ufe42ZC-\*U0k-;aY<)A$hA&,'f3rWZ^]45%EZ[3mucWqtrCY]hq/.5%!GE(b*mC4(GCgWB'dS%N\ogCnKb%">?.J3,s&,^'X4gJ>//Bt&3+]J&')P$%AYX_U9nUAe<-%M;O7jT]5:E9<MFj_lY+OXjjIf5Za37>h^9_<d%%YtNf81A%OLdlVJ;$Erl-=NVN@pJe)qE[R%dAntW>K>+m.\8p,7V?KLrSdF$<ZA&3Mb33D639UO/X>:Rkb^QUil_+d]5WjYcqfu4N(aiGH6b2%*rKi=8njbEdT1KqeO97Y'5;mR[8LkCDZuk&I)a^!2LO\i6._Z,7G@Q2XVFA]((P3%a`NkQ88j;3?TP*9[-2eX`)_.`Up&Y+-V1)b%=F\V"NLU4$pB^:TIsKP+hR:IgK`0IP,.6&LBKn_R]:)8,9\MMT6@)"H'cR=!Unot`Z(F0tm]1)4?*/!mk8_oVd%q9l:Y]4aZ:O5d%9j,3Y,Z`Z-Sj5i[(b%(_(XV$8SA1]8k6rJ-Xct>1@e&I>OA=eQ"]G6em;.T@;RmUL.T[.Z0Vs$k<^pbN];kAOa0.>qNH/'X`?.=&%2!li?AOs_rNe)u78\p<Q^5c5KW@DF@WS$SW65nKF)R5p2?7H[T>-fZ>g8Nf_2hs50moPIt@fKT,MA$bB]%q&@#n1V)ch@JoDk(Ac%0t&tr)jQfb1nJS<D8F&)afWWGcU0;rRd2Z&rcZAj!bSq[CHMddU3Lf^A=j4PZD_2<;a_iDV"!t]"ok#<)@u(of$c1t(t9d6:Vhc/%DJW*'Xli.4Y$ZV(HJ0Ydo950Rdl/rMfK$E\'N9;F-X)oWVq0U2U2Bf#X$6c'I^QRP\Yj1'\O(Dl[M8UD.;0m/eiG$_>3fmTGe/]D%[@X*J^8FLVYP#P"]UhVX[%@7.+4%-.NMl5Bio=\8jXIY84AL:4P<l=[1IO1MNGCZDY"6=>*`bB<.7QD@p_S(JnTOAkb[#[`[%9IE%p%u(a`mang`c=/7`Z!/.0(S,%I]<<'r&J[AY;WTL:T8Kck&Ajg3JrA@j/g=oB5RW?jr-JAd='MVC:ai'Iak!E>jn77C36Y(.T4L`%iOMS+*[K)'55.EX*PAo&)XVk8*4.i=`VPnN?Iu0Q?/h:fhjL"3CPJq\1hd1bdXbZGkY'mBo[55%(9dZ*)c=c@r;D",(T;]=`Q';!%ig5(NH4siZ8MHbA*S;BDSXoIpqBfMB"#mKq"+82Q/Tu>'\IPeGfD@Za:A%j7JS.DjFqRN;Z<j)!N`=KJ4$.XF&nNX;`R];/gMO^2%/OX_572gJtejasd)?_mZ&uAXs?FK8p`sRRkh=u`U6MdO2[-W]DO:ElrcS8>C)IKT[T!^9'TRstQkO1m'7p;M,aF!'6+q6\ALe(V%%0@DLXpB@oTJJ#A*+9cZrI"uogUnO,625F>%@fjt)[BX`T#2_][.InJ`>"BNi<*8m+@tcf>r`L0hZ:?anMsQS/!\':)%dj5?XI^fP%*.%O>j7@rGG"JqZQ@5m$U%a9jL`oi`D9$B!WY(AK\WFiZ&`(kN4E\\KT&Y:r+c#GL<k7^a'dZ%2HJ>5sq"#hTosskE;Jo]fH0,CN%K-]f,h7R!cmNGg60dB[m#^n:@\)T\d3hN2PZolP9]d^0LEX=\an^Z'Xg+0Y%nFb5TrLoi0p9l/7#E@UJAFX/8Q4-jY0Z%j9jSsIC%(+aT1S"Ed&iWt&:o.g@S+[kO70(@+"m-"s6A=BHS?".;9b"`8&Pb$f\;tRAF3-qn#RX;2E;Nbs<'C:SA&0:f0`eSt_eaYM6qW"p7%Kjd1/cQKO!DiEh^]63`*A,RQoI%nm30pOH7)T4BoIn>^BTA1o.6nB?d?5(P#0uNFNlgi5>J'J]&MAlrc/7M/A]c9Rg"l0ne.\E%j%.8Q>]%.`&)9_n/[nh5/cc\lur6Qh=o6hS5EVD0#Y1lS^CK[=:ul>^*=Y#M=TMg(qXb+8N>h2_MS[)512("sD[4#S[uXX076j.eB:%1g+`:3&Gdn6\G!$RijSgVnBZK\uq@a1bL_"C856>0p1WPfhna7p<Or!X=$g@%nP!f^cV*E,,ifMjnbgj<gQNZ+eTs9YZC0^R'--4%9e`&[JE%UU-aWf3.^7cU048fs&uidR$Z`d&G<P580=fPp\e5?8<B8`6T?HZR!OgjE=3sQ7%CVp&eAjIKf:5Uh]$GMj%:\cu15o#3%"_GK^3@EE)Btld!lTSSuL3`fg`ZXa<eZ:IL.=hd3rN]:9fp#0>.t(]=<qX8,SltcLa:#D:bp^kU=fGDdb7`#Oo#/esn"<A&(QQXh%ersA4-ZPUfYu3`_M(VZ9f6C#*XVCVA`h]*BcS`<[:*'=DYoD!Hj?hJ&3&`RAXA1AeR<5=fF&42#]%^89&oF#LJc.8CZi+@p71Yc5%5ribCBMTTK)`iG?:IHoPX6sqa%27%=P>P#IdInM)(Y9;[0UqB8L#YeeSj1iI=N>f-7d,@6/SB%CTN,?l.qj.(U2O@B6j$ZD<e(3F%c;#XM'sr`ohoASp9kM5k$!nnC%0^SOX3W&6p2KmS[#nNa5b5(8F;R;Z/8@dC/h\,KOa"aNf-5A@`hM[SJJKri&PCF_Fkb>p-3dq_%oF)DJJdnJWU,LV=`Hl1X)<*5B0uT()LO6qZ=aaaE)uB/)"YDtUbp1R@C/?#<\P:h5;,\Q?!qK8I1-7JMdS-PskJntN?<]bflH'aU%:K=(gN;\1LnSLAuZPo<=?aMnkAh3(bXh#g>`o8Oc89aL"F:+oA<XPY\-##A')ErE]N48Q=I?lf.QeA3-X?B!W_sKac!c*0J&XO)&%0&lk9!M@oHJ?uSckB._5Q\$$1ZSOBL'&?[,XJY%@R1%.-CLrrF!sM.+''#')%#o?WL*i%2P@9VW/XYt5DY=EUaKl+k=5q!5Z#QBS%@-K5\!D-mQ^B#e8<8G'F`[[9$CKn>=59TBHa:^CgodNml7_GUq)m>BEo!osqTJ36'ED88K$<'!QDVGVPM&8AG`!q[iAc:h[RDf[7%+mll>0k1Nb`c^Au.']$1>mQd>q*K=n]VO:2QSGI^q0Z=H/:Q#Q*n/MM0Ze2&FjFG\aF[FNFPr_:YmR-VY',sKhEqRD=Qi`+!XkR<%/m>TMe<)D+L?m3h/M")j*.[qA+k_a,:O2`[W>b3]bD!p*r;:ekrJ>Q9VRbCed8@7?.KiF(hPq?.eab6kf`&aci)CsYUa_k9bH#=-%>YYqPD_V:5IB;MjE<P.[3>rBZimi]kZ0qe8[pSK/=SH?K(-F;NJ\ZHHi[u%V1Es.bT3HQ$i=n?^!(p@2`2jn80f6/jTRQ-AqIo9d%Bc%G<J<Y(%b/jMA2&`r]ac1KL\1V3V6DMA8M8b#a9bAOoDP'7jFVMI<5o&k=Zpk.*-8h72E!H]"*Nd_NL07<(8'=*MLtC3Gk%0$$%qn[Yu,lS1+@n)4jpI;,E%bQ-IDuscl4hLCX^$qhB*o^u:ZrY>N!U1f8Sp5?>B^+)V5h/?_'"rtb%cm5kPt>9NS!f*ehLNl2N/4Kb%)D\\DSicd@QApln<O3]?X'T/TWpRJD@#&AZnA>+/'Ra\]P7KBEd&b?QR^Acm)Fb[k?DbC_']mW]TlBWEC5Zdc7eq%M-FlhD0sHk\%WZA>1Q9BIEPj'q!XRUYEI?0cf8[0$PjRFB8CThCe`hL!^!jKB*H]8jn!d;5)5:"RlVc^q%Z^[/[@K=H-nS6jK'4_Y_3;WmE,k5CK%*-/75:jXdI$1mE$PP8/g\[=-Mo^8f7$)_.;a,X@5Td+Ipc."1QO,:tW@Npfop_-D#ZX5IcMT2XhmMe+n8&qVu:bXOMO_tS$;ms)S%X`Z$-g#!lNk@Bt'Nd4E#6SUf`Tki3"Q&0TD7@+EB_ID+50?(drjdoh,$7B[<F2Bo.XLU$ukW*?HR;4n`54n2G1D$,1;n2Dti2O#!%&MWUKKobqpgq?"h%U``tMS5NcmUK^NFCp\3^,:__ZG8;M]slQc^6N_lA2cf`;t$/%PaPcVH0jN0*=Ys4Wj4E>#OL+pGMhLrL[Gr'%#MW]:IZaFW[B>ufbmHLirA6BR*o./aTjm6,)ERg(3qhp#j(mk%O\..f<2p*4WhInFTOZ=9351,B%B3Gqa*W3Sf$NY_cj=?/**GY,%MH$OI;m-tl^P5LuJr\[G4hcYG^Ocrf&TNC@3rKCH]Y9o/L5o=Ql4nCJ$e?FD=f:U\2q:>K#@>"TkkDkF.3cIP.AOiKRt[hf.9VH5%mu/6R=o26]>JD)m!E5-;VIQf7EpZ$([t6_Nj)@%.Wbgb(U,d+NQag9]`F,S6nRUFNjhCdLUHC*Vj*Op4ltRd#Ish*oC"]C_?2ZNU%m4Rd*4rQkmFLn8R1+-+C)&:Dadl!ad[Fh0Fk-.,PeX`STXdofnlL>T"$lc5V%=>J%=_\..HTsG$=1?hAMV[?]O9ZLI/lDTHOV))&%lt-guZBtnt'm4AB1E-g+>685TP!Pn(LnPc>5jd-8M0\.$^uQqHf0*lB0Hr>@`I$q3*jmkghHd$\4gtYWeMTmk1g+9kiaPNXna00^%P0t<qOr',)R:b@g=h7pbR&#ZH;j>.b)&%Aa=:ND6/"9i[QnU1&o1<b>Z9#_GX[*H0ffZmPEdM`VnoDopi3bYcBGSFO.4pcPi6-F,%n95Bm-(<QZB:K'B^5gOdP2E$p:D(E*KGh;dF9Kg\^h+,&l6pl#GP3T]!G5/HZQI/nG:sH!QtjA8@=nt07ko;IQT\_SQKU0*W7gHV%Hd%^+>;7baFXuanP]9@6HF[;m3rjF=NjA3f9/gQ5h4oj1B2=I6CH6a2ZtVa1$c&UdaXr5iY1J?Cd4"oTCY"HCQce\U6T[@S3^/U:%M4:3Ko#/nS8i%Jpcm4?R8r=u:Botd/E^9d7R2D#dCg<+FmjtQ)<O!Y3dDi8WWQ3,bFRBmPd&tkb-W04DhU/K^dPEWOZH%EoHV(k@%V-SEVk]D(g3[lk@%]>L[GXoROL63uBQ#VOa@f;XnnQA>%mmaKR.bpi/MWrK%YDA-LFunp<IM!H#QfJaHe7SIA%TJU5MMTKX-:VMU%c;G$V,b,Z_,;NL5YEmp>4&&*Iqtm_Rd2>>+[#e4-BTcV9UGB2$+u3W8?u:746jApMWMTph<2:G`k8b1t;8i9-I@e"?*2DL5TT(@=%\t!Rd9-UTU/2-=0@p([-gl/LCh^aUj9>`%C%2,&P3Z>hV46k1Q_sA,fWU"3B>3oj1O"`EB0hHEPqGPp-3Gd$Q3fVVm7CAds?/8p\%ZVlhpe^YP5S=$@XgF4:CXV<Zg&4+9Xg4rYp82%D'ohtHJ7llm6HLRC)1FO#":&j=Nol.K^rfbmMm;r9ZiUq/qW.IhXGNsLa6S_X8%YD6'&lT95Ph!rpHB!Mgs-7ZimYD8=n,P)XiVlkdgj"So=\0Lb'G3\%n:C0!l4e+sK,#5NMi1PBUV(\^RX]+X=:/G)S(-$qDS'Hin%:o_ZJf=!Mu'+)I]GBEQ":3U=m:$c!Hf.+1&B0mNSl'SE(1t^d+E9,=96+u7B/5AJOD8059")k-coZmNg/16PI=";1npjVU2MIH$<%Y>7F6]iC?R2jfDb<('<t/3D\[JCJ,MY8PHeQqL.sW;DMM=lXe6W=;<CK;U[<(rJ'SLAKaWL3(!EFqd8fi)quUN_sr/nh_rC2!`H4%&MlnS9rUUYL!prKKKD2QkVp%FI@*Bma!Vfj(_eY@'Cb7N'rb!,X@Rb#77HM=mn#!,aYVgG.T-;m#qAhm^"<Y`0C$e2.T-;-a^^uD%X4QDe,pXToLSjL1A-D/u$_[VpGBFfY<0Y6Kp"7"/3p'&nq!'7*pu&ERE'"d2>>!iaM-J+OAu:I,P[A]X.3*[=dBi75H[I941oarX%de(=Q3+[K]>hU4"T/qjDpI'7Y(&::d+L1Bln1o?,k@ih,%obohI[/YPWY%Z5!Fu=L@j2\*b(b1=*\r,qjoY7>:_B1R/KDIQH''Qe%BJ+R4Nu8]lbLoO6f!fW[X#rGc/J"StT#2q&W8NkFJc9U#7<aAKg;%$0TW>rA2Kq;Ug:W,p-_%U:q.R%f]\Plsk&+`TkYi/&bhIO<%DO:\l:SQWbPZgbV?03A,nmXPUAcWa[*P313Uf<Z1SZNnK$gHcPnmXOjn)@cMEH@W8?*D-5XRtc+7#J1uej(-6Q^(#,<nMic't`/9%g.9Vfg&b/`/XBL]`qbm?!e9EuJDFiZ,Y/ZhDWn*725L.uI$lAV;QBre7Bb?\6tdbj8fne]$9S,1d-56fV0.lcM1cdFiBFtQm9G:Z%O`T:SH).Q>95*q^NO4!\O2/Z7,(]FG%cC-1/`(ZDR!nXNGNXos40XpfQ=kCjRgFnOD0I0UQUPE@0gp<'Km14*g$NfNU['p?`[SA(%$at=@_`L97Fakd5H>mTE;A"*#fX$Z-9sjAob30qtXN\6'mZcZN/`s)2,l(qR#q:5X,cB3>fpO>0d3[hBjNL*PRZ=`'cq.L):$2,:%]0oDr9.EfK__7/$+.rJf2l"Pcb`5Je*3PHsCm+":pP_YSKZ8'-rGgu]Kbu^7n"r,lNI(#:!M*8ep[Dq/4l\4$<n"%8mR;MDr^j0T%[-Zl&<n"%e"@[Sr<Ag>9iP0m(UJWn>=tF!JBn(LfSQ[V9ir$%p<7@gt17&0X:Gptb/+Q!VFR"4VVlloGhAJ=b24[o&SPa:Nrmc+*%Z$+CISqF*.e8"6,cW/W,RSM,;iQb@_@5XTZ/`"]do1)m28\29MZLR1Zl-tYj7ATY\eT>Qt-bEgP,h7!O[<1\X$6N2@VZt:Q5BSiS%)2]GA9rD#bG<Ej/eT?.9m(d?sN>ei2=4?O:kQNJWg[Z'/FE.@t/Y-E@5#F2.g2;aT.@mQ/:<.]E@5XV<cH&SXl#bLC'3<Rr`Pt\X%9rCGhrgq'W<R[pMOXg+q*U`tTed;YD]3jn]"_*pe<*JXg41Ept:M+B\A^R#Rlf-Rol6KZ`[4[KOY>1'AA\4\*F>CM^<g?E(Q2!E1%O7g!@!cF#%eF'#1<]qCD9'DFHl+3rh]!olM?:'!@QU:S?Ei)2Oh:lRB1lP2-+pY'j4Ek-Fhl5O&HkMNf6oCf2[$tZE-8K5=S%.\-%7*V0L^4aIQ`;#.(mSn(jgV)fgs.LmE\^S.)d\r8q"K,l_0=j5a5[mDgs-=PY18R.:\^QB`MAP(h<fnMu%CbqXn6rcfY.6?eI5A9V%"REq8rg:s#F&bG5S].m`U(emjg'MM>lDASVAGiE)=eE45RE[nEk"hB9TYdlpY`R.Xm]YbVM/)7]P;pe<(E-AOR7e_ke;9XRA<Srg%3HlKT</G7td)jUgdTGd2B`=sI/hS(M3Z9c0%\(^t_D_FnZCu71s3Wq5o\NgIeERG37Yj`E%Y^[+*&n2B@LCCEGIqU%Fs/ic8g"L1%UQSnh.;W84c2uaqYa3qP"%$-mqnkC;$>Y,.K=rP<fUDZ9J-_Mk>KBLkf+6nBjsh4O?(.R:S849cqn?.f*9ti;Q7i#..t_$C'A(C#%hT6`tX>6W#\f2(4VnBjMD5*-.K^<muqd3=9j!EZBf8_a:0GN?Ec@+UjInB\KkLeOhfh:Sj#t&_dBtmnQ&.k%Z$mp1C_=lRt6hno:%+bN&`5(B"?mLY[_M4sVPGPg9%IE2kAlBRE#MkT-b]AmeO1L!XcGZ3HjDR`W:EcriNrOb;XqI3DGEqg)f)Y^oPGMGb8B:hR"6LRnF%o)%lI$G5qF7eSC7--o98_QmL2;.2&%G4[BNCuln:J,#>?b"'._Em1+rL#F!kc'"S/nT9r2g*a9r-WONt(lh@>]35d[SemC_p7:95%4g3$BKok+*Ff6S;TOOn/rW6];L^BX"]iQ)8DFr-[Ae>\_`QXZ'nUp1B?4Njt[c9IrNA;hNlJ"_<TGb3ZfeBC^$)ob$$.lM\n%QPD%fj3uP`3^2/a1!G]XL.jBL<q7-I;;:ep9/K'.<f%MhiM9FIqk1X)V<d9@&l/iX=CI@/grb>dd<B6-^%BP*p]q(G24Bn6K)G7Ln^:U%fA9^2BW?JsR(V<!4K03g<4cA=C]<ZG%JbBK/:"g,cc.iFcm:If@F6D;]0(lRd<54rY)8:0K>r5FU,EfmM-_e5Jnk0dkYK3-[s@iL%)Ck*sj6AgXYS"V]-LXj[4mnN81i9WIm45/`b"C,LB2g'-NEsWo@Ct$jLKeW1r7XSaSh"QO]Q"Es)#bR7mG%;#0<]]Rh#3>'8;Yda%p//h>ML4!s>.:\hFJ*gg>OG@?Pca#0<&pP"1SOqMf)AtT?He(b.dGttg-p6Oh@q9br5pe-32'OQa&Y2abc"=>,!9GI+e*[!&9o5D%7U#M7FYo4A(h`JFWsI$)^\:H*L=^BX,$h>*f/?@![`jN1--bcXZqR"Y!<0o2KId'`R)rrIUYY*V2V2l&lRO4C^RrL.4%"h_DiX:r%AJ19L]OqsK-QeIjcGZPXaLEa;=5"!Q=QiGU9e(@>\6I2$-;Nj/bm!0DQ./,og(=sg>Of'uX#.Ga]"_V)1UTieYc4uf3]Z*Y(0*Zh%&eo$gejLeJX^E?\8os8C^0"gie1.!j0Xnp03kQre+@B)I:$fHp#Ac=pC]Epu41VXg_jkhT<Hf?a>(XDS-i.0&Ci5(m[bE7E4KX%C%7#I6Y]5BO]TAA:)\[k[!%.gg((1TPdcBR>fa3gp>r%Hod^'/:1\-:^TfZ]k)BYjd&Sn+2N`Fk91@iQR@E]^qS(VApL=dqM))HQq\%&^]TZ7o:"oR:AhuDq$RK04s:Q'Qpah9Z>'58L*<ahG0..2<&[u)MTl8b"(k'cP.;[i*C78'/V]88hJpu/#iZhP/mAmL[5/$.AA;U%fM[!sN&&2YLHVC(`64U8g\un;b53_"5NcDedlur&ru.rp53EpPF@fSA-?8Eo%SU!bZ7^PU;tVI1fY424Edb,qb/mgZ3i.?r<uRQs%5J6_/>8\4AQtD)<M7_3["#ISYB;`=A&"&K_Z4Fn_CO+,7;JkUf@#>iYVm?oQF:-H>b(V^T6SB7`5-PAjf/f/G!#hIsU/qM3b*:K"%:,cG^BXS+A(*,OpSnqL2BK<("ctj/a`GVVZ%*RLdCB0&Zmm0s(AnqCk=4q8M_aFs,75pHK<!?sD#1-gDV@([d%3W8ifiFa+P?l=D%i^U?i>fqiBnl,LV0BJBc(&l3Gq)!##46`Sh\pE^RQh')p^UY<QNjt<L@eK\ZQgu$NQ?A?`q=O-Z4R,g.8XFBqJ^K_>%,2l!dbrVE%l/g'+ofM;P.-\Eo#NrtkFg%F?K2=Ygfha`=qO,[<e\B_^CnB'pp\II]mZ'LN9(Q@RrMYh+'0l+q5Q+gb'PBcRI'9.P-Y)JZprI)(%p\O,)"dBI=ML5<OLWeT?V\;ualepfMrUaaN@Q'lpE3Go5d"M9HO1a)*YIZg3%3R_+qWSM][Yc)FYFfX"G&Ht7W4m;Eb<N5UX':dt%Du#N+cK3#8W6XB:p\JUchlsTdSY.IW6s/+&#ulZRqWYW'MCdtDn+DlCgFs$3^jH%PTkN?(\)4lJ>#7?D,4HrJp!\\*3RPNhqAUnn%7I"meqT2FUSQl'FgDQ$df1urFeQ`"5kE$[4YFkep,[\`9m(IlE\,&[lnu-p6oFnC4B5rNMrUb%$'.UMQ][or/UJ%XgFPhHD<0QO"%>Q'SrO3c>DY_i8PN]tF7]8uC`p\O+nnYW?I%.<f;h]gq![QX+d5:oO"^"%&a[.sgmoi%o.;sknPJ$5KY3A:.\8)ER0^Yd8m`Hgg`%IQY$gO'(9=5/'CI1t:sR4'i>\\,%+d+.mgc>5RrHh0]+o\r(F(,4uZEqJg3M)RoPdHgDF_MWs$`[ng#XiF\+5`t#f7:UOP]=+0kC%:%EZ0%Z^5LFg%E$'U5A;ML5<oN?IienJtP^.qm+sHi<#P`d?5umG-u^o>aUFYFc6HcE2PM&U9N6qWXf"8QW/An+G.*F:t=C8)ER0%TU<T5f/a_n9[/dn?GAkeQ?%kN\_#/l?[;:WIb20?qAkY\W-YY>^0uh.rtP5(ko5?q4,J=Al_h?=^T_3.ra%g<OQs=O8aN^Wme,%N%_YMjZ8ac7-UtA9,p%.D(lDIfkHbd=DqMTuP($GSjqWTRAb_EN5ji[b4dBV*/F[>[3;ouRJ_fd4H#'P^.ZCT>SBDobq7G4DoS!G%T%8M2!`Ho:MifZQTfT"1'k\4f.9JYLKQH&eIY..4JqP@(Gp+3#(C-Et%\A]`TR,NZF!/)WmqSuUda2<gCNrpI>(Tg4^anQG[rq,9L\%:\+?@m^YqR]QdW?aatoVIf`%.a-Ro@p%nef>)XCgq*+3k)V*Rpd?kA55d@pMo1_@("QMnN3pmRHp%OR3&=Y,rq+PX^-XXnc]R&<b%ihL^@7sobL%uK^AE'o!VT,kl%NUqV,=qq.?p%orDg62'QC>4_.f8f&@1'epZW3Xl\Z2;Onb$F*e50S+4?:QpJV>[rM&PGl?p?#kq%G54;+T:Nq'\'FSZhd-c20CO3Oc\3l.?OCK$HC(>[00COsfito7C>"FOAcTS'(Kc=V7XDUj_=aYj2(C"kfR15rOQ6a>mN024:4lZ*%&.i@K971#n\lPk9T>tEm)/I=dm(!Ha1.3QmcOm!^^IFIVDJ/;,cU\RHY1bj_f=saM.X(\Y"A2r=W_'iNMOeDs?h-\imMPE</X^YL%\Weh;F!en2,sr>I+"83gQT!IGD91iI3'+"Lp3KW@>ng`KS(EqITO2Imci)NK._EA_&(3@C2E7pdDk8I;p[:,$Pl?Y^4C-Ybh+`0V%hRjueGqtd0dfC)@WgcR<Cb%V.(43#Oh8J7Cj-'%p7b@./o8DFN+tu%Kj0sXWn_&X>SGiNfMNjj!qt.e9iJi_Q]rlG?q":;`*q!g\%ksJh*4c/M9N=Z<r[(rQkTDZ]c5e'EsB8abj>CUtq!%kF3EuhrS]#4j%&R;4rOpCVJ5(t($4a*CjM3"UjCHKeU;[nNn_"J[Xq$2,>%nDFs,bW[<Sjcj!I9o?KOLY8"V&oba`WZUHlFi.,NmK#<10'ZsFZ\8Vp,lS]U[r(WBR1WkOZ&&b$Q+X&P)f0=;a/q!c'uiM.2I`>@%mU0e!G6&C\p>UcB^:#au2`j$Nk$'NYo/I&ngFXQJq:.KOl2_%e)%h+-Lh->@Z$aO;]L6(SK`HODR2F0hmF"uhoHR5$m']1Tq-N?r%o%kn3qDR?Gb5@-r_3;mYbsLL!.Yd/e`U;ckE[g$V>(u6l]:'@%oh=r3gHmel_/%qoS<[iSE_X1/*.,BG+^sTAPeDBe5"$SJ&2cM(%YO)>1p:Y*jlntdqq".%]2K,8_8R9B;e,o/BNt10qn7`HN+LnDA4CEt/]R[oOk5b8MjGi(^I>Zh2KCuQjc1P[(#`9-DG3[Nlm$>5c%[lX2)o4uBVOfu-;l(0>CX]3ON>!Q06J;-@I7SkmBkYhrh8[H"Jqn'L>=#8!'H39LIi(hR5JVAUnmN"?j&PG5;lAogV/?G;e3U,`;%d4g,;"Og.8)@mW5(I(e9:A-_EAj&GHWDqZC"sM:o<5J=k!POWdo!?YW(beV@f=W2n6-lXY%Y%`R2'+@Re3bp_Is?]9OVC!L!h(:n%7'6TI[F:NT2,"&^_atV.#B.,qUpo;KHEQ\RI0;Er$5@5V$N_65r)0X1T1j=TZ[%E">u\Ra-%,$qPJc)qji3]1AtL)P3TEEsH\3Rf%$<!@EnWca2<k11f&&76e@cL-13's4;5[B+rpAQTXb[!uIK9o[4LVW]]+cH2Lc;<W*FTjRE:gb;/<nC^tj#K=/1Uc6=.0d-=Y:Hi&%Iu747Jo]h+>.GPJ%2!BN&(YNH^0M7U(?dCbkgAahVk"YL`WmM$'nc42UE7X^>#@ZZJI'>G.`nA;jr/ejq6N?[0;<A/H5sJI%U^k3%%tV(`68KH27HKM+cI#!G',;>L3sdALOWY05dY]JMET^Vt%$`>2H7%$!N,"Ui;$"Ys,Wl71b6SZ@cAJRI>.H_!-UB';8rF_.+pWL@%m`>H-g%sjL,4,V7TbpXRm^];`HCY3>T`j&Pgi_.gXX1MBQaU9(Piq1tqC;E=aRX#4+hc1I3g]E'H3p8tLBJ^pN#f&Tk.o53,)nW'%`Ofmg1ML3[jj,e\%*+$$gg2_f?R'<T;%BD$;5QN8c8aMONRC5.i4Hn<L-I)\2WLRn.l#V85FnJeV13?\bP<F1U`TkS^X?,VStIn)%hQeEJ3I@T-ZX=:43Gu*L_Q;REI)`U/'IIL7*DX:1$B\ZGjM<;cqrFg$i2-;p"!`W55T^EW5aZ;??oD#Gn\bYuRE^9&!Xke5DjuR'%p/":N+1ac5K""-bnk!8<8=%AF/ss=HLG[Bd\T#\$7)1UmIVqu98ns.#2>GH!!r2iMn-*W$U^]UMr`iq7U57f8isu?pJT6arWCiO=%qC=5E,4Ht*FZ_(g$pNhSU5r/]Hl:ZPJ?PIr">;jC'JX^<YK1bYig,MPbLiDo/p8*3p:?fl]!L/o8plU0_]*e+Zs^R`K($d0H<gZf%F5LF1!-FlT>b-QTSqf=MQ\em%O,-Q/@1M]4_<fWLdKI\^]$CtZqKa&="(Q6uc)2a('7K0m_%_/fUCqOM>@/FZ\cX#`*48hl+4CpI%=:I3W'J$]U#4@3uO[pi1dGg3D5?`A@kafPViH-0CjnMLaKq>=m08e7\n`a(/F;"`e?ERJ@_<_n6'F2pcQ'ubhH9^X<%)Z/c>)qr>%B#"K07"-d@LZV$$c^E7&T4t+_!2=NK<+@q:X7+^&Xm3%m^))7F0N<8Mpt0BAU%@S4fZpf3(G%FKhU$O?O2#\uE[lbET&:GJ>SQ+3%L+W!\c1344-)jSNFEo)r4bCV=gX#,4QT&h"f#h=Z%@2e"=460JgX3qU8>#kG!MKaT07/kHlXEi@6nbN6:imfmbdoHb^is;[kd.=9%&PSXc!fMO&q3(ieeaI2=,O6oLfQrKc2DiVN^gh7d4HFJ\?amuU1$lKP-T!ABcU)""IW>]^MPu`1\,B93Dm[`OhQH<:3()5L8N2T?%d+2>3JV[-V6+UKjj,pcdAq8>`AgQC(Aghp"PcKC1Z-;TMGt!5fNP<$q5Y!ST=BHg,^eN"DKE\BE6*#*'4X39OF@SMK%VMrD_L4U?%<hf*s<OB`'.Ke#?2ik2YSPe5B1/E=([I1<NJ_:8].SI;r$"K\ON1%")A@Q\ER#"Fj(j:9]A%*in]E.?fV)oNI5Ih,C,aCe1Je(e/%A`2_L2hVB_Tp=U\R:!8tCWjS">mDcZqF<QDCeh1fXQ!?b;_pp5;O71P1qaEY?[h:)b81L/EG^g99Vf\q'`fc:>WD+b"Db.Sk=!I+%5ZLpAK,Nlb1(%@2F&HjD<Z08NbDkL/.C,+n6pRq4dSu>IoaHV!?U[-MK!eW.#\S;ung.1=%^T8f"c>6Hg-0&g9)9]&p?b%cl7?+]%6k\eEF0"I[EI1bHFrFDE;Y2N)kNfB7<iO.!J/Hr%L".['QgJ,;rN<1^]0hVu;u'HI,Rt:`G5`H6hI$=!4+R+3.m[uuc!Pt)&_l:c%(>Iq$<KkK3rlpaTRIPW%laH/=9balA]ei.X(;&rh]I53p"KQGbLdr3`[j)29_3$`9dTbut?k(1G;0^LqS2DKe5h!^N7fU'iDhqkd%1Cs/`mY*gCc>s0.n-5&3.NA4PAD;PZ8<7_aU-%u-VSNK2Ph9J:d5DA]i,Y^PVNUo*_5.t(=jJ-\R[cMH-Z>_H0]QgDp/h,,FnBM5%85=UpnJj[G(4d[A,Ibh/]^_J2iGWAtio(oMV\CUJIn7=j?1]dpMJ[4i*geOdI_4[M^Kf+K_7A2;l,IFu>4<fY"N</rJI(s"gD<Y=%:d?9-lH_jD!dcme97k%W;'<]ePQ]aM4+RO\o!:CQX1%\X&BrokSK%t"oUUpDp^1>NJ+-_h!K;`'&n<,]akE0sT:Dr7OJ)1'5Po0\%o)WKb"k0R__(fs%DSd!:g6,>Xo^?\)pqVG)_@H*P>6Q8A4JiVjEMFid'*)up8(_qm#b86'0+T`P4c/+bS2d5RQluX44:DA<0/=;Y%Md78)BH@+-I:2N)jg=,X9XP[<,0dm'T;6jK::c\j,[:WUn;=k+#UrgrVI>um^6F4'3u^pD=7Q>nMLB1264#tXPhNI+:/'e4!&ltF%M8/MDo&V#gjj`?`9JKHg7)%.oV1sMA2N5_D7&BD*'98*Eb>Gf<js*L#SBtL9&_!\L3?HWeQ"tloVrTS!(6=mFF-jsX,(h!Z1GA8N%l!h:1K1L72-0;CaL*?,TK$R0_QqN@Xbk-JJ0p`4&B6+dDml:s/qGZ5U\%^u<<b*4C\4++oYRg:>q2j9K9=[rQ,LD=L1E13h^,2On%6i`"GaEULNq-a?[-Fbm*Mir;pY44>]43M9_d-PPGBM%*D??K)iHeD@cS3"V9*HLr1P2o((<14,mLeWa*db=ER.,b&PBg*?&BYieO%Td-XXb)h[B`eNC&R-"*jT0#9HP8MN_K!@j.Q,mUmQcXM"8TZS([MQAL_pdK#ZLD%DF\;NRSFeFjoL^poKcJ;P_95%$\qgr/i-]t7%BdZuElZVJM)uUU5EE32'H@<0jkr<UGR#)MNGEt6Q*N.k]jQWndkWS]\ap:12UYoV1Fm-/l:S]a8+B7Xrkmh.:K-(I^/N38WQ"JB6%I:P)%i'8ZB]oZ5Hb`EbX6in\>YNZj38tMhgXu_a@\,rK%]UG='idMAaZfI=3&Eq#j_>E:Qhl.8f@\LLOAO-:.hKe%^B2MQcMdUk)%3)T!)UWfkJ5)Wgs-`QOL=6FY-\0*]`QA^k?rrn,:9U'UOc7pPn67Dj/,-ZJ.l+dN49N8.H]>9>838)G`8*O(#LnY4OM^<596aDi)%Nd_`h4[^Qn*,0VbE`G_O4IrE0DaN6"ns6-[);d#<IS6AZ>`(#bEYV"(0Yi]T!UN>c;7RA8?B@a%o8%A^?[!l,GSg,rP$,(Lnq;h1%F-%Plb@T45%pgOZl/:Z)V$N,o'M_.G#0qu?/hq''EQG-GQI32P16btrKj`,F-ZL"FYZ1eR7k.q^/=JuslI/HAP>)CBWu+5[dMpeN%"mf=IHFa$Ja^IE=;Ti,InA16?MD.j^c%eY?Ke[%<O'Ib)FNMn)PKW]pIsnDI6Kqd3:].<R![WeMVr_"/(.+nVJm6`jm7ViM$jufH%re^!Xm9meDB0CMd%gnR9b"[4l7n"/!X!Bd^6N8Zs4pAp-#;Pb?=8s"jA1VUL8o+a.H;$lk(UD\KNDPL*1Ieth'%q2p]nfT2C(Qoc%8U7QV6uVtq2F&l$dPE=Xj38"HUQ8&Y3;DSJIBSA/Be!*t<hKG@_@sGmc@AGK[2Q+j\aFm-JD&M8Ws::MY,J#c!h=5r$B/?[8sHCV%r.R.6!W+1'PQ0\NhMM-SXWYs.q<i$,+1J2R)bTjBTL8Yn/M)@8h9g#9abm89(3*i?Ltge>Jr&AuL-7FMG`aQ.PhVP4E[$6Ia7WiO%SVSF(<?df%5)!]EFXsdLBUJ.2Lc;j#<B&`L]i::KJ'R>,QIDp+eFV');/8'fA@]CVEM]16dOCtU\n#;:2=L%\N>K0m^-Tb\5`lGQ%:e9j^<!)WlV$)+[k3[PJ[_rC!M9R?M_H`796iDGq'!hAL@/?A;--XI_ibp`AYYGBIaiI^ZXc>-&3%kTJ2GlQ[>f(K'T7!gnNjc_2%a>=/,08me2[/2aTPhDk1^Wg$#o7Brjl-1N8BJ)m-Qi5,SP['@V>:3<J2j`qO0iU7?1ZUmr(q6KTEPCd;1j9TM2[;49T+[rdbU:g#%26[6QTj::%!]4VT'(%OB3q?6Y7MO5h=/:%#.q&U91*M:4.Or,*UBI27g%Sia_/Qt=CZqZHd'$b0b.@P7+!5e0*C1"$pMCb>j4e.j%;Ng:Gh>K4>33+dVIGKW^KsW44/$;(2+84&uiEe(`;Ufe[CTESRs,+f3BO^BB3Q+?mRJ<#Tk0iWW*QWN0X;8aO6gholoPd66k?uo+%T:B/,4KG)\<a7Ar`lVl2UXrc89N#8e>^4`1@*0Rp]q=(:Frk/,f5hW5TP`QRTOm`C@D>2DZSb%/\%Ha^R6;19[mi[LZj@Iapm(l>%es@/![[!CJZ$'19c2Gab.DUNqk&$tr889rWUOBtGno9E5I3*534U(W>4qYjmO;rt)ZNuZL+mV=s1_4;\OLXsO](9jD#lUf;g?pR1%/tTaQG)&cV5f6"XR>Yiu8m[,bER`B?3h>9V`mRFSAFg+4ZW8$C-aF(aY'OJ^7'.`TP0?(2DK);%i^(6JZ:,"'A6fiHK<-+ks2_:0%.t"?W-Y!1#VjNgU01-B[SMb3.K]6c9"ge>/$Dfr;W3>2t9WfV4&^a5o1^07A.X;oEFPWWY]k.tm`oJ%ro@-%CE/Cdk]>42(?c;-T%&G<ss7s]Z;3,p;PFt62&E45^CMb;tWDSR@,MSh86eZ/t!%.X-N/dMHupG\IKq)"9+='!?9D;KL#?GI_ZI+0aEr,p*&Y,MVKPX:FF%Ps70Dp3AK6N(&HnR&WmB;%#Z1BMm`PoI-'Z&C_a:eP"(!%u%IQ8#oC+];#0-U\;!qYgmqg0ZqbN@Z._k'6F`m7enl`QC>f[nflIa%BM7*-Xs8r-`7:(`dS@7qH;lc;qLPXV+u5ZbjX95N4Q?,nE)G4?p`b/AY77<5f;QP/(rE<a1-i.TG)/<M6Jo"f/)jAPbpq,c"J&5P%aZ$F-SMVYP(=Z>*S\#4IYM!.%oohLF2I1rhTUI$=lV326PFng^[MV<N?G2$6rYpD`dc6N(!Fk6#^6@p]3Qk6Q#7"Ef-6_Y)(p'Fd%B+!b[U+"Pp)D1dR.b_utN!8HV:lbXnERhLs%^Dt\U`Gq$kd5UE,O-BbMEMkHBgTp:Csu@1a-oh@QC=fcF[?a62$2)B;("2o/9X`4%MT^CaVn=$_6M\-[GI%WJDF40k9dn@`1qlfONPk>]KuL;-KsK0'lK:1Xe<._aQ_0'+$<bI^+Vj=BJlB(qLq%-\i7gp`@9dk=p+u+@%<`7$+bM\19O?-8D7:M>JQ=+p3;W\T[_'\ZYs$-56]K;%@=nhmurXO+'M'qXjX1Qp,BY\!XAdF&;"Mtu]8Jjc:XF9e,kHc7q<)o*]%A93)YB>*WeCTj:a^>-JMkZb0T<->2.:I*ReOJ]VB^:=.+@WQ>LaTYdts(1dGDHV'$Zb'C:1q37^^?EH*+#eXqEdq[#3Sj\j&[sLJ%+m"dP)<Q&<G=UVpr:0EAkB-TF8+8.O0rNd@4,POi8"\7=G8.JtdbRdQl"K2haW.TJMKM@ImZ<=6gfrrj\8G)lIXGYO3SjZj3qt?)%bitSgljio`V'gKb-.0TL/*C?Nb:DaanHWA\J%hG"qVh7pF@SUCI4\b.hI@[W%<5,AqI/PrF\qf/de,+u(C9>:ja4n^'.emI&EOe/%XMM)I._u;O>G[fu#BtK&g>;VreY>j/b[(0fV7h'O\,V-*B:'oRYc\gP/Y(_WcGfT&emEm!G%V-ij<O;;48un5@kCZHI2A9aKgB$I%JU_\=5kDI'cecAeS9]2Ia#"rL([&8:BeJhTKUX=`-V+Z?q<nkRD0bs5c/n_"_,G6JkK=;O_-ZqMn1X>*/k#U7R/$XS)ns;(\F&%e%dS=@'=Ns=fIk!Fe=IBSL"mjQXE*I0HY"_E1r:>F.)u.T\7^hO;%suocSiun4;Kj/Yc$74=#>;;.E6YII?Z@O5kXXi0rWZW;!oG%c%Z2TK1a3=k"<sDa/?sf)s.-\@`>:#<3@F9][QBg;+`F&W>65rXMpE1ECh"rCGl>-SB3i$O7neYtRDn%S%^>lhn5OZMLaOn5:G%nS%%[W#r-L09plQZ(3mcEBL:F!IL@^hfc_hRn3@',,bVgZ\C<pG_L((I+a%1g`E%BUA0`G>c2^GH^%6D"Z`"%a8;TD(hGA]`I`D)tKQ[%E];X!YcmlgQ(Moag%KX^A)A@ZT=a%YRd8T'omAgr(HAhe7m5ZCLjop.b/S?]OE^6`mWmU*Z1!u;DZ@()qX3Xom?$]MU1WfD#8oD2%>7BAGVoIh`;qo#.qoecFjR*bhZaeGI\%3F=q$-`.gB,R=#Xbj)m>H%h#<tc5]kl8k\R-f2pu+0A6*@&ueG$^iBO@;0nQu!>IZ4!=%'7ZNlYQDRYlIs6"IkOQ99mZgKhtnepLRn=i,Y`]$f[9t%-$CW>k2#c[kllrGhK+>Fc.Qq^m=!QW^2nbXs5tj!,Qa%gXRau62#@TQ%*b\1FK<F$EEI*$,c!'l\)n1=sDJHYP%(B\q&/Kps!"ps.P:_fOK*.iQG(\Tk[_]U>;9/WGX'L/ULPP?,7CD$_%F3pBR,*B:E*o`j%A&uAkk5,=*4H$o2UNa6Df%SZn=*s?.@_kt*J!0ET#/!qW4o)bRln+/Ofu<d3;/b-I0#oOD0&J[-Mf/1!Ycd)km&M(dd`@?eag=KV%8n0i*&d)rpZWTq1n9<u#BacGI!GE^@(gqjq1%E#e?nqF-//rO)*ppsN/VtX?n&mPB=csV>5@*ihiO'bGdur:O`nu7rZL`bJ0$`>C%e#&Dp-9e^7rR6KA(_/Q]XN_luW[r<GVnmb(c+NoF`BlM0cHcQ#^X2nL_]3\9QF%Fu3Fq(PD7:R9nRLFJT8%?T$3'm%3tV3LB.s9I%?1[g_q7FU4<p?VhKF$M.^]+EiB)Fb,]`6oa%kI=XHZ\Eu0i3e=E'NEM/Nh2?_]R2i/W@`1CS?1&AThB'3KAge4dXj>YCBdbm<^Il%Q^.-%\BqtQ14.YHmC3qcpKV=nI<t2emH]O7f7Kr(2A8<hL%[Y7FE%K`QknEMm#tD7g//X>pKV=N*N+s2Tmb6up:8.P>\N#9R@Qfq%7pBZq:7k([6@GR+IrZ9a4]gT%(>@C6m#G]"<ET.<6@68.df27I'imO?4]fHq^=LT$CMo\#?1H3K)YWk@Z(tANPqTV\8)$/XDV\DK%d*6B^gsKanmH*M\SbErQGQ3ct)*>/srjb2*deJ[Rmn4JW1)N,-I!9]32KVVU%%Q5ZDHpZBap3r-LH4[QJ#q>;qJ[s,qS!'EGK,\;%GAb8Y9QT8g:RWRuS,V^'(&smVcgh[pm-@i'fW_Y>Vr@UMMcn;5jts<qEnI2ec)Y_a/U&heI7J:(gtm]JCGkL-Rq7=]rpf9;X]m_"%*r+XN_Tq>j(GEGT]!V=lVld!]^HPAa+W@Z/N>[TlWSHf+>2BG=pPj)E5PTQicYJSKheSnN1&Rhmd6@O*C_N!CoT$>#MmMhS/(_Il%7/q2,HHAcK2!MdLl_bWO^$;Y)Suq?GP7Ng]HYpaJ[%9M][!=cdUbG2o=e2T;2u4?r8_H`)#nE+bCP,Jk(aNt5?eB"QZnfJK,#>@o%IGmLQ8@%XS%gucnH1>k">_K<gpZZF>c/-#P;qSEBd`SC*YafkG?Mi7r#>%lBnQ<(/p(./%p#PnGIJ50CG:A:6IF"L_XhE%5_[FD2%Gl=[Z)]4QP_1$es?G0/mfS%ZU7lAro\*=Db?bTn'1i(@VAY'<JE(")*gr/k_h`"Jqb'i5($[%tc+!SN?53D+X&(cK9S)$_LmF_^X%[ak$%nR3h(pZNFrs3QqRGK[@nE+qDjYdg]Ps6AJ,-R%uoFU%Q5]=Rd\r^2f%)P;F3;@GuH/]"Z$)chH^gO=<+gqq#lLS;fTk95jj%X9f^/?DG9,O*5m]H=_UA.EKX!?jjqkJDH:a\7Y>+h#ELl,#.S8m+h/UlJ#N_^V19m`@jTo^Uiis"sZ)A_,[aE_=R'+R0V*HY&(6.%AVL$D/86afgkG"blc6%^]&5PW'fu[c3/G&Rs-_k]m'U1RLU"W%h*_/BL1.-aY/%C=g9FXq?W`/SmB->lZGY#2,>PW>QtH0>A*r[<%c0!U-%p.0W'VFo#Ipr@*f>1s%7F'H&?_/A=C%#2iGt=up_2U)AS3*UG4[&*a/O=:]GLih(X/ce9\*tZSe3<nY^WBsNH.*5A)TL=[%FD$DLq6s_IH56aCEoi4LgFlU^jioS?r/9AnPJ)$rEW,U0_n+B/1turJFm[W_hZ97^ZWgRIrUnnq]e.1@=/J'@,6^6IO*CM+h=*5@%k?i\=4Qr-;hD-?F;kLJ/J#Z;L3]bH:5,S1hgc/-1ceRMr9-Ql!oa*g%Yp=AfWBPB]rdTBD]Q!`8PA]@Of<*fJ]f6Xj7cN.@#qh7f%B7,J<*818$J&d6![qaN:l0Q*5pTq]%qge*IK<7.3B=5STG'A'u)f2$G/f/-Lj0ukM8L*R12HZo$dHkS"Pma^%K7t^L1r=.G2R<dX%6:$4:Cp9,Vrq%,?P_YTZ%G#@qZ#\*5B(rK-8WPtG;1+^g.jneY`RW@iV)'ck(X@tPSt1ZHp=NkH<?(:e@nAK0@-:9=Js>7bF,Pg2%+<Af5>Fd)=&1aLsDV#G5WQSc&OF/-p\bZ60c]W#Ld`7^r*EPce,OD+@Ye(E![kAN"mFH*XIVcPNm%,M%ft#Qh;]/leB#i4YGIQRj%#F7s*g-7f`/,&8abE*N_[9+cl20?pN!QX*Od\D_^ic7*h^qaH'-*5aL/+u$"oj"kj[iR]5N1OXdPg-j-14uE>A^B4)<rk9OXF&OT%M>d=,MKR8!43]>upT?unhJ$lt\9Bg1ohJY,_3lP'qo6+3GR6@qS^9%`mJ\R$hR-8T:M$B"o5JXC-hl3hLX/EXP\P1Zg:e0NAZqZ>%jhb+IXcDg0L'_quFr?qL+kKN&p7G]9?tMC[_p>QUroi1]3525'6&,2abhPF(^7Lt1rHK3C?+0Yjj.@ZJk=>"?'38rn$aK4bbj+qJ%r_5TAnX[Or^E?^nlrM!+7So33`b*;*Ju]<dZE)U%g@R%_j$F8H\V384.XA=6f)AdUODB9f5;f$K`bt1Q-d?f6TCY-(YEV[?`@`_m%`UIuH?&`S,3IL9390%W1gtCD2.>N5?R9!08H%"4ceCIU-kF"?6/`r/E1Y]?&SNYX!4BZ![B@lb311[dN2h,fW&jFW.UiGWaS+=cW%(P/S(5HTrB+_6LD,O=@*$_-I#L@("?)A:58cQ8M9.[dUoLRqiZ)fkbtHZPs1@<_/8#JhK$=M?cM6bg:/HGnd)^3n4[IFfXSj6*'&%63-]t6urThG\kf$r,]^#A3Ok,7sVhjqmE!\p@?P=[_ntLc0l0MDu7r$V46GT6QJ1N;UsnFZOO\m`=C#qYcH^0qQX\4^&7T"iq+:O%pfgZ#Qm:3)`\FH"&!7A>8>nQlQB/8ThQ#:3YP@c4hbLH.j7EfOmi3P?iR%bBFLBYRW)C6d%<hcl%Cd*%O.3YN>^ZSBEKf4bgHYLR%jLsm2IG_cq(3dkB?YXdV\jrFE5eKb8K=U0bV-lEQoe,b:h[=mVrp29?fDS5)'\"7L/p/6M%D;1Fq,gA5(S:Zjqlp7,%j$+@0`E[p%Z3&=U3_8SY#I=IQFEMQj3)+sNXq$1dL#Xolm^YA\gDOgQkm/?l@]D\Z^p"/I02-P.;rF7H;kZ5SRK?p[fGqjE\7a_D]ZY;_!r'&)%qKr8,(N>&pD$o(^IJ<7-MV5`?A4)^cjU,AF&pXE(bu!pdV1U*nTNklp`>#h[-1Dj8;!gLIIK`0oDo.",/?H82Ila!cpr9Sb`+Rq6%q#=t_nT)[R6gZPNe!\+t`5<Yf97-([/8Kn[qb2BlFi(].UMcm35/TEib^nYaV9k98Y-]\e483J?Kb2uU@GS'q)s0Fo3:*8]?M%>r%\N%e/>W_9/@!*,]X3U\J,nf,8kSq^G_%4]V?M*]lYZ"a^N%9Wq(/JfDs4D\7'C@lT1V:o$IiiQ]R_f.dS?G;qh`X-`Rc2Kf.NE0I%E;t@o7S:_+B"3=TKd3FXg4ft3WO-hg6CUc)IZ!=0-aibLkbljQR=3?Li6sPc+/:^2b"h0^"8r(>*`fs8d)6CKJhsPIi\S<_B"7ku%Tq7/_DU!/#'gp'S380h['Q_+AcG%gZL?Hn?oE323&/j/MgHF5"c#CQe^;raLp<T/#>VeJYMV9u'5<lPS:&ZVD%#[7mNj*+t>;9r#%r;:^qm":mBGKdW3qW`Y+6(`GsL4"RB_#'eVlR(u5'7(Qgd)5<Vqk0iM]4Tq,rS[RG6bMu_4/!bO66,\?r+52UERrk1/t:V3"$18X%$+$EpD>A4F%:<NBEkJ`jg>!0>XcI+<#Ko%V[1-IcAs%ilVGPFe?dU[CSDEuQco&/9\T9F,;H7@RG39Y=/hUrkSE>!g3qh91fE1$C%^&2?;5P"1/80au.s"dRLT93#&b6D2<*."FQ_hEH<qaFR>h;.kdDg0H4^AU_p=8up/'Lk^hIee>Fk\@_WlHpoFCL,Jq<@E1nlE<9'%j*U^bj^-?b_1/a#(9R#-MWcPNdr)WJIX_.Bs6Gd[(Q1:Eh1T\WP4jdMlBSCf#>$'g0l+$2Eho;Z+=U=73QXQb(a>Y$EN_[VdJ$cM%'=X>pFRVTE\fN+_426%5RW%!iQcuL[(1>1kSXX&-Q:;\22FsjZLI7ArndchOHaoBj.q@)n:&Bo7[i\n^Vp@MGg-#jIZK9g7$YusC%U!IgFN+(EMC;F_MAI$Xr^0a#2NFhV>_bZWCDjruH.`Y&@!rET]6D$4(l"cX`:U50(3i9*O>M+O0?uYoN:aQ&QN5fegqQ0)Zgr"4/%6bP8/=ZCigcANndLVrPWhqAQSf!o)C3;i7-=L`1_3d`-k@GL=GXQb3#`o1a0'Wo9.2%K(j-/q)"p>7Rmh6_4Dba:(<.^O!HjURk$%'AWmpG5Z7`2r>4r@Z-ZL6'f+n[+HC#XUi&,e"1Ib!Iu2sj-i1#/_N1t,qA0T^HO^9h#-9]NDS'B&"K5.OqVN>K6?E1ZZGDiJatl]%^^%5<RB1C%oYeE=oYc6Gd%./]Ch;>j:Q*IlGgq_Y1HY*/_0\7u%\,*>mbsa?!nAj0A)CB7hcJdt2HH5M4RO66CUjIeMoWM`GqCtJ%fX9r\2HDP4;e)b7pMF-0J!\SFoP8O6lkA/raPR/Lqu"INXlecXqs,W7qcr[<p)Vbc%=Vu/'YA$jI9%2lPi8fagDX_G%@C?6lUUc?%rqiVH1IWBJJfD7;a?kRHioV"5B4kParH&oLl.h!FS;fU^Sqh?4?u'S6?u'S-J+f^5[NVucoYbrXlRTH]i2>e_eq07#2o"2+3N"qp%%'`7IaDodWW@]*dVc[1bqTh_mL<ABDIiLg'k867GI2*6aVmQH40NagP5CS-ADHc<b$gr#eHZ>Kc)rUl:XQLALA,GUjRi^=0[URg#%L$Zm0"oGAt6"%Gb,MYBZ&?A:rRpKFmK9C"oo-mFZkI>-rk)61&[g"^jm[qI0[pkA/f)Ah)jBYX.LH/D(@:?\'?Fuas'=]iVSp(R6%GM&hgc;(2l4*lbB6gq)&If8Ttfi_g"@UFi,//ZX9>_I1'UF[8,YZq=fl6@nuc*1G0[s6s;UD]AUdZ2e3g6f@4P>ka=.cZf$I]XBE%c<o8u&+p<3nNJ?:N+Q0E.Ol>Vhfa'M\L?kXEU;H)mCgQr^'dD+Ss0UP:OW!-n.MibQSY`7=70o&nb7a\+V-$GY[H!b/f8H@qY#Va%e]r".e#,k<.XhlfXBp!\HS-+gf^&'G2j]7ZX8fh[n*cU<7+Gm$/6qm&a1FEO)BFM^G!b5a1ch(04LsuZ)BFN[H;DUZ?&^0^fi)Oe%hE'F9p'NY$ofZf"ODu*)M!m!%O#t&sZZ.8/e6iaZn56T3`RNb(T>Ke?m\+s:W7lS_LKk_"q&etYMN4[LJ3!@R5)-jVfR7Z+d+VWi%$=AK@g5WUCrVX[7*CuY>@?#.dll*?/\Gt:Y>Hhht[CDQlo.TeU2T*:O$Z[a<m$Rs0$]ZBuq]!/o*+r_kZ%MK7RAiWq"M$ZC@&=\[%e(ir>Ui;6P$$&R3+GF$Qqt#47_kh=ESmgU_0oP>H%E>^N<TWl?r79-dq3+a`m#6)VqCdWW#BOeFSM6,1%jm7"B%mW5VL:/Ehgu:n%5!Ys6=#Ok['=OM>dC5+ArakP*[9#9#DXP%9:&FkY?e8\i-$(8YG;X44TBX[opPea^oAt4Fe?t.&n+esoEn:'@_/gg"K&K#XDme9Q%r]-+gNIJ,-gVIN@fm<55o='@uhP0a]f(n'/F!?g;_p@5khHm^:=SoXA2k%E<`JXE5bhHSI@UYbpQeAje3om/?QoTPEq:i!?@QjN9%Cl/DQ[gr!^B&+6gOIK^5hduLuYn";nQHFlN@1p%g]">4nTH1r5(2)GZr$XX]e%TcVoWRut5>'j`DD?nF0.jkdCnCWJaZl!cIt&#$%!(TcbQs2]JmbnCH!PfU@#MM=gO1iH's0LmcI<\i]'6s-@raVfC$ETo<mSNe;c<an4Apaj:4oF5JVQ`G/_0-@Hnuoa>n]`de?=3q[%#rk2,PsZ<haeE]0miHrI4Fl5]qYB`:=8.b\5Id!f&6=.<[=3(3df:46*P$Xg2`D2=G<(LP_Q01B0Xl:IQ%W(>5hrn]ho(&QPo8_+%Hd(^)<m!=$0pWg:V?-MH\1j3gj/)iuM^MRt35%,.PkI&%*-p!5W+!/Z%B8CA1a%`0NiA32O*e#cM1)O%B[]/HRrCJ_i-VU_q4@Vb%"mT]%EDh)B-aIFdN\-;iTPjd("2[t2@5GK]pKn>aBCjAE?,BqI]^QkAr&iiTE3Xg5fAJia`UH#!-K!TSC$+g[BH=ao$D-?baDHhC%1ThPq<NWd*K?KRO+N@Ik^eSG;^1(sWgLf5./is5<g?`G,6S:I>8k(V+E=]GCZuBd'I>&i/Io`.[!^W3mLHbNE&dYd56EHMqQimKj%pi`tr5UDa+01#R+a3pPP:kr;+9(-fuqm*+'.#;#re@t:K98#F(""Z_YEWIZ>J2j6Nfu8.qTmbV3:&8/mY.5;8b5GA5W;el@R7+2,%rLbJb8'b>p8Gg1E@WJcJMa=M!<"O7"<Z_2;iEmCpO9`^1iH]VKG-8g+]R'9Qbg$O&T/N$HC<dp9Y<oM"eSo.Q`O2opjQ),fNjOY$%hQQU]eE\,oR1Jqe=E;Nmb.%E5Sr)9!Qd+7U's(I1r:+-&e_3dM_):3LSb'aZH1gl(k:c<>It@J)QXOJ(.6m$gZnGJ*>\UCp/%^@_%Zm@pc]_Z.Z#_/';IWc+ehT>dC?S7,+K\a$Nf*$MSYZA'T'nHk,9VTQ)T0H\/lb9nr'(=MAD%L\gNGkqHKFJu_4koZ9qt%#VrV8BW%Ll1%k%b3f(-CDh9C^s+e0^:akiAs/iIee8'<LJC$p'Q_<ENe;QQC3g"0Jf/XnGU3h't+**bAS;b)K5DMi3P*$c8")R/6qmeF`@Mt%bGghtmICoT_1t\IDjoVh>egjKF-F$FNVCWFG'W9"`N[/rUrm"][l,%1*H>^.2Sk-\2`LMEPCL9UpF4oCE=?miG6nas3mLM2CLr_T%mlPT3%d/c%T0K69ftG/b`qAAW[C:'-mN$*$b$NHU@[459'j\X/"J\us2-+^&3ZO_sK%@AO"qPo>I#6`&T)G#<"udHl]fs\.!>jR4%Q37.Drs!`X[&<'JWN-j!%p.)Q5PS"Ri?e?<NK*Q85PB>KRJq0WAFK't"2`e/<`5'fr11=#Y%<+(hKf"<3ip-#:pI1lQ[K\Kf2r!-%q^*<Z=jk/gk[EmrVUp8<\dtuM&$$?o'Z\mQ#H_ir(-hZYeD8IMPe.kgU0N=6UJL^'LZ)fG0G&?pM;>]?i15R139J#++)W3)i7La?%k!]k6H@0=?j5p*c4I,^-0[XY8)*_Fjngi9<+2Rnti;!'DkMOaga\7hoO?KOO:&\Kq%*m1*4_l]G2d65c]m=DW?a%*2'&fb]pWNO)%MJ'epMEcKqJaBur%IJ#Ena;h(cgrWg<r,%n[b2ao/_K6+?2DP-IhqhdE[<RS>_.sd!I\l(ho[b=htK@Wc/mT5i^s-hp+:A,eu"aX%"`,E#jQ@'0kKm-n6\E&l074+bM;bT7lTOJ$mQJ2Ca"VW8DOq/=-c=d=GkL(MJ'\`$k+4XV(BXNZrhQh8Fqo`F^Z%j's!Ko0I3/`Q%laOYa`4meO'nFTkegc/[J+%l2j&<JTiA3+&=T.'@pYUD3%TP%::bR$n=hX%uZZGfY]?@DLKek3H)KSHBB^-GtU1X;]&r[CYhHe)W%PeZ+l(1f1>]sF;r"TJ/73WDL;f),9JlPojg)u%+]J+NL(k<Il'q/Lk#mbHU;jVu3%r:p-Wl_!(Iq<?0(qKM8ohnFPaoC:`6Zh#-&%+'cL!A*g\]r:]mN2tLg)9'H%f=iFF%6P@#_Ca$et[XOjWhsGf@s2)s]hj[t*b-:WGh79b/B&e[DF,LF,(Z1cj=MFBO>$1[^:]I=/%^TT;lIQdR9@I<c`XbARUm5>G[o@ZHJ=cKJXO,"7,c_#K&rGVG:D-i.j)$J2;??gU<mF.VqS%#7J(WW*<5HeGoqf2A&CS-*)gk7Q7%lPD0\pat9NRB\i-8GAVoKeKh(o_R0QOa+7;p7H!Lr.k=J&X9s)%_ggpps6L)1RIJls/f']>?LmrrPaIH++O2'G.X;Q@$cUVRE[qN%9<!]m_a(rFs6sg:-\&Yq9>Br,17,`2iEI!?@IQg:oB"d8/qJ^hUA8[YN.,FjUu/AYLVVS(K@qiF\)*&!;YK$r]sMmIrc!$,HTGab%JhM#EA_-aVH1,hEqKhjj/5gt;2g[ZFRjU>MnorsI>g4@f7=!nYklLG#?bhH2VqKq'*ch-q"+AHE50^MX[c-22pXf/BY(l*]/u7@9%E@-B6^TQLsEc6.b4s]18p"oWO\ch'no,8)\`L$8lbJuTLBpVVt04V3cbDios99DC*J%<0tfKJ(R>Q4Td+2dc`(q2V\@JTmlmIf*I%I0/LD;kt(b7$OrORo2'QT?$g,)HWbA_rT6"cM(&tr/L2!r+TNOmGgPh%^b(U>_h7.n\<fQ6hgbM^-.YjYMQs/Z_o#Vm'tjK]=/di%!Zq*$6IVQGcp<l54;,*k&h\8^^5%9"7WpT%o3?n(oHs4"pRn_C=]enBoM_TU3@2;*8u:FT:nqh)^AR0<.QZq.,mpV9s-G+f^2s,E%i]f+&?c>>+^!e(o623*_LEGl<p4pnHVc4kYpFu)Ph-17OcGlK;rXCg(l&@pZcE;oS@T].!9b..&=V^RVa8^gH*umB;0mhcpi4\E2%lh$<XiPTd)Tn2ZQCEl!1MrFMMe+Bh]_1IuF*i1$qp6C,^n6?ILau_-O%:QX7lXd^R@XujAEHD1Jo-3J-?]-=5]#*o67LM2m=2[Kc%@?LL=-CFIU?dE2Z6&WS-mf'u;>jY>drHt#@ep^cI?XiEKCZ6X@YF`<>.kaCojO3[Y9onD/IJ;R:9A@_W`K+5q5@=24-'+*TCZK]k%Y:lc>B\n-gDhsa)o]Y.CIYg:UZKYt7]!3eLr-m7H4a.+C@`Dd8XYn0[JL5M$C_lD<s'5KJH;pMcH#CN@OdZ9oT<g':#I37bST!Eb%k\lAL?U'&.QCl$bo3M:3\_li3DDppsq%!Dn9=T/u'$:a_L&P3-r-@D#D[50*qu$-+"UP+_rYYX=]QEBE$l-Bkrs.HLo"Yhge&C5+%lN4``6Mq"u02G?hL%4d:]^6s=e+`W_hESZ:rAYUC=o4"Vm)nn$0Ra:oo'-!pIm*GUC%]&ee+GM*ZH]$(I@g?=*T/DRKWQm<p`fX)%?\GUYmd`ek<&C7E\<&>ZPL&q;?%TC0?%TW+jf=GL5GO-e)+&EWi7?`E,1%W<3L*m%93;/h4&6AhgA2dAJT&[*[dbR":\*n2&@[K%%Dee+aGBaGJYGTk\6:*$-"MP-\WF8"ppj;%)]Ek.5r:2+=KV_bJmf0jg4'5h3Y2\I:KbqQ@Xd[\P0<m'7@YP]7`H-KbQ%Qh>q#[V)%q]YkiZec;;CPVfrBq(RQ1IqB^l[.L>U$&'0CMY!P1PD?L\N+E"1Aei%gu:8"@VpCF]6h;>HYm>3nYe*\oH%U]D3($N[7.19-A>N;%c^-%DK7&OK)1G>mq;]n$k`asO?=(3I^;Q-P'tceH;Z;OomNp'cQSRA7iSKnSdF(Yrhl#5pbBM^MXqp2;XJGG_IC/2*iHa$>[,lS6%1UXLd^=C4S^!>Em^+XKgM!]S"4_nP_]Akh^DBR`Se4VVgr>JhB1UhV=YL+ET1P@Y55DB(0h6td<\F$3eiA5kqf\>Bh>1r5;-h=??%U0TkUB+Rl"p8EtN?*CXAogI[*f4\e7gk:\\FBe!dgbuLI9CWlRfC\^tQam#7VHN#(E,kT_PYKW4Fe?9a52np!UN^A)k<#m!p<7Zb%QQCSlVlLLJ#l0nN@n7`#n+&h"hh8WZSCiS3BYSg>*^9Pn-HuF;Yc#d=It@4IB:Egb.6.?pCX'm9r.gPHX`*Uli[b#W>0]5eYPA^p%q&eI"pcVi#:4G6ElGaq<LHE[m-T'Sihn<QC24rkl>N]Pg4(n+KHo_X"iZ2?0][OenLj"MYp^uu5Uf[0Qg#C1SjR1(=Gg`Wg#$USY%B6_@B.W,X^[IndeDo5S"SKF=TTJsXQg^T&6ZG/PO@VDV)qC2`>B\ft"*mX>1.C.LXpCA%CX\I!b.$sW=fs2RY#+3I#MFT8P`Qd`,%R;QEM_-FHJ:m/E/Islb9/7tDZ>CQAfs4+jNi?e?q'$hY<_CIfV%gb;$=\9@\k?m[f(>Xo17t7=As)B(pHZAKH?h?W+GJ*58MSI?p%&-eP2]dg-bc(3d=<EcL3gBa=rH<".N$I>%P>-D,keZ.8_c+%*QjaUX-4#aVS6)<\q5/,;E899]I??u&&hlfkspdY;]b+#kiIb]AI%het^)RJHW-NW26<YFFZK43k<`mgj_@G@/THKlcG%o),Y_LcjS)r;#6P5C`S)cbD]Yr;>IDB0gicHhZKYXnf<pn_E=,giN'[rmN^M%rRq0Gb7M(-mQ]\%\RtiHs8PUh2>>Z$ci(Cd]k[j7N:Y<*mG-oOpd]63I"_0iRE"+ZIgl8TO+<7_fY>RYqh(C;++MP)omZnTk3[KL%cek=D@d!.Vdq8S:][Qg>e(ODkSaWXc+)Em]IitR.a7Z,F]D:9n#@8A$)`.0KH)MHj5+J,)Q^6eVr>`^uE4,XeB]_5rGR$Mss)#[$%b7AN/I!knTJ&UFQs8Mum^ZkOKSA4q#2;c6J`D>b`lg)(^?TDF3f/Kg_n*Qu\[,E*$gU@)';e(QB0#M9#=uZC[q.h#_s0AMi^HECJ%A)E72j"sL0gYcZ,N;oMaoO#QULe23q"$Xc.pDkK,1TXgD?__Xr*W7ki0FHJNY$7NQr/<&"1\bP13Q4))IW^Xa]%f"!<L27gp?TEl%"K%gU\l]Wlh4;0!fO#s`d."r[mBk^Zkn:k<s3B:TCi-Lr>(7Cs,r+rB'n80"0S2!1BKab1;CRH'&69Bd^$AU<Le>d2MWki(Xh1jC%\^E".=&cB%@GR<J.htVbMK4SplWkkQ8WATG'fE/+!IC!+9T#8Q2+ah>?/[ULV'7=k8BN@'[to3JV';m>;6?R?].!+C(2fgC.[%)p%l4i@7L+-<2=!Z<HW`N.1*FX+R-tZ<"+;j:0U()E;1/9Nu@XP41718`[a\7S['][q9="&JA.Ba$"/!BI?_A2Ij/!;ZFC),jb6rUHW%Y=QecastQC$/=NBU[JoI.B6=2D\IQHC:tgj?;Z?Lr8VFSMPQc:S>(DC0Lb<r7n&Dp)AVAg7TZs$Y=NDkeBgb//)da:.$??C15bX>%,B%WjX-cpBX^HOgkfRC,=@%%\kWI7K1J4AX7'?mR)OdD6%YJ-n`=.XoD8@!ieLQf'MAd5kgVQe$],tueV(sK7;Ucs@fANSc<s7V"%8Jstm[a5cVc7>&m("Fe6KeZN_m[R:A<KpK_(T%G6,,n=7]qTntYYpV5TVt.R_tl&$Xk5X&3CPqs'n78>0Ii_Xn3GCt]HVm2.1RW]%Q!l)0lWF)<.)9M(I@<d)<E-#t<`-ROZpfoIMPR>J3^rjfcke:a/!B04eLRY,T>okn0FisY'K%;][tCPkWEt^O;q.`oh\`Fo,W.#c%;UjbTAjqWM)G,3C:gT9K=`;K/N)q99'\+\U[uGD\itY-g79N(4p%#dXc]lJ5kQK9@_RGAB?K.65(^)QA_RG;@:,4iG35mkrp_e-5%,OpYe7R^%/nu\UUOa*^uCsrXsP`c)Zl:T#DasbC\b.!+77KSIC>")R_q0s+M(f2L..B6=2D\9rN`X`7geLRY$e0*=65`sQh.&SK&%hN(QsP['CQ78gj:'QY.A^T3Wi-S6pG[B6'*B6Wp%Uh"7!TQP4G$8&>s'Ul),Y/7aW43!NqTkS\OY[QW^/,=B!hm^)6`V9F"Gm1lX%?9g_*C&?md!1a8h'(E$%R*g1F!(.&$'(G:dR*50*"IoUb"FSDWKHQ@R,*PElomS='pnX#pAA<bhNeCI_V=6OB'\5$\a_9%7ctLdM%1fakhZgsV/n/(VMrK(A,08rgQF=#:*TTanE'Q&<(]HE;B,(i:2_^K,.?4_pVLm*X!+,a9iT9'=hPfP6bh_\#H."FkhINjpWrikjK%6ZK[d:H.D"r\lKB@XdUiQA<HDXZYG>f#>;Hfb1M%kTo)9m5G!]?4]X\O^972fC"PM4\0+Fa<2)PgQ"T3Lm,n.OV&AQo0WOP&su;,%s42VtebqV*"MBfur_NU7"8Nc-6=1c@TTt'-`JYV%(Be1n@O:#`ojUPUV\0'q,go8[?T5robR4L:,r/#%=RV.mEP@Y"]Ae5<HPc9.%5B.7tO2^pi4Q$1o`C.oXh'@XdnahGInNr(W@5Rehn<4$,(l9)dp`I2m^PE[/dRqGM`3+=GhZ_@uTIU'CK:Cl$pCc[_TU13/\N:rK%^`WY*!C*#n`Rf8G)'q%1A/'#45;a"n,S:p:15u]RJPnh-84nWC5fj7GE%IDX0s+j+J<joN,-2og+CmG>P`k55+[]D*PX-`p8nLnY%$tOqK>l">hU7@sJU3nb1b%i[\C/i]Y.,P`?<!6bN8U3a$??%S^2Ms5H0nSpITdd-t=!Z6%`[]!;"^>4:YEV_YQqf@kJ7XZJ@"BN$%?;WJ2"\KYm!_$!^;)3q28fj'LAlR!QQr,OmL]rZHVNPY)#RckP(^3OR(raPr(+<`Bb-\:F>"-O5Q>,`4;bU^eOd&jFVl4Lh:;rLf%MPPPeonn>$<dm.ZAl-\o(uHBhnk(m\35LQ2)*K40P*m"?.E8iP@RadB,:Tf%$5+E`,m.5A8BN>QL9<cj"&Y^^asp#<Y<[*HHZtA3%'[mAc$t-oV,^M`bJrnqA:eJS26ADX..771VNe/,`1Fd!oGr14!WC^!LoMAF+UkTW9^am<).Rm9);+=FMHMQF"@Tp`Q_8oS):b9gC%KGImlcoOU='sdG,4Khgs?Qo:RM'4IEBm-GZY/4X]95'b7/*pAH1!Wd4;h^blm%i=K&Vh:jRgNcG@16WP9k1:bXC)nF.PrXc/"!GI%0pksS?%qYqCfb%n)`%!DoG+g<YX=-;D5`Y"BW//<_R^'^Ts7K5/*'eU7n*:JA)qd$.c_jH8?%]Hf7m%9Ou*p%<(O>Z3H:$$]gAtU%Y_1FflUhURAjXtJXfu)b`UK;B1tu*a^;>V$>+pUWRSYh".*a7O6Y\rOgo.`f_I6QKcmD1V'lq`u_r.!1'^IX$RL4s=2PFinXfuYr%`F)oDfa;LFXKA]DF;(*T]*d:o=:DnYg/'eJ&7IXsaoED0ALPe_V^SGk)1XM<#2hb/e>Oc5J-2X,+b:i9Z&o_OUlJ>%,=uK(MDC&E%MJA&o&faQA<K%ZO'bM`g,h!'s;bSQJ8nRDn,K"5g87iF<.o7K;K5,"?MXkVY86Q-b;DPT`MPPWh.$>@j.&1RN88==;jP*(bZj;P^%+FQUR7T$lo'M44UN+8ioMJ<mV.a#5X,5i&e8QeK)MXi?oS6NhhX.Xc-onr$'CrnpdLS/0[%2;CE,/sc+P*(;Q"0!9;4RTiP=;$f?%-:(<LcI=a`A.=Q?!feR87%=RJP*#dR(6UTZj4cng[+NGZ>MI4a)^pm?D4sX,Ch0m^'M3G)lIX9+'hS(U)AM;f6CG4E'hLDS3CWbp%:aRd2HE<c/7?*1nekMR>kS6Z`P(NAZP4D3_M#p+D7SuWP7KfMj=HaJa%**oC.4aCUTL_\0jB>ZP'i^NTZf"Y(1+!5u?QPO'XObI[%*%65\-kRg.>+h,=.8V9I.V_qID\?V.U6-T[:a@niWqB)\bX?8YQjsg%)+BtdY09<+MPOEE[>ONLU<H#AXeMnkXJ39MIjlk1l4hc!%WfNQ;Kd*K^:_2^f;22G1X;BPD!LnZG0"B2/?lPOD@I@F,WPudLP2Di-A+&NjO)mN,_OT91luRkdXtMu;TBYDY1ZU1*\sko,gRS:o%`HV-&I#^ZXi-iYk]bVE=P-lu*LTH1\AS4`)9UD;=;J'I8Qd;alq)clNSVI=%'T_XU@C,d&RuM0+crbp)Od"_/X%@#Eg!uld\6KC$%pJOgiVm0Q;3/0(4KaeY61kqe#>]LHu)KQh7EI92aE7EgA5tmOo,mdIeS.1Ag,Xp(Jq32Y-@:&Ba;c9-.cs+bmPW0&W=,=)VPW0U/%R8F;?EH]9uGtNq"UWp+*,">-TPS@b#o^8Q_35FMY`3_K868oM*ip;KelmXY!hE6Hr;JI1B+Te0sj(udOMB<GZj5=\UG;5r7JO#h4%'BH5^06BgK"3Ij%TSlMqV9+9&YG3>di>9>X]S4=XfPaT\*(V6j.Ab2'n)7).XH*r^8sTQ&"H-0hS98+rNMM4fO?rr$;W^50/1/V-%;[=PdPVrbELk/La*!fu+5cJf_jM9.\@?_7"=GijF3=tDV>Cm9UJWP_T1*t>!1rSMhe*'%&=U$=;%\sk)F-j,.Rnp#*emV`a8u;]I%?FhKma"/[5%]$<uS5SW;U@1<#31htklnIt!@87h6Th/0X*=1UF8Qg0Yd=l`M$gY5MZOWdm3(CH$+>ijc,@S+3R.BQ.$:@n;YQKH*%C&GK7UZfS,;3ma^9lQ]0m,/GY53:IKKJt,eg49t7PF-%hLY/7Kf.KVahP=sLOO,m]q0"[![&/44&?p^^`a+\cmmB*Z+GFolP]^W\%9UG><5b]pd,nR[Fb.S0\^p)Pp+_2amm(4CZ)kZ]i/D9hs#%!D\K+?k^krT2Aa%Z<s/S3ml5Zc5S@lcX\U\u=oPoLIfi7Ag.$9&&u%irpV"e<H"!O,XI\(68*@'Up?/j96uU4-Z!8'&NMMQPZIMr$aET82a'eJKYUUA`j6=Oi3oF%2:3T0*l_bjlZf`bbtA$&;GGW-poXY%"%aN)duf`rplqR:]c]0X+bmZfjm#8`I^;4Hpoo_QH9pcW;ncQL@U#ah]dV-(`a1Wp:C2AeN'.iNlih*n:FUWV)!4c>?4c,P8kF@q%ME`Sem6ulW$9q+D@Z.,5]dUk+V?Gm7OOElt'YZUUn-'7;dj^!sP"BgU-1M_=ak.ZfON84Q4tDc#DrY@lTb2"$$jh>J0mJ`'\>0^L%OL'd2"V^cLLcHX1&XOrf[ILm$3JC*#WIj,klBri-a>erI`h=#_U7h/"\Vs0b,*S=t6,ASm:biNG7)_Y'-i+-$Zot*/(@Gs5p+)BG%OlBVpCbd=I"$,15BZ-$b.=X\5ABSNYh'q`p:r7'K-md=kVGdo#r<9%6pVt-9Td;I.RN3k/hVCNIXK/QXZ1r"L7)2,,':ER'*#4;:%JO7iH,Y:T9'O&P`U81B/jCJ1[PTD50f1E*HY\f)2.kE"S$;Ik8_KHY0'*a/fftP>s'fI<I(<TGsLC-$i&ebP)VFd],0d?r$`A!EN%BLJ"=<QM.+@R=M+;+dP/'ME.oKnbG<6IW$8Y\f*5"@JkselGmW@Dh`K:q@"e<QIpt+lQ6GRd1\I-k7@!6Bdp<S?$Tggb6$3O^j(b%.jQGc$;IjjAgn`tBXS^YLf+inbu@eD@82GmfB"Ao.qDj-XWfJC0j@3.KZ(B`KXloOOMmQC]TU3YLtPZ=jrn=e8XtR'/LGHY@^_`D%H&1-o''CFlEM-GYk98OkkHUP2BOM+oi`VY&BOTeL%UT[O&1pR")Uq5c]/WpU*(1_I_>%c4K*Z80r7ND@7iGNO%\fL@=tAPO`3'Ck%SDB9XfS,,qKI?r-"#IQ#%3\B.364AO^k:Lm+`=+'oR(L("0lWd-3b?D?/oV(`#4@O`"F"M"o$GYG\mL;&H,OcAt>HC#T?I`3<QNB%#(Hs%5OA=#MM>8uIg?sBjc2m$4p5`@@64B&.K9r9SEt=r@:sm-jAPt#B`,OK@ajh=nde#*PD61!_*-m%G)"Th3<-5S,9.U_`V`)"%kgu^0_p1r_p;-Q[S`+]^bWc5a5;-@?Y3!&>c9DH67j/!U)HusqjMS,XN)B-hBXk@!abQP9(S^!.Y&.mlOHU2@UPhU`LS3$h:!&0`%i@4gT+*K=D9':mR5gZH@;=YlD3+_756dW^0!2gli6;=%L&%f9F72&EZ"H@#KP^3U=]W!@M&/8kMP^!HPh<6T`Y_1mKIBpA@#DE+r%CcMpBp$!J%ijsC$Ln]ViBnrA?2g!!bD%VsA]6:sl"9uR^BFtf_3),:`L2b?YAP-2t(N)iMO$>L5)hNgFAt3]D)Qk?+[NT>V;cC+J%BXiB,fnMe^=@:ZeJgP+LJjqsKAK-4jr<?gP"tcEX'1kh&P\UOCh-6+Z(c;(7[)#8udM:sY4#H`W]#5)'4&N.(B^sbHR>+#DgW=5)%NnDiAdkHa"=[Uc;CI6^/fo=8PL1]Knb8H'^qopPPcueLc;fpHpl17d/U$ofFbND;0k4\S#i7u3s]6]]ifVE.(k9'P5'&D93J_7?b%^N'fnA,'3Q=bocc%Ln+s7t+31&gBGYECl&:&FG]O1,0Bg5HOAT+j6LAndt3<dS_?&,/Vu_=uk[g_AFIJ7WL,U*@H5Pa';"oo!1>i%,ME`r[5f0<'SC6Pjs._[L),1c,8%pVFH%^s&Y`q5$#iTB'O9GTXMcf5U8q$$c*?BH*+^I#g4=#ujX,RKbAri<#]V^!Q5%l&*u!BL%jX7pTN^cs3Ta2S0:R%U[Yr#]tjX`jI9Zn?[kq8`)7F:&2$"YSQpagkPb#ALtH2u)fKQ1`(%4G9i'F`'%[\BV6cu.!-KTI(SDKEfA%BJ_K<S41e<$;4N[etn[%H&J?cqc[G\s8%tlB]IE4M2Mp/@g/QlTAPmE#[6Tk.<Q4HA+UF5nfhahj&>fKFYld]L.'Jd.4$["7R'gF%@>*PUFVkc^4WAd+9cWkCd[)#3UJ<Hh14k+MI7t>tJh`N&@UBsn`FQt"BQJD<j*]f'(XBj=`XlgAf)QI&6_(:AF-sjF8ks+0_7/'E%0s/hRo3"gu#d[6M6;,ZrI0o'oL8i[Y0A\#kLJ45m(]nUI;/KdIPN2S\TG_:P`8^BNEu[R*XlK#?`QQDLNZn$an(SN!!H-2*%,nZ:%?Z/K:S*%%na.Ud,)%qdM1M8fSXhe([M8a*]B0D!*)h#:PYo)0Pbf:99UL.M)/<50=q_861-J"OnbM/Qe(mOMnPlDSPDt25l)3@."%=_"aoE?ib\$sK/+Eunl=gA*91&uOX[4&@9"NT8&1'/D!2b>9f:B[dYD)_u)e2.l@b`>Oe(_q%49OeB[#2<7/[_]H'8@JGZ>]Z?bR%X<H6#^i@>EY2bU/I!Wa/a=,u%)DVlm8'6r&>/M6`$0g"r0!X%6EMd9n3n=pJj@TV&IXs%tM@T^4Q3<0c.HO2,/Y#9*P!Or<2J5\f%D4&X)-A0b,=XG@FCEY&[B\3kED_c'P?CP'^67@%UBH];hC@Sl4raa@qSnBk1nTfu15*`E%UP@rS)4S"O@\]`(b,F9EQq]$:`#<0A%N5Z!lCNT0rrc?a"([jR)=1EM@3F:b*NTYPGMmo8#f!otZ\SROh\"1]C\Tll>Cm>AdR>Ylbjhd#?ZE,K-"2JVL>R#`MVQ^IoQ8jSP%!4'6d/d7=_:15l-/8km=!H?a,QNP>"VQ_1.Q8XFC!OAdU/dd]:9lX;9cC;\V!1YsdAHB*L.4u$j,u/Go!7%+odK!G8'Gh"qZDY2p%5aFUQ"Tl"-.4u3oV,2/oJ1QV9b62?i<*UgobG=,q!Eh/m(CS<iWOQ1uQ;GO("1"FH/fB`s<H6E:/?=ZO#%WQj>W<kLXQ%Y/S6En.%"1$]3/fp*#=)n%d/A$cI#\<1">XBRVYMp`-0u8_t#\4fR>XO$?XLO!MQ=Im6"L9:'Xs9$>=`Ga=/Bs&f$"TH)>YQ>6[GlK6=frK?%'ZcH>\>DNWD8fKY38FqB$=rs5>ZW%@\DkX4S8j7J"gX@CXt>as>]Fn;/EmN-$ZOB+f,)MkY.2>6Q?C/(#-tTdXtl+#?#cEd/FeTJ%%:kl.>\ejgYIN.KQ@$U$#.!;?XuDGR?ZF&9/H(HA%V."j>]kR<Ydis`QA!5"#I6`KXuqeW@WCdd//=)D%raQF=!,NSZ+0cu(t-fU%m>9n_/?V8MLOOL)&GPs\_`U,D=h8+A&j[N6Z,S=I135=)T[@m#'-$(U>`U!U(6uhW=.`B<EM.)--'#PDW_&9_rhq;t*B6?ClOq.@%*c'!JULD4fZ.-Ld3^FbcZ%d8<GkVYM'UBef6PbB8m4q]j#fkoN;LjmU\KM?p`aRc?U"B'eM^8`$i>iX^Lr2=PC)hDn!T1\$=).Y4%WZWDO;6b_#BK'ngPm2D!(3l[<#7],QJK5IW&6`PJ;];t".h1jDF?r*pUZ)GD)^a-tSMCt!@4G\.[)?Et:1Xie`[oC2W0BTARDah;%AM.Rk.#GiGKZY/</WgO.JS&u%fSm_.PY)i"/WljfU0lDHa[fAd/gu-;iT#b%)[J$XU^\2W;+W#^"3oq(EJecSKd0GEDbt-,Pd,h"%'atW5099ZS$7-i])4TVN!`\;);t/-.R%ltQ6;(/'VFbN>Kl&>V>@Ff#J^Bd\7i2t).'tV3R5WE60@Mc4=4k7(@M+8[)_12N@>>2J%`=Sbuhq-s@CDi&a=CJH_K$Z>9<S4:f@W@'+U[e[W;_42)-o<K<+>h?3$JST`>lGP.Ao370'fHb#.$ROd+eN@Fi<5j2a`oA.+I%H*%=#3QkKAqUmLLh/,bph(@866t>S:]*E4'("5_I?XOTh1PC.gSkT>[F,N9SG>=el5a&ZQM*L[M@@o=<$:Z6ITaP@Cll)AJY]UYHWG/%m47Or>bG>P6"l^0("Og$,8Xf;2!mKg@LPSe[RMmjOD,6fgA1c;J'uOOYq1P$YspZbmU?nH;lhp(iqDD^n<B4_T_'":$Ambhp70cd%Y=cZYq&2bC3L`VM<b6?t5HXBHo$:LNT!M)_I]iHDa(TUM#FA(QBA4AoEBfOtO>Ro0biIPGXK3pGc6Qt6d7\+bjmRACbC&egXN+r_%VhXe/2]UBC[*P-n-FoZB@Znbl#pCfA586@1J\D7@(EaLs0U0?q!F.9KJh$jL!@Io,q<*>p7YseO_3MQ9-kUJQk<b#eI5qU',"<bG%+sB.A*t"[+J1Uf//E]?%/5&<2!hBHT$(tE](Bi/ZA<7(OZ#W,Q:*NFW(opHL.$7@NUI7G55!Kas,_0Q$c4BfT3#&9[noRg%N^<Id%[,pOhH$Uu:`uoa^'S)H6-NURrkCPsFM=_EHgMmi1M$t"7,_A[V\KDG2O\m==D4D[T@$8<)!k;de!dT`G+U?(sS-8I#k<`Ms$D<Xa%#0_-S+BB[e+rDS$677mj,+V+USsKfdkp8)UA6A;Y,B:G]kI]`$N.NEcPin+Hq4g%o6f5Eceie)J7*%0S$RJ,gi?T7s(l9)dTMmfd%"O]o\8gLp"o0WP#''Mpfh8)\H-.%uD07b;/l/Y/3$kdLl^gK_d#\91@-kZ73iepSFR3XNoKT3d$;F51$c4m%P&;r0$-.=?@'hjEN%B?+$b<Y/:C(kF<(P3<%r.g"bVKi0[Y@KseZ<$kP6U7@sJU+e3%.$>J`2(8kWX+_`G1A;QATVAtU4#VsNMD9]K>Ap3+VA5%i$sIrb%V.;X+FGdp(EMd.5\54I$.r%lpL49P!;GL(a;'BVC*KQ'q'f-1$_o7<RRAj`<Z<J__0b$C[DK]h1@haR3iCmr#eLIS!'IMWPMPR>J%3^o_s[nn@#/#lZM0]ZidK45&(%"c=&_a9KE'?mBl1uK-Aa\7S['SFE[UlauP:]s4QgJ#F;DkT_E.&p8]L3O(p;H?Xq;'F)O*I!D*%'[m@87!OW"8b@TO"G("867E3g#c@rej^uX`Qr,T5@aNt4.$C#E7Fp-YZ,N5cD6oX>'P.ti'\0@Qn(fIj<K%Y$g11R[17_f6`Lp!b%;u1W^/=Bg!(nE5m8I^PtMSeRnTh&ote>Oc(c"7;D@RFN2bm3<cjT*bIEl:;[#I=`Q'+5Be9W;W"/4;S@G=S6,93M&%_%R1W!mH.,%:TSC;4@B8"f>.k'Ms6Z"24e`LH'6CU2L)-O@f8U5p'n=E>'QX6I>Fu/eg+05R:338dCe-ER(5E.Zt3IZ-;8Hsg:"uf=NC___+%!t%X=#b`<QGD\gZ3`*+09<>M2$G_(>Nln4Cgr=9p,n8[[D%K?*O<djDJ*[b9l6T\R7^59Ck\bM_;U)J[L^d\skgd(6V"<#8T.:ksQJl%[69"\ZGB^+E,-R8/8/_-Ca/&pp-L*.d)\XM-<LY4R:psk'.dg57r=*RP1(%<Yb7,<KhS_ZCK(HId)[Y+-<T"?r8#Ht$OZ^*a96:j%bdL/A=@fTjGO:2\^,N@6g<T8-75e8pU9?eM@,X*%1bgl-;JtT6ZG;&](8##k<6#cgBS$DAY8G5d],j+A0fK])4*&"=VGB,+0eq1D%-puI,6S^f#O\AtSOV8Ke2D.d^UoQgW=O>-*:JP$HAM2Mff[PAk#n'pt64BE.R=Wj5OKG3n!i'Ul9X(tcXA1[iJejgYR:&=C"ZJ]A%)hLbfTM`a&-<M3#6[+^t(6l)eZ^Bgs5loST8u>Sq\9=9cZmU%6D'R+'$Q#-jHa:GA`e)c-ZG;2A9_MFUCm-J2>%$;Y,Qf;p@'*-f%5$;9egZVL"OSU&>^Hu9c-)W6t`hrBok^J6BP$QK!IYD*n*6[DlKcW6\?LkgbI[`Hpk^A.+*u0ukETeN<p/dW%=k4c'3tOf8BJdIB%:.\.i=T<?7+-.GHi9DI9D03RF4ijl@SY`4.cU-(L4cD!qK/qu6!t,J;ABH27Cm2"G\mQ]BNRiE!_)@=V(O9C-QTJNKVmK$bYH\JD%l''GX>d2m&)=2qa*bAm("l#]Z,'dQ8S"-S@Jd$MY^`&C'H:,F!kXPg>?kCBZgQ3KmM'dXdo"I#Mob"m@D74?g\R.^%#ru&6s4U4)%js'OM-o<\%s(`HJ[AX3qBh3h!^MQW>iu<j1Y9Ba>n@jXq)^<],$6!d:8)@=okc$u,<uC+oJ[6T,O4T<&Y9?93n@jW.UA-K,5onj3%jF%367j5m7VDM*oj""ejV(%?-+-%>Z"0jb4a'];YKakOEO`<SeZG*d#IPT=I)Ubc>.hH.3gui3sN<rg6r?gP!r?gOVU5S_HcmWNZ%g0[,hk@(a4L86QJ/1170)]%!DZF\&3dptFd45+%-+c?ML?pT_(br#+uL$c;3JBc+4m!rq#*a,fO(,U34>%3tD<e?eT'_^?\'J;ce%=CX*5WK[3:,iI'sUAGZ^G2i4P,d.uo?U:I"D0!CG,X9MI-N@l.0M@i3YFtF[GDW0O:%H&N7TKW^^Oeq(;Y%R,Xf2+/;@o$b2Nm+=%Fqo&4JjqpUEk_g\B8p%LI?4Q>*@J9"O97CSA-6Z]bH=X)=E]+]`);a_H!l7oL<_]^Cu/tA>Lil_$J@0d`O@2<`A]\poICiL8BS=f%#Acs0`9S+"YX*4Z0M"pooGNJ,m(icC"N(:1aX54\2abGkB"/]iMJ:i+IVm-d:ac!Qcs#!SnAPnAG/&Vuh#b,oK/TsR/DZKMIgm;V%EMnbl+)]6RL:+tZO%CBpd&8t69k)4)6S@#aiK$_dfVmbSk^j7Ia6+bWW#cQcoQH<$2JT/n2ec+0U1p%66\IqCccH#&Zj<Au[87K+%f&&+?U6i753)Y?D1all=mP>@/,%PZK966ouX0GRBe(F7q.$AV.)F[>ZrN:huWC]rc&Q`J7CJq6m/>CIu3-N9uAQ06^Y/PBPZm)B%%magC-,ci2kLo6rM2*7+$7<Z'S8oTSuMMs*lUU<oDKl5I.Ojp$PV^QYl(5enW7?*0CUDGac-:LXdRNt>)eNsi^Guc`?-jopQKd*Ks%;6?Qr&W:/"C8"2@.]QEH-R*>B;9]dm@q9q$Tt')daTs+1;[]F4S;=8O.CDuEAlQu&ibE-sc&Q@_Oj0hY;F]3hLfu3Y+qn^gTEV`"%,UHrZCd0M9@-0!S8QeJb7A9**;`[?iMWtn0L=8JO<3N5d;.qd<'M1;R3CTXX1fHk4NJ\Vh22V)HRnF,X:h2+/PVU7uVUA/#YspX9%(.oW\@lnCu8>[,\/`LU5,qY@EkQK:i(`W<BZf>@']cqb7PsbRbE@dMD1$BT/'M6D;,C;lf,rdgk-29,LAQ%$RW(BnJ'.jnaO[h6,%N2"ZB=t#PK("Fc@h4^6G'kJ+k("J/n*;`&178ggnH4eP7:M?WHQm4[Z$`/daZ6Q_Q,io_?r)nanfa4)rj[#Dt'oE"2VDsY;q*6a4%pp3hJd6O3[A4io$<`,und.pfmP-Tu1'SVRn6BP6NW*W?boZWOc;1kSI7A7W*:aG-:2(As(SV88e8Pt\Gd*\6qnoGS(TZG<E.HohD%'M002[>I9UB;%l=.`s4j3&e2(i7ffC-.*$n(BjRl$`,*Q5n&W9T4Xr[_)TCn`LoH%:a@nJC/PcB1(0qSfTTGd-,k>W9JMD[MDC&U%+(h3;W`>9`'`'Hj78f\N3^ob21/iKfonr#L2$c8^].FCZ;GL(a(ou;#R46S\`X^0Y.IC.%Y%0s]-3*EN(tg:iT\54[L'74Q3K@Dj%6Ge*F)Fs?ic;G-1s0Q`$B:lT=9kKaXrESlhNmf?^M8\oTZL8<UhJlElJNek&OsFUOFh$M&SOHG"(;5*=<rS*a\CgflCVk,`q4O4<%C4[20A@eH#QV83[*Kum*4d1SmYYJ]A`5k#C8.$:]2JA%3PaUSXjtu3W7UF5(;W+Li8V?*'/0kP-Y7dT%=@/7BQ)9PIk0.%D\.Q'Z%dU5sEk-'HFGUt^E%SP9i'f,Jb6=P=I-"iR@_&-G>ZSWN6AZ$j8b.IFdjL$i>YfY[dVMh!"\h2D!k3TQ6(]hi#Qgfk$$BXH!F>4'=%SkB@g\G0BY_WVYqn']iJnB.8fL:;J@mj258+m_A;mRr0g[`j58/6@M$ODuat_&c:S-K#Cq-8<[11*<C0#<k4(NMT/WHSGtBGHi+9%948QirKtUMZPh6MYTgD`R_8W835:GM(UdkOXl\6#BeZjt9pqlTT+#S)"pZuQ0bYaZn]J0q'-n7*+dt1rL2o%r-:mog]7bl\YKW^I%NIN(-6&T*F:LIiYCst5.G0)X:&7Q#ZUF&A\Vte\-_GUhG#4[IV];B<,-=XliBrUd1A^bU9+.G.tXtd.te$S_7B+s]]]L_,;"DO69%f;:;#/!Fo#(eR\:k9`ai189!AE2=IrDh8\,/,M7SZHEa'+G?5<4e*WP'39To/DT=QiWLFu7-rqjL@-d>Ee8s2_ID/^]pp4uE'`.$%BhW?8m,eG%CWJ7h`#k9cSKPm5RQ[3rGM?Y0Vr8=ap2tu:a4C[W?A"HYbhEG%Ca&05/0q$#Q3]Q7NM.;**#$lCFu>:NV.6C,)e,^X%OQ(%SKX[$U(`On#4UpNjAWG)'MWW&X(b!$A]06TOJ_b_9qdb8*T-2(DSt2L-Pd#CfYktbg3dFK;@TUbpcpI$Y3RMk]@`fMA5gqFg%o9fp7(bYMS2UFcW-4($#)&@.4[Y#>n!`9jn3+cQGaK[<RPGSb!8V*',P<IE'g/,)1k"<Vs`@*2?Eq<e_[#/Rc_'D9&LusT>W2*#1%.ZQj,V'``JEIGjG/iX_<98uJ?L'fq?82?4fR]EZq_R^(I#1?Dulr[\o$;3k:;G1gGr$=.5W?jH:@+rg>;^"kh1l<PgBrPgP<MZaY%A2#Sm8TkiSX,n"uc8>q2Q^VO`$9M3h$4)ueAmL+5'fLf$F(MG7@tbm;8Km(ke)VcG2PQL@-g"077a2[3O\+"IKo:#SXfuYrD(@/?%;bKik[_d2&Q7T&4VV/]#p(]Jh<HD`MO@+^A'M4V@;U_F?jB*SI\lrj3S1<T!+j%TiBl%6128uk`2:j7h>\]]b't16K'PK*Vc.WM?%.r5VTk=Sf!]*d4?15;Do7<?0%#/sFN]$r"g'^$qc"ep'T<9..)`sPDhf2C)aUffUkQC@3['k.hmY*fW4.]fVRmCN3@D1udVUfA\.%@LXtL-!P1hD^&\->&Hs`fX0M"bctluM<qK]]dXh0dumY8aJLhmA<KZF:<=gjM7Pja*Z8P*-IXe?)-KMMNTN(+b*mln%EU./.D$&'%)VJ[2(BmEc=g)!)F;2VN/h[`nm$+XdR:]Zpe0i]rFS0Y5'25a;==!]R+a8"GlVDu_OCa:Bf_LUK.4WEYoZ$[dP%?PI-:[I's/n7_%Doa]WR=Vul1(+tIn]LO=lg:/%2atn@Utnn3+j2F4a5M=a>@p5`*<%MMRYB6LS;"7a(/ib'[a)&/OI?s:$eRBGWFtj5O`)"5b;(ZT%I?Re*bsGSN^BaUI+mFn)L#e^48R=C'+Qk:$CpddcG/X+=#7So2OJ#%/E[5ZrY25:3Q]07#,TTsY,O[0/;_^9E3Mg)-MWBH0k/]Oj%M,EmiPB.MHXO&M;6`M.thHA4FU`mj&C"PKT>#m0ifi/cK]X*t0[@<\mOQOJ=:auB,E,erP>k5@dEu*2pU(NN8ZgEhhAYhB]5d^^9%2;>"!hUsao)V#-?f5*Mo>@W&C2AMQDk:A%FDB4ORFS,lJaFP16Z]GBF'j`=95)cJ.YD^nt]4@%uqhoj.D(9MF^=eT57DHbTabd1_%PW2`hAm8G5hG'TpOCj4G3:b:F``69k1E2L\Lc(#8<ufn*6V8,?+NZML)L8.#2VZXfmj@(28D_4qP)Q_a>e]&h`n<7#H:Z%Yd',8-%)eWBq.ogDU%B3]FlKo5-2-.?-ZCSF"/:V,dRmZ1;LC03WAB`WXn4WDP7#kIcfk+/E-dsX%7HBFTdk':Rr9=tZn$stZRq>#s-h`P\%RtY1+c,Cp4Q?t6)c9gDZm>[XBd'(k"Pao),-Z`kIL'"H:hh/SJ+b^eh!T]d\ajF(ueI\5H?ZOIZ^m:QDjIV(g&k7&k57<N(H4l<h%[^GAV,6'2Vo!lE6NT<@*XR)R5oR,q2a?L&.dij!H")5<rOFn<b#OKH!#An7UKgbql4MTX\XNgat@$)SP.lq@m6_F:_@*mit9``Ua%bWW@)3a/@ls(iXD(0P:d=$iZE1=*7EAN-#i6)2KX3"h]1E0"\)%?;A'R4&ErEZC'U[%MD1g54H?\O+D-gU:Y?,SP$a*`6aJD/%7V%9scVI`t9MbB\S8+#MWq*L/FaWUGW]D/%3ioM(^.oBt_M;)/0OAP*1qC(.6/HMr_rhE&Q-rd49qgP*a`ZDFWui26#iGT@Q"$("l@j%VDEN]ZIG=oK!WQsCBjWW*$%`U(,jZgNOf]Ye/EG/lt1uUe#1g\paB-67mjECH,,,g>19CM0d_c9Sj>^q)#!1lU7i>hc1F)[Tf-$O%)R@\t(k!acAj[OJ5EhcVAg8="1s&R03d(_%Tb\j!FNb_JBus1e3]rAX</<at%;CXOFXlIj?<T]2!ng-Q!GErr93te3.9_nI[)OGj%CR8/'"2o(\K7<"EV)=Pc=34*N/2`sYV1kQuH#ADUP51-OZk.^^Sm,`0R`Ha-X_H81j:[AHT]DpQ/bY=K9,iK1dtAXG>Xis3/Gk+B%9l&I)oqoZJ^"Op?loJtr9=:8A9l!Xt5BbME2Ao+]@]=C10o73;You'.C$D%IgpEqQ#15?6C^+_iCLS*Fr3W-9RjL.1:!:9t4).(I%OmNd>ZQ"#9Jj>(H/BE_?g>o1iL.^Ct(r+"&Fn4!"%Tb#JXl4L^H>3o0X-9U8E54NFC-h1T*F0"%;?J^XX;.@Ca]3*bhh^X!2&s/%%Y$/`:lf>''4BtR_>%<`/HHK@f;;"qW)W#^U(3XhsVq,fd4*bQMa0:c*eteIkm&;j)^eLt8_dVomW\(Vl=>_)T:;0oL_<b^82&st<%k$#Y7m:<CX*5YGTgJVOIWl)*\eo2<bR;>MJZ.Q+`Tlps+MmEoXor(V-)f=(#=0gPW'sM5W9e0VnDOX\BP2S<G;R#7@XaqeID-@$7%[bJ.n7`O2IH'PJ?.J50YD^kF<bdT%sMX7f$pF7&";t:Z+E%1O=/@[/%.[b6SmM4Do;sG)8EDu""ZJqb2X(94E\Q<=^9rV49OIL9o%OsN%5?R8Wgb.^KVgm!8QN4CA>.p6pl$<AqFVAu[JcSZIK&`ZQdjN]VcoiUeJVJN?pcqOgLaeMKH=imG.P-U6D2s"TsT5I9F8l"3,%R?bFr.6/ohF]3Hao'<1FXQ8#.q,thGRhE)kCR6f`P&$C^[$#2`j_,stDG&>LcJ=_]Q+X^X9e3bu;k@%\n"rLTjPWb#>04[O;RM[G%f>P/B@^kt4A.pU\!R\iT4T`5HDG-&+/rSK4,7puife\`7]\,*FbG)FMeWuu=oE8\tDtX<E;m4$U/Md!2:VSN?g!Un``a4:c>KPNe%4o>(,AkUIa5)\+*U;CaGS7?oLiPjM]nBIPQI290N$DhUZ@ae_SDt]^eZ^<=-kLf'h4m1Ja>ADPZRm$Z$n=)T<f^bLpkLfErCLm=e%SpbGQc(8umrQV_nA$J&#rRZ!$=#'d=R`efLp1sd_[:lj'R*(\1^q#UfI$UuK37k#ANMPutc+p0A=Obt79]P<lbS"/qM'Xa3g\*$@%&-Z^P_`V$ooj[N#D:0hkRB"D-0N-Dg%2sC(6OM>+dP7)Q'SoF$EVNWV;OB?kM+_"Z@$3Dr1(VkEW+9.0a=Wo4P&cEu'h*$!>_ucl%_f;g>(G<*`-;Cc3)D3ndZ?&"W9SFee0PK+,Z[Xsdg5JapB$!K3CUV+6$>V.C\VWsRZX&:P.kJ5g922`[`o?KO]u?g+cod@H=(,Bg%FVRrI101WaK#pB=8X>g^^i<U!C5cH=\L('+(!P/]N'uf3>@H7ngK%Es+d\X0D2%@,/@gm99s]8%m40`uP&kK=YX?Fii/,.h\OQ#J%;U__JY[`A5QZB'>G,hcFKdF3KVQjL=e.g)tj]j%^EiEd(<7nXrP'aah1i"VCXg$3lS1E"->Ul3.'\=jqr61ua\Nt4&Kd0rGXuSq^%$L'#cq3t#OZX\][.P1Cc922_6lWe1f9n)811DSJ?=ArYMpKVI%D(D]iYiL9d29g:Z[]?XnK?gm=_Y+_QYHWYbS0gaJWG0p`=Jr6a%aVgXbg?P-^dA80!PfY)>ZopS#-Ym$8O#1B?L'[pp%1Ded&Db/;#=M+-043`f*pIj6>-dt%p"_t6=iiE>5A?`"hTlpDl52\4SDX-n%YKT8JQ3[7+nhmb<SMf?ZC3C@afidt<fie,4*oLKL]V=`n?G-7!06r'aZep/8j82!=@=QW5>MU:Q]q,,OjPJ12C3"7U;TN5o"bh(;%lQq9?h,7/'+L+4BR(JGQ:1?t.:1K[&:eD'72)o:]h:nbO6#pn1Op&n?SP)G)7Y=0__7a+]$>VM2-&1jT;@:G->j<TcBroc#qR9*h%J\;6m%:Y>a.4NVXctO%I'QRp;i2FIhK-<aY'GNGS/3::6U$mZ-+<r$S+j<^&V,fpbKN\gn32DcAAi8.R%#s&=Uqg;h]`um.SP+S>%#7V.]`!jsi;P;LsW52m(/d6r')Oi",T'f8r:Nn7Q(jW]6#sI+@e4W)9Xi<'bTTg.(2/"k'8I)fUBs?&oVa8Ne-m]&j)B:RnXS:^V%;,1%b:mc*]9;A@R6&h>M1kS[5X3.7a6#q.8Op&n[SP)G)7Y=0_kjC&L"h#>V)@Z'%;G^JnYteclm`qY8A%fg,NM4V/PQWmXb\7K&%hPI$`;1kVJ0jc&i-4N]gS.s%&DkTaeXknbD.Vr5:(Q'Qo$J?ma,RtNGX`.<\<cOKb+>h2_MX)c4V@3`)P!apC.O7cY$dD[R=(,Bg%7FS`m1cnajWPYCo>A/m?e$m[<)bo4D@Oe1QO@G@GqA,MH>=I6QM5G3b8[>CY?%p4eJO78m!MO59YHUBJ`T.&nC"?9d=(+Jm5bX,O%Eib@t+u+X6BUYG:8Z$F"F^iLIVXHi+("-&P9HYaj[_fHf[]QcIqA,N3D2%@,/=O;,VV/]#p(]KQ^'eMNO@+^A'T&]*TkVq(Eib@9%qA,MFV[>Fa82PbX)O\<nVH>U%(E+V2#YhY&_R:0po*C#H=^,<OKakQqL!iuBY!R;h%+tbMd9Nlb6#i8b+>h2#`OQ>2q#lC0.WVVP%@td>"\'QrnBpMHM6F1-ea/8;l1DSJ?=ArY_FnnV_$JAHNX%5'q$VchU,.e2=VXHk;("l[0^-Z9]J^?58<*3410pb.=RN3pF=CEqX%T[5#pPAQ%jhp;AF^dGPKpjpPSdl6mWpHW4@H,&=ld,$hErJ&YS@4gR9n-3D5a.*5+#?bZ[q[GH"qOB8,LBKFh7CRpZm(OY;\*5-r%4()1d,`=H^^Oq"Qm:Tu.#(J;\]J56CS@bpPQY]!s&q6@2aNTe'&W%f9an6Z*Y]S-9![m]tOm<r[WgHN(Y&?"dU-4$4hd@o[s"_.!%_(NkH`t@(2AW0mO_=C0),.PA']#h_,8>N#><H`cqUF)NHc:Q;LnpH(hP(*u6I"PRbI$;tL%17N-Ed`QlP!0&[^<P<i@=XNkSIFE6%CS\s@L2YH&99\<rGTFo!g_-+SIq8<Yf-:%jaRTcYH0<9>%3@qnplal'GSs@DE(D&6N^/rDm?fU.)Lp\*f^OFD9qH9"q"jVNNb$$m%caTTGAE`fC@n[nUcaOdU))/Y9K81%uDpe5p;RJd`I=m:Bn^%j*fTDXBR>GZ+,@S(sOlICfNipM=3DN@]cZa=f-=8`qm-%m0GAo_)%'d2*eB_2dFc43T?Eb(ZX\tW.Z..iF[8K(ipQtss<DtZil-I4Va[(QZh^4V1r#W@6="5,#_D;-t"CiIGe!&JbBLfh]P6?7FZ)fmsK%]g6.p3G&JG7Lj##HO&.L?![)LkKaHTHj_M_RmM02el>gR@<I*e?/Iutlr7C@'b4d+GHR(o>A/m?f6<pV$>V,mWN`K1%C5;(BUZ;c%Zmn&VY4"]@0iN7D$Vc?\dJ#4,:%f<B:]Wn+ILAlVY/6q3>A0JU0iYT2$S>mM'UfN,ZMe!@MC&//ckK+Wn3SoG(A$C:(@i4JXf\gE%Kl&=kG%j:lXKA^4L$_hBO\ObfelUM<_Y,IBa<kl"Bm-GZ:.,fL"th`,Nf"fF<0<0uKdMGRBET-/N%1P6>UUo=7dr`#.]S:oE1psN%XcR3Z(7JiXd$5X1645E=6IV&uG(^5tZfh]3RV)F(4&f>SKF:M\Y/7aWMk9E))_:8W@E/_5SoCB;G1%pe_M'>sNpI'*1fIgWKf(@X%aI[@EBst.J<^e1b5:JG6FqqG96^[3H0/O]ANNR4Da;?89_M-Q66%_o91"d9o1sM$qG-%q3$844VY%:\EckK-UE1n_HI,Tck.]eJe%+e`VYXfuYr7:1;5fa;LFXKA_j$Q#7D]*d:o=A2[.RV%<^4&jiu"Y87./i:ha$9P8<-%!F]VV.rc:*OAn*q3F@3iIrhE1o72NXk9I%$X>*CCK8._IGdGSS?6a2"Y7t*?77k-b<Bm="\WX)l(B[+^kJXgoRRBEZU9Fh'c,'P6IY:'@E/_5G47hf.dU,C-d@ep>\K!@4*[He%$B'ocTkUs;Y\f)2<Oe5EiBl"pXfu)bm8V`$/`DD\_n57C(Rc#p<X3j%)(ma;3Yf)6B=Q;63EF3u"YJ+@?77kAbMI33acIg\_hFsi%nqS#"qSS#a=WQ@1J%3id0nj.fGbNdtCF^t4_[ETIY[)tM.P1G6Kr3P;_@@:rf;aP%=]]$;KggK9ToBe1XKZ2g7?=t*1coE;4Q8\k%!DN3C(Rbj*Z;"S;AIt'Mi^2+)X2nZa(Q.?cJ/?Ji6BM:B1lE0-%.CK)>\Gn^M.Ub$BQC&5BG_PSAp'3%D<!shEXGChnNr]plr7C@%c'!3SBSn,%GbLN4Mq2mABst.JD1tFEGbNdtCFcKgYal,NZ?9DcRdDVAY<o.'*A95imUb^oct(doXlDasXK/Sb'HQFLlZf,F6]>cG%R_m'6*,:G6j+SgT0bqp^0FVUV>$GFi$JST`[#PMgZaR_o'c*q36ITaX@J^Cif'u'G.dTu?LC/sjEM7*t<S4RnU30^SR[kqp<+408%SnhjW(RegT3aQK5*>b/V9ndF7/6^)JVHI,3D1rGMnNmQ5EM7'K;d?Lc[#PMgEeEA+$A[4&6?A$+("-)Q[#PMgZX\][.P+cDKdKs2%NXJReC`P/c;diCS2&3Q"5u4qL$Vdt9_HI]HAF"K6FVV?cYal,IZ?9DcRdDWlTRrbO*>b/V?%mDNm)diK6IPsE[Z1_i#!U^$SnWOS%a%t@::"F;T!e`9=]aGkPS$\^TJ?MP]HgqI>4c[A-9=EXH@tjtnHJ\smdo`lSr&!P,VisZmc_3=<Fr!a(Gs&o;k9VQ=:OV$r)eA+P%^eERTV!\'67EuG5@au[ZLOCn$S1cf"h_V'P\/*;;FMl4B&(E&8,s]MI$0W?nJ.KJTF:KbQh?*>tg"lf+],ff29deT7m'h1q35CGP%G<n3)]/\(H2T&Q4%ISepbjW]f0X;2gI5phCGJ0YUr.F:Rj`<]UOcZ"UD39pK,41JR.3[BB30m79QsMJ6jARIi)$D`D##fk(`<jO5%`[M**H4!)=US9)(iJ%Vl+t2.T_-mp.g'`HEk0d99YVm'!*,-c'`sL,"&H\cgRJF2t!i52%>nQ*D#d0pJ5hZ=VFd/ds>9M:]#46s!%3/`hU5]@_[F3"4i>fRT:4(N<B;;1uaE<R$0r4mH^bpr+/5\Bbtomu/JRVCr;O@i)k*]VH0VC`;uf0>oK%mYu`SC3,sNq\C-r=166%0l;+7M_k.e7]%m0Ou>C@4Uo\MY63D*7Yl&b"#un9Ql*L5BqkdN<SHFr#F%ACgDi2u$`72>5`$:9DK=Z]atSj&*4VS`PGKi@>gKhD%>9]qig>2h<$G[SM/YA+$jO3/pTZ!HLmVMsE0hn%D2K1hHe4VkBUaAbS)`TB176e0F\VN=bC>ajB[%.6!Hsm>+gs*Wg("TaWJK&9\%C"gZ/'J(k$,UTrog;gu<Z6m7(W.kiM@M"e!F[i5^#s@Wa!6;?Qd1uq(TR$^IK7Osi1HB>\5bC.*?U4?KD-l-)C7K;4!]\3*mS+n0%p,h\Ii.ea'FPO=?%5d4C>mi(.2JlUt$C@:opTbatT$t&T!?^&a`/J`jXMAh\'ABM&%CDHZD,jC\9Z9,&g8H,m0Frn=2q'YgTYs$N%Ft(Ls+]7b6%4Uke+X=6$dgcP8&s8Ok:&>T7b*X?J6mUUoZoLFL@'U/^p9C6_XU,>g-raki!`3?h3:0@8.)G;C.41h,a.l?8$7/PH%_(>s#KrN_pdY7mm@M?^Q-dH*Hp&MH;6(rD[N8X6PP[6)X@/@g[I[@Jd-kp4e=>EW+\-50l0Eo3CD*O+&1P*RieV&u2EW.6/T??bN%Z[l@0#i9/9#pr#Kg3qacTG/#l;QI''@Ncg>(T`@mKWKh\';^ore4HUj&3a]!8ROp&YbW]7.8WXQStAYNK2.%oK=II;.4K5ci1rZo%8t_Co8/hl"Op'f'!kD\qAi+*FL0FqJP/:CZ=cMD6!Mq'G:1Kj7E'0U_Qs*B[$LBW0BFt'[;Gs1:T[R:>/'3KBA#%%5M.'"J.4K'G%(i:#GGilh("dG29$c-N#BFN?\EiISsX2.hh\3iM1.F;h6die&g:eD)]2:u[uljSs`K>n+T%2-Qa!D5pl:1C!<E(>FV'%j"b8Ro7L%5UOlj!2Ur,g'Ssh0L_e%'PK>UC(M%H8kFS7K3!UJ5pR7-NHH0*,Snfq8jPbVKE_bAaKq*6j<WeCKF&g41eMT6fVgNHr0NQJ-O#[h%^Q`PA?4o$jkE=5cd@elp].Q96X0G]8<aob5G?b+g*WBd8M?a*fp;6h.[.qN3ITh.cDgtr<@;C?rIplu>>(C$kIp.D3?bbp:\1QD1%*LDap=22(]?I+pda0cN4dI4RR+rgBLA[aAhq7VGmo%;50$TO?4+$MTJLdrP:Ra&0uhkcL*I5;C/DQ42,-@RXc(CkmJ3_!JcR30!%%+T(mVWPYs;58'qRY+PZQW@TQfpW"H1fJ0!#k'(p5SKCA-i1kQ>;@;o.PBS+-FiiVb&i'<3MQF>Kh4M4:+C"Rf/oekUr@(miah&)W%=h7FCh4K!OJ!4r'iftNBmS?4H&Eql(+?MIiZL*;/$k'b3CEI.BfJL[V5@s]s"OB9U>3P:FAUg/YZ7e<5RjROQ&3]nu*D9`:BS::4%/_25oI[Hbc7ua,=L.aNQcT]=]G;IQ/`4a8u*f^'ea'm;CA!8404SqjlZ]Dh?ZKqD`#F07>]7/4+_4kJlD`V&%96U8gQPu&n+6G'6%GpgX]e)sJRAo[Vt3VJpcD*("CrJ$XiP%PkGic0Z&H1m_Y8iDiF^DTqoopDf];]Y]SjP"NWHN!']LT#Lr%#ub.j&;BNR*LMET)E83%%m@Mt@<P'-74B-]UXHsEgP74V]W)Wbr8"6gnU:U>ic*!p\b7115G3VhP[*qCfdD^4DW]Vj-L?H=ZeqRl7+egVZS_%<fWu+N\5\Z_%=h87uZeo_]F.5_cVV&959PLC)Rn3ArfsL52GZ;bPSbo9U[Elt*Dpj(Bm+aN/mtej+IFI7pIV--b4YA/"o5\4fT`/*8<SoM_UZ4d>%[dD!(M-^Qqqq[W3VIN@j2t>@T4T"c<fM.\1T$*\0@ir:-]Q)#shfE3op?VHX=-DtIclHVo6#M,.KlX;52!an8K-d]b,^>4KmJY+S%)`dTg8X3r_&sfLaTDm35P43/6LFW!sTc@A7K1YMJ9_nkC&S-t%d.2$F(B))?Se]YH5?R>saIkb>q)P/E%B6[lpACWIm<H^C5P.ne%O3RL<ONNpMU@jT_ON6S@0][B1,O"or7`PABnNB[^r*eYU:U^0Em9W,^r.4-jP9h;kT!=uO,Cc)jdjIN^0QDF_5Q6cC<+s<r%6m8&%N=RJbWUb?8?,Ou!o&<"f#;73&nXV;P%fHu'prJ9[%/2dC_ft>L+</&TieQm;G?hY?:&$@.C-ithf;9JNQ9cF^OosT7[&4?Nn0)n,%G7OH;?->G`g$]rJ$"`kEitN@hha9jkI>EHjXP,^d>iL0>ORA!>]SGDZI4E8SF\lV\G?qd:_0$9`D5mpb9_Zo]dL2*E;&:*%pFb8\%d;eVQs$DHe<tnYq&Cjg?G'fT":p'8BTicZ)XS*2h_a:KQC%"*cP"A.?2#1OOI>F2`&B;#YVoT^%llfP)A^+0;O35/!_qt&gNg/o'%Y33s`9oApI2-D]dK/Bl%+I0&QCHY5\aa45k_BBf_e,E83Ws<?L.0-MH(!d*hWTkdtlI5*[4nT@0V4Rc?oc],0KTRuA`BH%HV*i@!%T44d9VKY1i-7(<nMPmbFhXt,kR@NoPkM!mcU^&@!?tU%/'p=R5%<t:g1bMXC3&\cfbZeO9$.bmp+VfYVo=X*8Wn9E%35!DbH,oGT%G0W/ZYd/9*%B274(P?L&]@Ncc+d[:Hd6]=g*),saLE#TJV[5O+jrHrpUL2jeWM9<P(ogI$34K`n4^$keLK`@[ml8n@7eoqk:_Z]L%(iX&I]]4eu>N?f[>hL9m8S!p,*->bA]]0hZgZ*@s,`i@Wj("sN(rRA_XRV;uU$R^kV/T?mT";-Z^6BJQ>/''TcQtEeQP+pMMS)S)%8Nh]*Q^J9PV*lG!6NU3ZF-\/=kd=km,BnN=8n)jhf%lEH4tS+d24bSIfGC1Qk[]TIb=V&X:Wl=GMGMDek_W(Q4`#sN.6[$R:H:RO%LegT*k_Dqo4`#mL8Nl9l:H:ROL3Hf!FnEPkDDf#`;b@Rhi)<)UHf.gp%pRsj:(KDD;b@Q>i)<A]qqk=M&)5u?<Y)h";d'^$hc"+t%Hf%b:%pRpiD@\hd;gJrnhc#7?qqb8/&)5r>Q4LUa;kaelhG^9^Hep4)LCN]$hhV0ufgCY`mO@1Oh<rr`MTkK;l\E1A=c4Z.46?FF%cTNipZH_4Q$'?'&8TFC343[Y3F1^Jn+83-U%k+`l4&5faB7'?&,%GunJ0J?Ip4+>k]Aj&4G-tu/W%LL[knup]p?\1]/a\Rr7dOgO%Y(Q*-fg@7#fs@RjRG"pE<0q'S/Y.M*[KuH/B+H8nZ"FTCNZsKcK0I6n=^^=j[!-XU:>A\<(Z[g)9;LYmmJ(a7b1!Kn$#*Tn<$\9>%>(s3:Xoqn7Yb:sh]uT/ola`_B#sjiVJe4?6HYebHm;%c2-8@\1q)SmQY3\*E@-#IZ,D.a+#,<GLYG"XKXjiUVa#(4Nh0KNa^<D1k%.m&b/15-QLI+#+J;!;^Hng)2#%2E?,1,8Ko,Zh1C6qkKo'!$)pB-Msp)D"&uV)jCC67bqV`hLIA2MZTJb`Et@Kbt'h,Z1b=9J"PT%R.TWni]*+^kr"]^#uZqb,Z1CT[KNg_a7N$XCu;K_SZ2[R[b2!187kK"M<*].hI&uAa"L_8m\]-Lm)Glo,-M9$9(5bG'V9B=:ng>0%*b0eJ7a"Wl:c/q63ZK%`EKJ+)&<kh\L8Mnb2<U'a`2GMr+[OV@W!b>7YG<r:O=A*L$)3R#W%bCu6*ug=,V_KVX!'e$P3=2H.a'j%%8Ra'(SKubj^#\gK1V"D+6OcaMI9U%b:/[9sW&@J8UNUUrLKkhIP,K[(94Ck_f8q*n8[OWt($%4tLe\SR,f\LULO:8bH#V2lf2*e@%-n<8Q8.[jSlm4Bd`bS*V#>#m\0e10\PQ^#(1aOKZ3/=53]S6Pd8YVNhW"cEY5r=a<,Vc793=nU<2'>G58odj.'StAfK]K$V01f"\%cCo,JlQiTrZmZ?d+[PH@EKJ*e$Ep-00h]B!BL9ppE"4<g<0F1*0lDm#O<A:01m/]0i&)d9<YDM[`q;KMS0U-eFHYjc3lnE&Xs$*t%,dEhrd^&S96UH'dQ/=GUOeu^GGCdITqu315ll"NrUC&1=.j8ON[T!-PBO]"]4!1e:44UeFVPT;U0X\Z+F#Buf=71\hBRg:J,<2,U%N9A@[Y9B#c:YfiI.82\tL$@c5Mrj2EGO]ePp3_:<H+R7>f4UFOf@tg,<&=LW;`,7PL5)#hpoeNS_"0LCP@3+38'UjQZ+Tl%o_-at%lcl?nS*g(GT#sXOl^uL14b(oXe;UgPAG`ksTmLK,aI9hh6j6h%4JmU-aA_s0q?uD5qLLiD+LecNa1uV#r@n5!]q4QQ2VoEZgeYu)%k4_*ojt-r3Ej<KdZCs&`6FSb'U)(#NHCd;:llF,#'rQp=#\J_3g#b)s_IMP5ct#"ma$FhZT9@_3k;t`f$aQI(i/F,iR8kk@:+7D:%^C;hZ'NUZ,V6\u3hCS(1/*N7&V](I@g"(rUba?8[U.8qr&&%AA`ZhFUOL__96*?;HctHI]K"_GgQD=kPE[55t/KX095#YVr:b0k5%9F10/\[#3fHV-iai.c,s`_a!+CqRoamI%Tqhg@N*5s%22mOs2?`LV%g?RBSZoL#UkN%f_rX6bV)<.Rr-gg:934>aIHP#rfe5F!c5%_AlUXEoD(3iYH0QD#^Tq?h"tn"b[E1A)W2jW1JpfE9PF_S(bJU"\BcAbU>NhZ]m501Fs"\:uQC`ns=3t.E?`kjd-SAY%![b-D_r)%Dk=H3^B0*N$gn@!@\*tG@.esl>N[sbIduo\f.<$oRSFM/`q7%ON99@FbnO5U1t/oWX$KT/iq/_Z*#V8?-us6NEH%M,0T%HLVmcc7%",8sd5ErO,N149ua\EObZhT`!E=@7FKt^,!:BG&!mIF^f%5O0uiUYtEMW?._gRBdS_4LJi0ULn+M7G1XY]"M!Si!fHGMHajaEb0H%/jiZFmr\7@(=lOPJbokVFCfR?I?s8fcUqZgBdH,DX<TcceKI:_/KW)L6VDtO5BNbi>bXk)*X$cTLTQftEK/Eh:15^mbj3GjEcg4U%*tR<i5cJ_D+ACZIVr2rrV^/d16R'L]4aGWr?[3GK%Ble/'$f49XP0G\[BAU'@.d.-Uo"f'.Q<Nf^isH)@TL\LEJc7'e;nUXL??!G%5LqY3m-$W*5M"m/Xh)rA%:3$hc=T[HiFP!GlGq#,pZ%cGm`.=T;62#9@oe@)/[`+3BsUlh.P:I>Xnq[K<M+`]Wpen&Kq/V,LTT\c%<I/l1Zu:Y.rN1c+!1H0BB&:3W"Q?^;"m?]0U+Le+0q5"O7Vb6$F3/Y^_OGpXM^ajdYlIE0ms_J]I/q^m[O4JlLG$dVYdN>6aq([_%o&)f%7#OTo"7b5UWMq?-,<%$)%,#+4AuM*H?7j)fBYgb=ngLT8+DajSE2'5YKO?=>%=K?)R<g?6e)Ol!'fKs/7GG'4Dp:71eHRk#%bpHZAn1#?P9m'phaRWMCrIt'@*S2K-/#Y'C8I2\9JOk3Z'#Usk,kc]*qOUT;5bfF"3jFH5V'L`^_4[[p)C)A`2XN2!!XaJ\5+N'^%::i20H^riJ&2jOi5peUZ:_9Wo)iCLslU-D[iZ>#:g>@<kO,6l;rP)JUY?B*\,6+37phKPrI'TJXTi7NH*b"iV^#!'Q-YI(iS'Bdd%QT(PfYcWZAIge_,g+(JJXVFll[9#$mC9^/hXNc?A:oaciTQZ6tI15S0cp&KcqFqCqQiMrhDeF`PHecuOG!733./)!.oWT_.b?rk&%QbV@ZYMW4M?@?(.^22BT/Y$tZJ\Gj$DD+4PWgCuN^M^ac+\FLs/t]k&[eLeVH7+[~>%AI9_PrivateDataEnd